/********************************* Class Declaration ***************************/
/**
\package  OGUI - 
\class    ODataWidget

\brief    Data Widget
          The  data  widget  is  a  base  class  of  any  OGUI  control.  It  is
          responsible  for storing  the control  hierarchy and handling the data
          source  in a proper way. In some cases, data sources for a control are
          rather  complex  and  must  be  defined  as  hierarchical  structure 
          (OListLayout).  Data sources can be set simply by passing the property
          path,  by passing a predefined list layout or by Adding columns to the
          data source in a data widget.
          OGUI  controls are  arranged in  a hierarchy.  Each control may or may
          not  handle  events.  Eventhandling  must  be  enabled  by calling the
          enableEventHandling()  function.  Controls  that  do not handle events
          will  pass the events to the next higher control, that handles events.
          Thus,  you may pass a click event generated by a button to the window,
          which helds the button or to any higher level. 
          Standard  handling  for  events  is supported for standard O-Controls,
          which are OEHDataWidgets. 
          The  ODataWidget is  an OEHEventHandler,  which allows handlinh events
          by  overloading  the  standard  EventHandling functions in the derived
          class.  It  is,  however,  also  possible,  to  set  an external event
          handler (SetUserActionHdl()).

\date     $Date: 2006/08/26 17:16:43,82 $
\dbsource ogui.dev - ODABA Version 9.0
*/
/******************************************************************************/
#ifndef   ODataWidget_HPP
#define   ODataWidget_HPP

class     ODataWidget;

#define  std_string                                std::string
#ifndef   VECTOR_std_string_HPP
#define   VECTOR_std_string_HPP
#include  <sVECTOR.h>
#endif
class     CellData;
class     DBorder;
class     DPixmap;
class     ItemData;
class     OAccel;
class     OControlLayout;
class     ODControl;
class     OEH;
class     OEHAction;
class     OEHDataWidget;
class     OFont;
class     OIconSet;
class     OInputHelp;
class     OListCtl;
class     OListLayout;
class     OMenuBar;
class     OPopupMenu;
class     OToolBar;
class     OToolBarList;
class     PropertyHandle;
#include  <cADK_DATAEVENT.h>
#include  <cADK_DBEVENT.h>
#include  <cADK_DataReferenceType.h>
#include  <cADK_GUIEVENT.h>
#include  <cADK_HoriPos.h>
#include  <cADK_SizeType.h>
#include  <cADK_VertPos.h>
#include  <cActionBubbleType.h>
#include  <cODSPropertyType.h>
#include  <sDAlign.hpp>
#include  <sDColor.hpp>
#include  <sDFont.hpp>
#include  <sDPoint.hpp>
#include  <sDSize.hpp>
#include  <sDSyntaxClass.hpp>
#include  <sDatabaseHandle.hpp>
#include  <sODS.hpp>
#include  <sODSPropPath.hpp>
#include  <sODataWidget.hpp>
#include  <sOEHActionHandler.hpp>
#include  <sOEHEvent.hpp>
#include  <sOEHInternalEvent.hpp>
#include  <sOEHKeyEvent.hpp>
#include  <sOEHMouseEvent.hpp>
#include  <sOEHShortcut.hpp>
#include  <sOEHTimeEvent.hpp>
#include  <sOTreeLayout.hpp>
#include  <sOWidget.hpp>
class  ODataWidget :public OWidget,
public OEHActionHandler
{
protected  :         ODataWidget                                 *owning_odw;                                                // Owning data widget
protected  :         ODataWidget                                 *parent_odw;                                                // Parent widget
protected  :         ODataWidget                                 *zoom_out_odw;                                              // 
protected  :         ODS                                         *odw_ods;                                                   // 
protected  :         OEH                                         *event_handler;                                             // 
protected  :         OTreeLayout                                 *olayout;                                                   // 
protected  :         ODControl                                   *od_control;                                                // 
protected  :         OMenuBar                                    *menu;                                                      // 
protected  :         OPopupMenu                                  *context_menu;                                              // 
protected  :         OToolBarList                                *toolbars;                                                  // 
protected  :         OInputHelp                                  *input_help;                                                // 
protected  :         int16                                        display_level;                                             // 
protected  :         int8                                         event_handling;                                            // 
protected  :         logical                                      auto_zoom_in;                                              // 
protected  :         logical                                      dynamic;                                                   // Field has focus
protected  :         logical                                      ods_owner;                                                 // 
protected  :         logical                                      layout_owner;                                              // 
protected  :         int8                                         has_focus;                                                 // 

public     :
                     ODataWidget                                 *get_owning_odw() { return(owning_odw); }
                     ODataWidget                                 *get_parent_odw() { return(parent_odw); }
                     ODataWidget                                 *get_zoom_out_odw() { return(zoom_out_odw); }
                     ODS                                         *get_odw_ods() { return(odw_ods); }
                     OEH                                         *get_event_handler() { return(event_handler); }
                     OTreeLayout                                 *get_olayout() { return(olayout); }
                     ODControl                                   *get_od_control() { return(od_control); }
                     OMenuBar                                    *get_menu() { return(menu); }
                     OPopupMenu                                  *get_context_menu() { return(context_menu); }
                     OToolBarList                                *get_toolbars() { return(toolbars); }
                     OInputHelp                                  *get_input_help() { return(input_help); }
                     int16                                        get_display_level() { return(display_level); }
                     int8                                         get_event_handling() { return(event_handling); }
                     logical                                      get_auto_zoom_in() { return(auto_zoom_in); }
                     logical                                      get_dynamic() { return(dynamic); }
                     logical                                      get_ods_owner() { return(ods_owner); }
                     logical                                      get_layout_owner() { return(layout_owner); }
                     int8                                         get_has_focus() { return(has_focus); }
public     : virtual          OGUIImpExp            logical Activate ( );
public     :                  OGUIImpExp            OAccel *ActivateAccel ( );
public     :                  OGUIImpExp            void ActivateDBEvents ( );
public     : virtual          OGUIImpExp            OListLayout *AddColumn (char *prop_path, char *text, ODSPropertyType prop_type=PT_undefined );
public     : virtual          OGUIImpExp            OListLayout *AddColumn (int32 region_id, char *prop_path, char *text, ODSPropertyType prop_type=PT_undefined );
public     : virtual          OGUIImpExp            logical AddHighlightClass (char *names, DSyntaxClass &dsyntaxclass, DFont &dfont );
public     :                  OGUIImpExp            logical AddInputHelp (ODataWidget *pODataWidget, VECTOR(std_string) &activate_strings );
public     : virtual          OGUIImpExp            int32 AddRegion (int32 parent_id, char *prop_path, logical is_collection, char *text, ODSPropertyType prop_type=PT_undefined );
public     :                                        void CacheEvent (ADK_DATAEVENT ogui_data_event );
public     :                                        void CacheEvent (ADK_DBEVENT ogui_db_event );
public     :                                        void CacheEvent (ADK_GUIEVENT ogui_event );
public     : virtual          OGUIImpExp            CellData *Cell (int row, int col );
public     :                                        logical ConnectAction (OEHAction *action );
public     :                                        logical CreateContextMenu (const char *act_namesc, char *loid );
public     :                                        logical CreateMenuBar (const char *act_namesc, char *loid );
public     :                  OGUIImpExp            void CreateODS ( );
public     :                                        OToolBar *CreateToolBar (const char *act_namesc, char *loid );
public     : virtual          OGUIImpExp            OEHDataWidget *DataWidgetOEH ( );
public     : virtual          OGUIImpExp            logical Deactivate (logical data_only=NO );
public     :                  OGUIImpExp            void DeactivateDBEvents ( );
public     : virtual          OGUIImpExp            logical DeactivateElements ( );
public     :                  OGUIImpExp            void EnableInputHelp (logical enable_opt );
public     :                                        char EventHandling ( );
public     : virtual          OGUIImpExp            ODataWidget *EventHandlingODW ( );
public     :                                        void FlushEventCache ( );
public     :                                        int8 FocusActivate ( );
public     :                                        int8 FocusDeactivate ( );
public     :                                        void FocusReset ( );
public     :                                        void FocusSet ( );
public     : virtual          OGUIImpExp            QFrame *FrameQ ( );
public     :                                        char GenerateEvent (ADK_DATAEVENT ogui_data_event );
public     :                                        char GenerateEvent (ADK_DBEVENT ogui_db_event );
public     :                                        char GenerateEvent (ADK_GUIEVENT ogui_event );
public     : virtual          OGUIImpExp            PropertyHandle *GetBasePropertyHandle ( );
public     : virtual          OGUIImpExp            PropertyHandle *GetCurrentPropertyHandle ( );
public     : virtual          OGUIImpExp            int32 GetCurrentRegionID ( );
public     : virtual          OGUIImpExp            int32 GetCurrentRegionID (int32 parent_id, char *prop_path, ADK_DataReferenceType ref_type );
public     : virtual          OGUIImpExp            ODataWidget *GetDataWidget ( );
public     : virtual          OGUIImpExp            OWidget *GetDetailedCauser (OEHEvent *pOEHEvent );
public     :                  OGUIImpExp            logical GetDisplayLevel ( );
public     : virtual          OGUIImpExp            DFont GetFont ( );
public     :                  OGUIImpExp            ODataWidget *GetFreeWindow ( );
public     : virtual          OGUIImpExp            PropertyHandle *GetInitPropertyHandle ( );
public     : virtual          OGUIImpExp            char *GetKey ( );
public     : virtual          OGUIImpExp            OTreeLayout *GetLayout ( );
public     : virtual          OGUIImpExp            DFont GetLineFont (int column );
public     : virtual          OGUIImpExp            OListCtl *GetListControl ( );
public     : virtual          OGUIImpExp            OTreeLayout *GetListLayout ( );
public     : virtual          OGUIImpExp            PropertyHandle *GetNewInstanceHandle ( );
public     : virtual          OGUIImpExp            PropertyHandle *GetPropertyHandle ( );
public     : virtual          OGUIImpExp            PropertyHandle *GetPropertyHandle (ODSPropPath *pODSPropPath );
public     : virtual          OGUIImpExp            ODS *GetSelectedODS ( );
public     : virtual          OGUIImpExp            PropertyHandle *GetSelectedPropertyHandle ( );
public     : virtual          OGUIImpExp            int GetSubRegionCount (int32 region_id );
public     : virtual          OGUIImpExp            int GetSubRegionCount (int32 parent_id, char *prop_path, ADK_DataReferenceType ref_type );
public     : virtual          OGUIImpExp            char *GetText ( );
public     : virtual          OGUIImpExp            DPoint GetTextPosition ( );
public     :                  OGUIImpExp            logical HideToolbars ( );
public     :                                        logical IsVisible ( );
public     : virtual          OGUIImpExp            ODS *List ( );
public     : virtual          OGUIImpExp            ODS *ListValue ( );
public     :                                        logical LoadDynamicControl (char *class_name, char *control_name, logical active_f );
public     : virtual          OGUIImpExp            ItemData *LocateItem (const QString &rcqsText, logical recursive );
public     :                  OGUIImpExp                 ODataWidget (ODataWidget *pODataWidget, ODataWidget *oODataWidget, logical create_ods );
public     :                  OGUIImpExp                 ODataWidget (ODataWidget *pODataWidget, ODataWidget *oODataWidget, ODS *pODS );
public     : virtual          OGUIImpExp            OWidget *Parent ( );
public     :                  OGUIImpExp            QWidget *ParentWidgetQ ( );
public     :                                        void PositionElement (DPoint &position );
public     : virtual          OGUIImpExp            logical ProvideContextMenu (QObject *watched );
public     :                  OGUIImpExp            OEH *ProvideOEH ( );
public     : virtual          OGUIImpExp            PropertyHandle *ReceiveSelectedItem ( );
public     : virtual          OGUIImpExp            void RefreshRegion (int32 region_id );
public     : virtual          OGUIImpExp            logical RemoveColumn (int32 region_id, int32 column_id );
public     :                  OGUIImpExp            logical RemoveInputHelp (ODataWidget *pODataWidget );
public     :                  OGUIImpExp            logical RemoveReaction (OEHEvent &rOEHEvent, ODataWidget *generator_w=NULL, logical on_top_w=YES );
public     :                  OGUIImpExp            logical RemoveReaction (OEHKeyEvent key_event, ODataWidget *generator_w=NULL, logical on_top_w=YES );
public     :                  OGUIImpExp            logical RemoveReaction (OEHMouseEvent mouse_event, ODataWidget *generator_w=NULL, logical on_top_w=YES );
public     :                  OGUIImpExp            logical RemoveReaction (int int_event, ODataWidget *generator_w=NULL, logical on_top_w=YES );
public     :                  OGUIImpExp            logical RemoveReaction (DB_Event data_event, ODataWidget *generator_w=NULL, logical on_top_w=YES );
public     :                  OGUIImpExp            logical RemoveReaction (OEHTimeEvent time_event, ODataWidget *generator_w=NULL, logical on_top_w=YES );
public     : virtual          OGUIImpExp            int32 ReplaceSubRegions (int32 parent_id, int32 region_id );
public     : virtual          OGUIImpExp            logical ResetRegion (int32 parent_id, int32 region_id, logical reset_columns );
public     :                                        void ResetSize (ODataWidget *pODataWidget );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, char *parent_loid, ActionBubbleType pass_opt_w=ABT_never, char *pass_to=NULL, logical default_w=NO );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, char *parent_loid, OEHEvent *pOEHEvent, ODataWidget *generator_w=NULL, logical default_w=NO, ActionBubbleType pass_opt_w=ABT_never, char *pass_to=NULL );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, OEHMouseEvent mouse_event, ODataWidget *generator_w=NULL, logical default_w=NO );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, int int_event, ODataWidget *generator_w=NULL, logical default_w=NO );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, DB_Event data_event, ODataWidget *generator_w=NULL, logical default_w=NO );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, OEHTimeEvent time_event, ODataWidget *generator_w=NULL, logical default_w=NO );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, OEHInternalEvent system_event, ODataWidget *generator_w=NULL, logical default_w=NO );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, OEHShortcut short_cut, ODataWidget *generator_w=NULL, logical default_w=NO, char *parent_loid_w=NULL );
public     :                  OGUIImpExp            OEHAction *SetAction (const char *act_namesc, char *loid, OEHKeyEvent key_event, ODataWidget *generator_w=NULL, logical default_w=NO );
public     : virtual          OGUIImpExp            logical SetBasePath (char *base_path );
public     :                  OGUIImpExp            logical SetColumnFont (DFont *pDFont, int32 region_id, int32 column_id );
public     :                  OGUIImpExp            logical SetColumnPixmap (DPixmap *pDPixmap, int32 region_id, int32 column_id );
public     : virtual          OGUIImpExp            void SetCurrentItem (ItemData *pItemData );
public     :                                        logical SetDatabaseHandle (DatabaseHandle &db_handle );
public     : virtual          OGUIImpExp            logical SetDefaultReactions ( );
public     : virtual          OGUIImpExp            void SetDisabled (logical disable_opt );
public     : virtual          OGUIImpExp            logical SetDisplayLevel (int16 dsp_level );
public     : virtual          OGUIImpExp            logical SetDisplayLevel (char *typenames );
public     :                  OGUIImpExp            void SetEventHandling (logical evh );
public     : virtual          OGUIImpExp            logical SetFilter (char *expression, logical enable_opt );
public     :                  OGUIImpExp            logical SetFont (DFont *pDFont );
public     : virtual          OGUIImpExp            void SetFrameStyle (DBorder *pDBorder );
public     :                  OGUIImpExp            void SetGeometry (DPoint &position, DSize &dsize );
public     : virtual          OGUIImpExp            logical SetHandleWidth (int16 handle_width );
public     :                  OGUIImpExp            logical SetHelp (char *string );
public     : virtual          OGUIImpExp            void SetHidden (logical hidden );
public     : virtual          OGUIImpExp            logical SetIconSet (OIconSet *pOIconSet );
public     : virtual          OGUIImpExp            logical SetKey (char *key_area );
public     :                                        void SetLayout (OTreeLayout *tree_layout );
public     : virtual          OGUIImpExp            logical SetLineFont (char *font_names, int column );
public     : virtual          OGUIImpExp            logical SetLineFont (DFont *pDFont, int column );
public     : virtual          OGUIImpExp            logical SetLinePixmap (char *pixmap_names, int column );
public     : virtual          OGUIImpExp            logical SetLinePixmap (DPixmap *pDPixmap, int column );
public     :                                        logical SetMouseTracking ( );
public     :                                        logical SetParent (ODataWidget *pODataWidget, ODataWidget *oODataWidget );
public     : virtual          OGUIImpExp            OTreeLayout *SetPath (char *prop_path, ODSPropertyType prop_type=PT_undefined );
public     : virtual          OGUIImpExp            OTreeLayout *SetPath (char *prop_path, char *strname, logical is_collection, char *sort_index_name, ODSPropertyType prop_type=PT_undefined, PIACC accmode_w=PI_Update );
public     : virtual          OGUIImpExp            OTreeLayout *SetPath (ODSPropPath &rODSPropPath );
public     :                  OGUIImpExp            logical SetPropertyHandle (PropertyHandle *prophdl, logical auto_select );
public     :                  OGUIImpExp            logical SetRegionFont (DFont *pDFont, int32 region_id );
public     :                  OGUIImpExp            logical SetRegionPixmap (DPixmap *pDPixmap, int32 region_id );
public     : virtual          OGUIImpExp            void SetSpacing (int16 inner_dist );
public     : virtual          OGUIImpExp            logical SetStandardAction (const char *act_namesc, char *loid );
public     : virtual          OGUIImpExp            logical SetText (char *string );
public     : virtual          OGUIImpExp            void SetTextPosition (DPoint dposition );
public     : virtual          OGUIImpExp            void SetTextSelection (int32 start_pos, int32 length );
public     : virtual          OGUIImpExp            void SetTextSelection (DPoint start_point, DPoint end_point );
public     : virtual          OGUIImpExp            void SetToggled (logical toggle_opt );
public     :                  OGUIImpExp            logical SetTooltip (char *string );
public     : virtual          OGUIImpExp            logical SetType ( );
public     : virtual          OGUIImpExp            logical SetType (PropertyHandle *prophdl );
public     : virtual          OGUIImpExp            logical SetType (char *typenames );
public     :                  OGUIImpExp            logical SetUserActionHdl (OEHActionHandler *pOEHActionHandler, logical gui_opt );
public     : virtual          OGUIImpExp            void SetVisible (logical fEnabled );
public     :                                        void SetWindowFlags (logical reset_flags, logical has_title, logical has_border, logical has_close, logical has_resize, logical has_minmax, logical has_sysmenu, logical is_top_always, logical has_small_title );
public     :                                        logical SetZoomOutWidget (ODataWidget *pODataWidget, char auto_zoom );
public     :                                        logical SetupFont ( );
public     :                  OGUIImpExp            logical ShowToolbars ( );
public     : virtual          OGUIImpExp            void UpdateReadOnly (logical fReadOnly );
public     : virtual          OGUIImpExp            void UpdateScrollBars (logical has_hscroll, logical has_vscroll );
public     : virtual          OGUIImpExp            void UpdateSize (DSize &dsize );
public     : virtual          OGUIImpExp            void UpdateSize (DSize &dsize, ADK_SizeType vsize_policy, ADK_SizeType hsize_policy, int32 hori_strech, int32 vert_strech );
public     : virtual          OGUIImpExp            void UpdateSize (QWidget *pQWidget, int8 grid_control, DSize &dsize, DPoint &position, DAlign &dalign );
public     : virtual          OGUIImpExp            logical UpdateTreeLayout (int32 region_id );
public     :                                        void UpgradeSizePolicy (ADK_SizeType vsize_policy, ADK_SizeType hsize_policy );
public     :                                        void UpgradeSizePolicy (int32 hori_strech, int32 vert_strech );
public     : virtual          OGUIImpExp            logical UseDefaultHeight ( );
public     : virtual          OGUIImpExp            ODS *Value ( );
public     :                                        void disableEventHandling ( );
public     :                                        void enableEventHandling (logical gui_opt );
public     :                  OGUIImpExp            ODS *ods ( );
public     :                  OGUIImpExp            OEH *oeh ( );
public     :                  OGUIImpExp            void set_display_level (int16 dsp_level );
public     :                                        void set_od_control (ODControl *pODControl );
public     :                  OGUIImpExp                 ~ODataWidget ( );
};

#endif

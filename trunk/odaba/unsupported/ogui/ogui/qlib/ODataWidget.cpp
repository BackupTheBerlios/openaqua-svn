/********************************* Class Source Code ***************************/
/**
\package  OGUI - 
\class    ODataWidget

\brief    Data Widget
          The  data  widget  is  a  base  class  of  any  OGUI  control.  It  is
          responsible  for storing  the control  hierarchy and handling the data
          source  in a proper way. In some cases, data sources for a control are
          rather  complex  and  must  be  defined  as  hierarchical  structure 
          (OListLayout).  Data sources can be set simply by passing the property
          path,  by passing a predefined list layout or by Adding columns to the
          data source in a data widget.
          OGUI  controls are  arranged in  a hierarchy.  Each control may or may
          not  handle  events.  Eventhandling  must  be  enabled  by calling the
          enableEventHandling()  function.  Controls  that  do not handle events
          will  pass the events to the next higher control, that handles events.
          Thus,  you may pass a click event generated by a button to the window,
          which helds the button or to any higher level. 
          Standard  handling  for  events  is supported for standard O-Controls,
          which are OEHDataWidgets. 
          The  ODataWidget is  an OEHEventHandler,  which allows handlinh events
          by  overloading  the  standard  EventHandling functions in the derived
          class.  It  is,  however,  also  possible,  to  set  an external event
          handler (SetUserActionHdl()).

\date     $Date: 2006/08/29 20:11:08,27 $
\dbsource ogui.dev - ODABA Version 9.0
*/
/******************************************************************************/
#define    OBJ_ID  "ODataWidget"

#include  <pogui7.h>
#include  <cguimac.h>
#include  <sCellData.hpp>
#include  <sDBStructDef.hpp>
#include  <sDBorder.hpp>
#include  <sDPixmap.hpp>
#include  <sItemData.hpp>
#include  <sOAccel.hpp>
#include  <sOActionList.hpp>
#include  <sOApplicationO.hpp>
#include  <sOBorder.hpp>
#include  <sOControlLayout.hpp>
#include  <sODControl.hpp>
#include  <sODControlList.hpp>
#include  <sODSItem.hpp>
#include  <sOEH.hpp>
#include  <sOEHAction.hpp>
#include  <sOEHDataWidget.hpp>
#include  <sOFont.hpp>
#include  <sOIconSet.hpp>
#include  <sOInputHelp.hpp>
#include  <sOListCtl.hpp>
#include  <sOListLayout.hpp>
#include  <sOMenuBar.hpp>
#include  <sOPopupMenu.hpp>
#include  <sOToolBar.hpp>
#include  <sOToolBarList.hpp>
#include  <sPropertyHandle.hpp>
#include  <sODataWidget.hpp>

int32 dw_count = 0;
int32 dw_max = 0;
int32 dw_total = 0;

/******************************************************************************/
/**
\brief  Activate - Activate control elements

        Control  elements are  subordinated elements  as columns or regions. The
        function  deactivates those elements. This does not include subordinated
        controls or buttons.

\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "Activate"

logical ODataWidget :: Activate ( )
{
  logical        term = NO;
BEGINSEQ
  if ( !odw_ods )                                    OGUIERR(99) // ev. auch LEAVESEQ

  if ( olayout )
    odw_ods->SetPath(*olayout); 
  odw_ods->SetActive(YES);

  SetupFont();
  
  if ( od_control )
    od_control->get_controls()->Activate();


RECOVER
  OGUIRESET
  term = YES;
ENDSEQ

  return(term);
}

/******************************************************************************/
/**
\brief  ActivateAccel - 



\return pOAccel - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ActivateAccel"

OAccel *ODataWidget :: ActivateAccel ( )
{
  OAccel                 *pOAccel = NULL;
BEGINSEQ
  if ( !(pOAccel = new OAccel(WidgetQ())) )          OGUIERR(95)
RECOVER
  pOAccel = NULL;
ENDSEQ
  return(pOAccel);
}

/******************************************************************************/
/**
\brief  ActivateDBEvents - Activate database events

        The  function enables database events for  the GUI element. The function
        must  be  called  when  database  events  have  been disables within the
        application.


*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ActivateDBEvents"

void ODataWidget :: ActivateDBEvents ( )
{

  ods()->get_prop()->ActivateDBEvents();

}

/******************************************************************************/
/**
\brief  AddColumn - Add column

        The  function allows adding a column to a table. Columns can be added by
        passing  an OListLayout containing the column definition (which might be
        structured  again) or  by passing  the parameter  for a simple column on
        the top level in the list.
        This   function   cannot   be   used   for   describing list layouts for
        subordinated regions in a tree view.

\return pOListLayout - 
-------------------------------------------------------------------------------
\brief  i01 - 



\param  prop_path - Property path
\param  text - 
\param  prop_type - Property path  type
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "AddColumn"

OListLayout *ODataWidget :: AddColumn (char *prop_path, char *text, ODSPropertyType prop_type )
{
  OListLayout   *col_layout;
BEGINSEQ
  if ( !GetLayout() )                                ERROR
  if ( !(col_layout = olayout->AddColumn(prop_path,NULL,NO,NULL,prop_type)) )
                                                     ERROR
  if ( text )
    col_layout->SetStaticText(text);

RECOVER

ENDSEQ
  return(col_layout);
}

/******************************************************************************/
/**
\brief  i02 - 



\param  region_id - 
\param  prop_path - Property path
\param  text - 
\param  prop_type - Property path  type
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "AddColumn"

OListLayout *ODataWidget :: AddColumn (int32 region_id, char *prop_path, char *text, ODSPropertyType prop_type )
{
  OListLayout   *col_layout = NULL;
  OTreeLayout   *region = GetLayout()->FindRegion(region_id);
BEGINSEQ
  if ( !region )                                     ERROR
  if ( !(col_layout = region->AddColumn(prop_path,NULL,NO,NULL,prop_type)) )
                                                     ERROR
  if ( text )
    col_layout->SetStaticText(text);

RECOVER
  col_layout = NULL;
ENDSEQ
  return(col_layout);
}

/******************************************************************************/
/**
\brief  AddHighlightClass - 



\return term - 

\param  names - 
\param  dsyntaxclass - 
\param  dfont - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "AddHighlightClass"

logical ODataWidget :: AddHighlightClass (char *names, DSyntaxClass &dsyntaxclass, DFont &dfont )
{

  return(NO);

}

/******************************************************************************/
/**
\brief  AddInputHelp - 



\return term - 

\param  pODataWidget - Parent data widget
\param  activate_strings - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "AddInputHelp"

logical ODataWidget :: AddInputHelp (ODataWidget *pODataWidget, VECTOR(std_string) &activate_strings )
{
  logical                 term = NO;
BEGINSEQ
  if ( !pODataWidget )                               ERROR
    
  if ( !input_help )
    input_help = new OInputHelp(this,this,NULL);
    
  input_help->AddWidget(pODataWidget,activate_strings);
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  AddRegion - 



\return region_id - 

\param  parent_id - 
\param  prop_path - Property path
\param  is_collection - Is referenced path pointing to a collection
\param  text - 
\param  prop_type - Property path  type
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "AddRegion"

int32 ODataWidget :: AddRegion (int32 parent_id, char *prop_path, logical is_collection, char *text, ODSPropertyType prop_type )
{

  return(UNDEF);

}

/******************************************************************************/
/**
\brief  CacheEvent - 



-------------------------------------------------------------------------------
\brief  i0 - 



\param  ogui_data_event - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "CacheEvent"

void ODataWidget :: CacheEvent (ADK_DATAEVENT ogui_data_event )
{

  oeh()->CacheEvent(ogui_data_event);

}

/******************************************************************************/
/**
\brief  i01 - 



\param  ogui_db_event - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "CacheEvent"

void ODataWidget :: CacheEvent (ADK_DBEVENT ogui_db_event )
{

  oeh()->CacheEvent(ogui_db_event);

}

/******************************************************************************/
/**
\brief  i02 - 



\param  ogui_event - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "CacheEvent"

void ODataWidget :: CacheEvent (ADK_GUIEVENT ogui_event )
{

  oeh()->CacheEvent(ogui_event);

}

/******************************************************************************/
/**
\brief  Cell - 



\return cell - 

\param  row - 
\param  col - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "Cell"

CellData *ODataWidget :: Cell (int row, int col )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  ConnectAction - 



\return term - 

\param  action - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ConnectAction"

logical ODataWidget :: ConnectAction (OEHAction *action )
{
  QWidget        *qwidget = WidgetQ();
  logical         term = NO;
BEGINSEQ
  if ( !action || !qwidget )                         ERROR
  if ( !action->get_qaction() )                      LEAVESEQ
  
  if ( ((OActionList *)&qwidget->actions())->FindAction(action) ) 
                                                     LEAVESEQ
  qwidget->addAction(action->get_qaction());  

RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  CreateContextMenu - 



\return term - 

\param  act_namesc - Action name
\param  loid - Identification for an action object
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "CreateContextMenu"

logical ODataWidget :: CreateContextMenu (const char *act_namesc, char *loid )
{
  OEHAction     *oeh_action = NULL;
  logical        term       = NO;
BEGINSEQ
  if ( !(oeh_action = oeh()->FindAction((char *)act_namesc,
                                        loid,NO)) )  OGUIERR(99)

  if ( context_menu && ( context_menu->get_menu_action() != oeh_action ) )
  {
    delete context_menu;
    context_menu = NULL;
  }
  
  if ( context_menu )                                LEAVESEQ
  
  ProvideContextMenu(NULL);
  
  if ( !context_menu )  
    if ( !(context_menu = new OPopupMenu(this,this)) )
                                                     OGUIERR(95)  
  if ( context_menu->SetupActions(oeh_action) )      ERROR
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  CreateMenuBar - 



\return term - 

\param  act_namesc - Action name
\param  loid - Identification for an action object
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "CreateMenuBar"

logical ODataWidget :: CreateMenuBar (const char *act_namesc, char *loid )
{
  OEHAction     *oeh_action = NULL;
  logical        term       = NO;
BEGINSEQ
  if ( !(oeh_action = oeh()->FindAction((char *)act_namesc,
                                        loid,NO)) )  OGUIERR(99)

  if ( menu && ( menu->get_menu_action() != oeh_action ) )
  {
    delete menu;
    menu = NULL;
  }
  
  if ( menu )                                        LEAVESEQ
  
  if ( !(menu = new OMenuBar(this,this)) )           OGUIERR(95)
  if ( menu->SetupActions(oeh_action) )              ERROR
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  CreateODS - Create ODS

        When  a data widget does  not have an own  ODS this can be created later
        on.  Since  the  data  source  (ODS) is always taken from the current or
        next   parent   data   widget,   which   has   an   ODS, this may affect
        sub-ordinated data widgets as well.


*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "CreateODS"

void ODataWidget :: CreateODS ( )
{

  if ( !odw_ods )
  {
    ods_owner = YES;
    odw_ods   = new ODS();
    if ( owning_odw )
      odw_ods->SetParentODS(owning_odw->ods()); // nd 18.8. statt in OADI    
    else if ( parent_odw )
      odw_ods->SetParentODS(parent_odw->ods()); // ist nur zur Sicherheit
  }


}

/******************************************************************************/
/**
\brief  CreateToolBar - 



\return pOToolBar - 

\param  act_namesc - Action name
\param  loid - Identification for an action object
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "CreateToolBar"

OToolBar *ODataWidget :: CreateToolBar (const char *act_namesc, char *loid )
{
  OEHAction     *oeh_action = NULL;
  OToolBar      *toolbar    = NULL;
  logical        term       = NO;
BEGINSEQ
  if ( !(oeh_action = oeh()->FindAction((char *)act_namesc,
                                        loid,NO)) )  OGUIERR(99)

  if ( !toolbars )
    toolbars = new OToolBarList();
    
  if ( toolbars->FindToolBar(oeh_action) )           LEAVESEQ
  
  if ( !(toolbar = new OToolBar(this,this)) )        OGUIERR(95)
  if ( toolbar->SetupActions(oeh_action) )           ERROR
  toolbars->append(toolbar);
RECOVER
  delete toolbar;
  toolbar = NULL;
ENDSEQ
  return(toolbar);
}

/******************************************************************************/
/**
\brief  DataWidgetOEH - 



\return pOEHDataWidget - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "DataWidgetOEH"

OEHDataWidget *ODataWidget :: DataWidgetOEH ( )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  Deactivate - 



\return term - 

\param  data_only - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "Deactivate"

logical ODataWidget :: Deactivate (logical data_only )
{

  if ( od_control )
    od_control->get_controls()->Deactivate(data_only);

  return(NO);
}

/******************************************************************************/
/**
\brief  DeactivateDBEvents - Deactivate database events

        The  function  disables  database  events  for  the  GUI  element. Thus,
        changes  on the data source are not signaled to the GUI element anymore.
        Database  events must  be enabled  again (ActivateDBEvents()), since the
        GUI element will not behave correctly otherwise.


*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "DeactivateDBEvents"

void ODataWidget :: DeactivateDBEvents ( )
{

  ods()->get_prop()->DeactivateDBEvents();

}

/******************************************************************************/
/**
\brief  DeactivateElements - 



\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "DeactivateElements"

logical ODataWidget :: DeactivateElements ( )
{
  ODSItem       *it = ods()->Item();
  logical        term = NO;
  ods()->SetPropHdl(NULL);

  Deactivate(YES);

  ods()->SetPropHdl(it);

  return(NO);
}

/******************************************************************************/
/**
\brief  EnableInputHelp - 




\param  enable_opt - Enable option
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "EnableInputHelp"

void ODataWidget :: EnableInputHelp (logical enable_opt )
{

BEGINSEQ
  if ( !input_help )                                 LEAVESEQ
    
  if ( enable_opt )
    input_help->Initialize();
  else
    input_help->Deinitialize();
  

ENDSEQ

}

/******************************************************************************/
/**
\brief  EventHandling - 



\return cond - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "EventHandling"

char ODataWidget :: EventHandling ( )
{

  return (   !this || IsInDesignMode() 
           ? AUTO
           : event_handling                 );


}

/******************************************************************************/
/**
\brief  EventHandlingODW - 



\return pODataWidget - Parent data widget

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "EventHandlingODW"

ODataWidget *ODataWidget :: EventHandlingODW ( )
{
  ODataWidget      *odw = this;
BEGINSEQ
  switch ( EventHandling() )
  {
    case AUTO : ERROR
    case 1    : 
    case 2    : LEAVESEQ
    case NO   :
    default   : if ( !owning_odw )               OGUIERR(10)
                odw = owning_odw->EventHandlingODW();
  }
RECOVER
  odw = NULL;
ENDSEQ
  return(odw);
}

/******************************************************************************/
/**
\brief  FlushEventCache - 




*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "FlushEventCache"

void ODataWidget :: FlushEventCache ( )
{

  oeh()->FlushEventCache();

}

/******************************************************************************/
/**
\brief  FocusActivate - 



\return executed - Action executed

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "FocusActivate"

int8 ODataWidget :: FocusActivate ( )
{
  int8                executed = NO;
BEGINSEQ
  if ( has_focus != AUTO )                         LEAVESEQ
  
  if ( owning_odw )
    executed = owning_odw->FocusActivate();
    
  if ( GenerateEvent(GEV_Enter) == YES )
    executed = YES;
        
  has_focus = YES;

ENDSEQ
  return(executed);
}

/******************************************************************************/
/**
\brief  FocusDeactivate - 



\return executed - Action executed

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "FocusDeactivate"

int8 ODataWidget :: FocusDeactivate ( )
{
  int8               executed = NO;
BEGINSEQ
  if ( has_focus != AUTO )                         LEAVESEQ
  
  executed = GenerateEvent(GEV_Leave);
        
  if ( owning_odw )
    if ( owning_odw->FocusDeactivate() == YES )
      executed = YES;
    
  has_focus = NO;

ENDSEQ
  return(executed);
}

/******************************************************************************/
/**
\brief  FocusReset - 




*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "FocusReset"

void ODataWidget :: FocusReset ( )
{

BEGINSEQ
  if ( !has_focus )                                LEAVESEQ
  
  has_focus = AUTO;
  
  if ( owning_odw )
    owning_odw->FocusReset();
    

ENDSEQ

}

/******************************************************************************/
/**
\brief  FocusSet - 




*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "FocusSet"

void ODataWidget :: FocusSet ( )
{

BEGINSEQ
  if ( has_focus == YES )                          LEAVESEQ
  
  has_focus = has_focus == AUTO ? YES : AUTO;
  
  if ( owning_odw )
    owning_odw->FocusSet();
    

ENDSEQ

}

/******************************************************************************/
/**
\brief  FrameQ - 



\return pQFrame - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "FrameQ"

QFrame *ODataWidget :: FrameQ ( )
{


  return(NULL);
}

/******************************************************************************/
/**
\brief  GenerateEvent - 



\return executed - Action executed
-------------------------------------------------------------------------------
\brief  i00 - 



\param  ogui_data_event - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GenerateEvent"

char ODataWidget :: GenerateEvent (ADK_DATAEVENT ogui_data_event )
{

  return ( ods()->Item() || !ods()->ParentODS()
           ? oeh()->GenerateEvent(ogui_data_event,this) 
           : AUTO );

}

/******************************************************************************/
/**
\brief  i01 - 



\param  ogui_db_event - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GenerateEvent"

char ODataWidget :: GenerateEvent (ADK_DBEVENT ogui_db_event )
{

  return ( ods()->Item() 
           ? oeh()->GenerateEvent(ogui_db_event,this) 
           : AUTO );

}

/******************************************************************************/
/**
\brief  i02 - 



\param  ogui_event - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GenerateEvent"

char ODataWidget :: GenerateEvent (ADK_GUIEVENT ogui_event )
{

  return ( ods()->Item() || ogui_event == GEV_Open || ogui_event == GEV_Opened
           ? oeh()->GenerateEvent(ogui_event,this) 
           : AUTO );

}

/******************************************************************************/
/**
\brief  GetBasePropertyHandle - 



\return ph - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetBasePropertyHandle"

PropertyHandle *ODataWidget :: GetBasePropertyHandle ( )
{


  return(NULL);
}

/******************************************************************************/
/**
\brief  GetCurrentPropertyHandle - 



\return ph - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetCurrentPropertyHandle"

PropertyHandle *ODataWidget :: GetCurrentPropertyHandle ( )
{

  return(GetPropertyHandle());

}

/******************************************************************************/
/**
\brief  GetCurrentRegionID - 



\return region_id - 
-------------------------------------------------------------------------------
\brief  i00 - 



*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetCurrentRegionID"

int32 ODataWidget :: GetCurrentRegionID ( )
{

  return(UNDEF);

}

/******************************************************************************/
/**
\brief  i01 - 



\param  parent_id - 
\param  prop_path - Property path
\param  ref_type - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetCurrentRegionID"

int32 ODataWidget :: GetCurrentRegionID (int32 parent_id, char *prop_path, ADK_DataReferenceType ref_type )
{

  return(UNDEF);

}

/******************************************************************************/
/**
\brief  GetDataWidget - 



\return pODataWidget - Parent data widget

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetDataWidget"

ODataWidget *ODataWidget :: GetDataWidget ( )
{


  return(this);
}

/******************************************************************************/
/**
\brief  GetDetailedCauser - Get detailed causer object

        The  function returns  the detailed  causer object,  which is of intrest
        for  menu itens, which are not  ODataWidgets. In most cases the function
        returns the calling data widget as causer.

\return causer - Causer of the event

\param  pOEHEvent - Event pointer
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetDetailedCauser"

OWidget *ODataWidget :: GetDetailedCauser (OEHEvent *pOEHEvent )
{


  return(this);
}

/******************************************************************************/
/**
\brief  GetDisplayLevel - 



\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetDisplayLevel"

logical ODataWidget :: GetDisplayLevel ( )
{

  return(this ? display_level : UNDEF);


}

/******************************************************************************/
/**
\brief  GetFont - 



\return dFont - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetFont"

DFont ODataWidget :: GetFont ( )
{
  DFont         font;
  if ( olayout && olayout->HasLayout()  )
    font = olayout->GetLayout();
  else
    font = OWidget::GetFont();

  return(font);

}

/******************************************************************************/
/**
\brief  GetFreeWindow - Get next higher movable window

        The  functio returns the  next higher movable  window (window with title
        bar).  When the  current widget  is a  free window, the function returns
        'this'.

\return win_widget - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetFreeWindow"

ODataWidget *ODataWidget :: GetFreeWindow ( )
{
  QWidget           *top_parent = WidgetQ()->topLevelWidget();
  ODataWidget       *odw = this;
  QWidget           *pw;
  Qt::WindowFlags    f;
//  QWidget           *odww = this->WidgetQ()->window();
BEGINSEQ
  // get the parent widget that matches some flags
  pw = this->WidgetQ();
  while(pw){
    f = pw->windowFlags();
    if(   f & Qt::Tool
       || f & Qt::Window
       || f & Qt::SubWindow
       || f & Qt::FramelessWindowHint
       ){
       top_parent = pw;
       break;
    }
    pw = pw->parentWidget();
  }
  // now find it in the odw tree
  while ( odw )
  {
    if ( odw->WidgetQ() == top_parent || !odw->parent_odw )
                                                    LEAVESEQ
    odw = odw->parent_odw;
  }

ENDSEQ
  return(odw);
}

/******************************************************************************/
/**
\brief  GetInitPropertyHandle - 



\return ph - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetInitPropertyHandle"

PropertyHandle *ODataWidget :: GetInitPropertyHandle ( )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  GetKey - Get key value

        The  function  returns  the  key  area  for the instance selected in the
        list.  When  the  control  ha  an  edit  field  the function returns the
        content from the edit fiels converted into the key area.
        The  function returns NULL, when the data  source for the control has no
        key,  i.e. when it is  not based on a  collection or single reference or
        when  the collection is unordered an the  instances do not have an ident
        key.  For  ordered  collections  the  function  returns  the  key  area 
        structured  according to the definition of the sort key selected for the
        collection.  For  unordered  collection  the function returns a key area
        according to the defined ident-key.

\return key_area - Kea area

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetKey"

char *ODataWidget :: GetKey ( )
{
  char                *key_area = NULL;

  return(key_area);
}

/******************************************************************************/
/**
\brief  GetLayout - 



\return pOTreeLayout - Tree layout definition

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetLayout"

OTreeLayout *ODataWidget :: GetLayout ( )
{

  if ( !olayout )
    olayout = new OTreeLayout((OTreeLayout *)NULL);

  return(olayout);
}

/******************************************************************************/
/**
\brief  GetLineFont - 



\return DFont - 

\param  column - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetLineFont"

DFont ODataWidget :: GetLineFont (int column )
{


  return DFont();
}

/******************************************************************************/
/**
\brief  GetListControl - 



\return pOListCtl - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetListControl"

OListCtl *ODataWidget :: GetListControl ( )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  GetListLayout - 



\return pOTreeLayout - Tree layout definition

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetListLayout"

OTreeLayout *ODataWidget :: GetListLayout ( )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  GetNewInstanceHandle - 



\return prop_handle - Property handle

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetNewInstanceHandle"

PropertyHandle *ODataWidget :: GetNewInstanceHandle ( )
{

  return( NULL );

}

/******************************************************************************/
/**
\brief  GetPropertyHandle - Get property handle

        The  function returns  the property  handle for  the data source the GUI
        element  is based on. Changes made on the property handle (e.g. changing
        the  selection)  will  become  visible  on the application. For avoiding
        making  changes visible in the  application use the DeactivateDBEvents()
        function.

\return prop_handle - Property handle
-------------------------------------------------------------------------------
\brief  i00 - 



*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetPropertyHandle"

PropertyHandle *ODataWidget :: GetPropertyHandle ( )
{

  return( ods()->Handle() );

}

/******************************************************************************/
/**
\brief  i01 - 



\param  pODSPropPath - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetPropertyHandle"

PropertyHandle *ODataWidget :: GetPropertyHandle (ODSPropPath *pODSPropPath )
{
  PropertyHandle   *ph = NULL;
  ODS              *ods_ptr = ods();
BEGINSEQ
  if ( !ods_ptr )                                    ERROR
  
  if ( ods_ptr->get_path() == *pODSPropPath )
    ph = GetPropertyHandle();
RECOVER
  ph = NULL;
ENDSEQ
  return(ph);
}

/******************************************************************************/
/**
\brief  GetSelectedODS - 



\return pODS - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetSelectedODS"

ODS *ODataWidget :: GetSelectedODS ( )
{

  return( ods() );

}

/******************************************************************************/
/**
\brief  GetSelectedPropertyHandle - 



\return prop_handle - Property handle

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetSelectedPropertyHandle"

PropertyHandle *ODataWidget :: GetSelectedPropertyHandle ( )
{

  return(GetCurrentPropertyHandle());

}

/******************************************************************************/
/**
\brief  GetSubRegionCount - 



\return count - 
-------------------------------------------------------------------------------
\brief  i00 - 



\param  region_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetSubRegionCount"

int ODataWidget :: GetSubRegionCount (int32 region_id )
{

  return(UNDEF);

}

/******************************************************************************/
/**
\brief  i01 - 



\param  parent_id - 
\param  prop_path - Property path
\param  ref_type - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetSubRegionCount"

int ODataWidget :: GetSubRegionCount (int32 parent_id, char *prop_path, ADK_DataReferenceType ref_type )
{

  return(UNDEF);

}

/******************************************************************************/
/**
\brief  GetText - Get text

        The  function returns the text from the  edit control of the GUI element
        (if  there is any). For windows and lables the function returns the text
        set as caption. 
        The  text returned is pased in a  local area and might be destroeyd with
        the next function call. 
        Changing  the returned  text will  not affect  the text displayed in the
        GUI  element. You may,  however, use SetText  to replace the old text in
        the GUI element with the new text.

\return string - Character string

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetText"

char *ODataWidget :: GetText ( )
{
  char               *string = NULL;

  return(string);
}

/******************************************************************************/
/**
\brief  GetTextPosition - 



\return position - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "GetTextPosition"

DPoint ODataWidget :: GetTextPosition ( )
{
  DPoint                 position;

  return(position);
}

/******************************************************************************/
/**
\brief  HideToolbars - 



\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "HideToolbars"

logical ODataWidget :: HideToolbars ( )
{
  logical                 term = NO;
  if ( toolbars )
    toolbars->Show();
  return(term);
}

/******************************************************************************/
/**
\brief  IsVisible - 



\return cond - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "IsVisible"

logical ODataWidget :: IsVisible ( )
{
  ODataWidget   *odw     = EventHandlingODW();
  QWidget       *qwidget = odw ? odw->WidgetQ() : NULL;

  return ( qwidget ? qwidget->isVisible() : NO );

}

/******************************************************************************/
/**
\brief  List - List data source

        The  list data source is the data source  for the list in the list value
        control.  This  is  either  the  base  collection  (single references or
        elementary  value fields) or  the data source  set by the user (multiple
        references).

\return pODS - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "List"

ODS *ODataWidget :: List ( )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  ListValue - List value data source

        The  list value data  source is the  data source for the selected object
        in  the  list  value  control.  This  is  either the key of the selected
        instance or the selected instance itselfs, if no key is available.

\return pODS - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ListValue"

ODS *ODataWidget :: ListValue ( )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  LoadDynamicControl - 



\return term - 

\param  class_name - 
\param  control_name - 
\param  active_f - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "LoadDynamicControl"

logical ODataWidget :: LoadDynamicControl (char *class_name, char *control_name, logical active_f )
{
  ODControl          *cod;
  logical             term = NO;
BEGINSEQ
  if ( !od_control )                                 ERROR
  
  SetSysVariable("DYNLOAD_CONTROL",control_name ? control_name : "");
  SetSysVariable("DYNLOAD_CLASS",class_name);
  if ( oeh()->ExecuteUserAction("LoadDynamicControl") )
                                                    ERROR
  if ( active_f )
    if ( cod = od_control->GetLastChildControl() )
    {
      cod->Activate();
      cod->Show(YES);
    }


RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  LocateItem - Locates a Item

        Locates a item without making it current.
        inherited implementations should ensure highlight and visibility.

        the located item is returned. hiersync to make it current

\return pItemData - ItemData

\param  rcqsText - 
\param  recursive - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "LocateItem"

ItemData *ODataWidget :: LocateItem (const QString &rcqsText, logical recursive )
{

BEGINSEQ
  OGUIERR(98)
RECOVER

ENDSEQ
  return(NULL);
}

/******************************************************************************/
/**
\brief  ODataWidget - 



-------------------------------------------------------------------------------
\brief  i0 - 



\param  pODataWidget - Parent data widget
\param  oODataWidget - Owning data widget
\param  create_ods - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ODataWidget"

     ODataWidget :: ODataWidget (ODataWidget *pODataWidget, ODataWidget *oODataWidget, logical create_ods )
                     : OWidget (),
  owning_odw(oODataWidget),
  parent_odw(pODataWidget),
  zoom_out_odw(NULL),
  odw_ods(NULL),
  event_handler(NULL),
  olayout(NULL),
  od_control(NULL),
  menu(NULL),
  context_menu(NULL),
  toolbars(NULL),
  input_help(NULL),
  display_level(0),
  event_handling(NO),
  auto_zoom_in(YES),
  dynamic(NO),
  ods_owner(NO),
  layout_owner(UNDEF),
  has_focus(NO)



{

BEGINSEQ
  OGUIRESET
//if ( !(parent_odw || create_ods) )                OGUIERR(99)

  if ( create_ods )
    CreateODS();
RECOVER

ENDSEQ
  OGUIRESET
dw_total++;
if ( dw_max < ++dw_count ) dw_max = dw_count;

}

/******************************************************************************/
/**
\brief  i01 - 



\param  pODataWidget - Parent data widget
\param  oODataWidget - Owning data widget
\param  pODS - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ODataWidget"

     ODataWidget :: ODataWidget (ODataWidget *pODataWidget, ODataWidget *oODataWidget, ODS *pODS )
                     : OWidget (),
  owning_odw(oODataWidget),
  parent_odw(pODataWidget),
  zoom_out_odw(NULL),
  odw_ods(pODS),
  event_handler(NULL),
  olayout(NULL),
  od_control(NULL),
  menu(NULL),
  context_menu(NULL),
  toolbars(NULL),
  input_help(NULL),
  display_level(0),
  event_handling(NO),
  auto_zoom_in(YES),
  dynamic(NO),
  ods_owner(NO),
  layout_owner(UNDEF),
  has_focus(NO)
{

BEGINSEQ
  OGUIRESET
//if ( !odw_ods )                               OGUIERR(99)

// ev. ist parent_ods nicht gesetzt??  

RECOVER

ENDSEQ
  OGUIRESET
dw_total++;
if ( dw_max < ++dw_count ) dw_max = dw_count;

}

/******************************************************************************/
/**
\brief  Parent - 



\return pOWidget - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "Parent"

OWidget *ODataWidget :: Parent ( )
{

  return ( this ? parent_odw : NULL );

}

/******************************************************************************/
/**
\brief  ParentWidgetQ - 



\return pQWidget - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ParentWidgetQ"

QWidget *ODataWidget :: ParentWidgetQ ( )
{

  return( this && parent_odw ? parent_odw->WidgetQ() : NULL);

}

/******************************************************************************/
/**
\brief  PositionElement - 




\param  position - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "PositionElement"

void ODataWidget :: PositionElement (DPoint &position )
{
  QWidget     *widget = WidgetQ();

BEGINSEQ
  if ( !widget )                                     ERROR

  widget->move(QPoint(position.X,position.Y));  
    

RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  ProvideContextMenu - 



\return term - 

\param  watched - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ProvideContextMenu"

logical ODataWidget :: ProvideContextMenu (QObject *watched )
{

  return ( context_menu ? NO : YES );

}

/******************************************************************************/
/**
\brief  ProvideOEH - 



\return pOEH - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ProvideOEH"

OEH *ODataWidget :: ProvideOEH ( )
{
  OEH           *pOEH = NULL;
BEGINSEQ
  if ( !this )                                       ERROR
  if ( !event_handler )
  {
    if ( !(event_handler = new OEH(this)) )          OGUIERR(95)
statistics6.Start();
    SetDefaultReactions();
statistics6.Stop();
  }
  pOEH = event_handler;

RECOVER
  pOEH = NULL;
ENDSEQ
  return(pOEH);
}

/******************************************************************************/
/**
\brief  ReceiveSelectedItem - 



\return prop_hdl - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ReceiveSelectedItem"

PropertyHandle *ODataWidget :: ReceiveSelectedItem ( )
{

  return(NULL);

}

/******************************************************************************/
/**
\brief  RefreshRegion - 




\param  region_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RefreshRegion"

void ODataWidget :: RefreshRegion (int32 region_id )
{



}

/******************************************************************************/
/**
\brief  RemoveColumn - 



\return term - 

\param  region_id - 
\param  column_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveColumn"

logical ODataWidget :: RemoveColumn (int32 region_id, int32 column_id )
{
  OTreeLayout  *region = olayout ? GetLayout()->FindRegion(region_id) : NULL;
  return( region ? region->RemoveColumn(column_id) : YES);

}

/******************************************************************************/
/**
\brief  RemoveInputHelp - 



\return term - 

\param  pODataWidget - Parent data widget
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveInputHelp"

logical ODataWidget :: RemoveInputHelp (ODataWidget *pODataWidget )
{
  logical        term = NO;
BEGINSEQ
  if ( !input_help )                                 ERROR
  input_help->RemoveWidget(pODataWidget);  

RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  RemoveReaction - 



\return term - 
-------------------------------------------------------------------------------
\brief  i0 - 



\param  rOEHEvent - Event reference
\param  generator_w - Generating Element
\param  on_top_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveReaction"

logical ODataWidget :: RemoveReaction (OEHEvent &rOEHEvent, ODataWidget *generator_w, logical on_top_w )
{
  logical     term = YES;
BEGINSEQ
  if ( !generator_w )
    generator_w = this;
  
  if ( oeh()->RemoveReaction(&rOEHEvent,generator_w,on_top_w) )
                                                     ERROR
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  i00 - 



\param  key_event - 
\param  generator_w - Generating Element
\param  on_top_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveReaction"

logical ODataWidget :: RemoveReaction (OEHKeyEvent key_event, ODataWidget *generator_w, logical on_top_w )
{
  OEHEvent oehkevent(key_event);
  return ( RemoveReaction(oehkevent,generator_w,on_top_w) );


}

/******************************************************************************/
/**
\brief  i01 - 



\param  mouse_event - 
\param  generator_w - Generating Element
\param  on_top_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveReaction"

logical ODataWidget :: RemoveReaction (OEHMouseEvent mouse_event, ODataWidget *generator_w, logical on_top_w )
{
  OEHEvent oehmouse_event(mouse_event);
  return ( RemoveReaction(oehmouse_event,generator_w,on_top_w) );

}

/******************************************************************************/
/**
\brief  i02 - 



\param  int_event - 
\param  generator_w - Generating Element
\param  on_top_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveReaction"

logical ODataWidget :: RemoveReaction (int int_event, ODataWidget *generator_w, logical on_top_w )
{
  OEHEvent oehint_event(int_event);
  return ( RemoveReaction(oehint_event,generator_w,on_top_w) );

}

/******************************************************************************/
/**
\brief  i03 - 



\param  data_event - 
\param  generator_w - Generating Element
\param  on_top_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveReaction"

logical ODataWidget :: RemoveReaction (DB_Event data_event, ODataWidget *generator_w, logical on_top_w )
{
  OEHEvent  oehdb_event(data_event);
  return ( RemoveReaction(oehdb_event,generator_w,on_top_w) );

}

/******************************************************************************/
/**
\brief  i04 - 



\param  time_event - 
\param  generator_w - Generating Element
\param  on_top_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "RemoveReaction"

logical ODataWidget :: RemoveReaction (OEHTimeEvent time_event, ODataWidget *generator_w, logical on_top_w )
{
  OEHEvent oehtime_event(time_event);
  return ( RemoveReaction(oehtime_event,generator_w,on_top_w) );

}

/******************************************************************************/
/**
\brief  ReplaceSubRegions - 



\return region_id - 

\param  parent_id - 
\param  region_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ReplaceSubRegions"

int32 ODataWidget :: ReplaceSubRegions (int32 parent_id, int32 region_id )
{

  return(UNDEF);

}

/******************************************************************************/
/**
\brief  ResetRegion - 



\return term - 

\param  parent_id - 
\param  region_id - 
\param  reset_columns - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ResetRegion"

logical ODataWidget :: ResetRegion (int32 parent_id, int32 region_id, logical reset_columns )
{

  return(YES);

}

/******************************************************************************/
/**
\brief  ResetSize - 




\param  pODataWidget - Parent data widget
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ResetSize"

void ODataWidget :: ResetSize (ODataWidget *pODataWidget )
{
  QWidget     *widget = pODataWidget->WidgetQ();
  int32        height = widget->height();
  int32        width = widget->width();

BEGINSEQ
  if ( !widget )                                     ERROR

  QSizePolicy  sp = widget->sizePolicy();

  if ( !sp.horizontalStretch() && sp.horizontalPolicy() == QSizePolicy::Expanding )
    width = widget->minimumWidth();
  if ( !sp.verticalStretch() && sp.verticalPolicy() == QSizePolicy::Expanding )
    height = widget->minimumHeight();
    
  WidgetQ()->resize(width,height);
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  SetAction - Set Action

        The  Action  name  passed  to  the function is associated with the event
        passed  for the  passed data  widget. When  no generating data widget is
        passed,  the  current  data  widget  is asumed to be the generating data
        widget.
        When  an action has already  been set, this will  be pushed on an action
        stack  and  reactivated,  when  the  action  is  removed  from the event
        generating  data widget.  This may  happen automatically, when no action
        handler is installed.

\return action - 
-------------------------------------------------------------------------------
\brief  i0 - 



\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  parent_loid - 
\param  pass_opt_w - 
\param  pass_to - 
\param  default_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, char *parent_loid, ActionBubbleType pass_opt_w, char *pass_to, logical default_w )
{

  return ( oeh()->SetReaction((char *)act_namesc,loid,parent_loid,
                              NULL,NULL,default_w,
                              pass_opt_w,pass_to) );

}

/******************************************************************************/
/**
\brief  i00 - Set action for any event

        The  function  sets  an  action  for  any  event. This implementation is
        usually  called internally, only. The event  passed to the function will
        be  managed  by  the  data  widged,  i.e.  the data widget will free the
        event, when not being used anymore.

\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  parent_loid - 
\param  pOEHEvent - Event pointer
\param  generator_w - Generating Element
\param  default_w - 
\param  pass_opt_w - 
\param  pass_to - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, char *parent_loid, OEHEvent *pOEHEvent, ODataWidget *generator_w, logical default_w, ActionBubbleType pass_opt_w, char *pass_to )
{

  if ( !generator_w )
    generator_w = this;
  
  return ( oeh()->SetReaction((char *)act_namesc,loid,parent_loid,
                              pOEHEvent,generator_w,default_w,
                              pass_opt_w,pass_to) );

}

/******************************************************************************/
/**
\brief  i01 - Set action for mouse event

        The implentation set an action for the passed mouse event.

\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  mouse_event - 
\param  generator_w - Generating Element
\param  default_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, OEHMouseEvent mouse_event, ODataWidget *generator_w, logical default_w )
{

  return ( SetAction(act_namesc,loid,NULL,
                     new OEHEvent(mouse_event),
                     generator_w,default_w,
                     ABT_never,NULL) );


}

/******************************************************************************/
/**
\brief  i02 - Set action for internal event

        The implentation set an action for the passed internal event.

\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  int_event - 
\param  generator_w - Generating Element
\param  default_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, int int_event, ODataWidget *generator_w, logical default_w )
{

  return ( SetAction(act_namesc,loid,NULL,
                     new OEHEvent(int_event),
                     generator_w,default_w,
                     ABT_never,NULL) );


}

/******************************************************************************/
/**
\brief  i03 - Set action for data event

        The implentation set an action for the passed data event.

\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  data_event - 
\param  generator_w - Generating Element
\param  default_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, DB_Event data_event, ODataWidget *generator_w, logical default_w )
{

  return ( SetAction(act_namesc,loid,NULL,
                     new OEHEvent(data_event),
                     generator_w,default_w,
                     ABT_never,NULL) );


}

/******************************************************************************/
/**
\brief  i04 - Set action for time event

        The implentation set an action for the passed time event.

\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  time_event - 
\param  generator_w - Generating Element
\param  default_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, OEHTimeEvent time_event, ODataWidget *generator_w, logical default_w )
{

  return ( SetAction(act_namesc,loid,NULL,
                     new OEHEvent(time_event),
                     generator_w,default_w,
                     ABT_never,NULL) );


}

/******************************************************************************/
/**
\brief  i06 - 



\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  system_event - 
\param  generator_w - Generating Element
\param  default_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, OEHInternalEvent system_event, ODataWidget *generator_w, logical default_w )
{

  return ( SetAction(act_namesc,loid,NULL,
                     new OEHEvent(system_event),
                     generator_w,default_w,
                     ABT_never,NULL) );


}

/******************************************************************************/
/**
\brief  i07 - 



\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  short_cut - 
\param  generator_w - Generating Element
\param  default_w - 
\param  parent_loid_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, OEHShortcut short_cut, ODataWidget *generator_w, logical default_w, char *parent_loid_w )
{

  return ( SetAction(act_namesc,loid,parent_loid_w,
                     new OEHEvent(short_cut),
                     generator_w,default_w,
                     ABT_never,NULL) );


}

/******************************************************************************/
/**
\brief  i08 - 



\param  act_namesc - Action name
\param  loid - Identification for an action object
\param  key_event - 
\param  generator_w - Generating Element
\param  default_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetAction"

OEHAction *ODataWidget :: SetAction (const char *act_namesc, char *loid, OEHKeyEvent key_event, ODataWidget *generator_w, logical default_w )
{

  return ( SetAction(act_namesc,loid,NULL,
                     new OEHEvent(key_event),
                     generator_w,default_w,
                     ABT_never,NULL) );


}

/******************************************************************************/
/**
\brief  SetBasePath - 



\return term - 

\param  base_path - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetBasePath"

logical ODataWidget :: SetBasePath (char *base_path )
{

  return(NO);

}

/******************************************************************************/
/**
\brief  SetColumnFont - 



\return term - 

\param  pDFont - 
\param  region_id - 
\param  column_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetColumnFont"

logical ODataWidget :: SetColumnFont (DFont *pDFont, int32 region_id, int32 column_id )
{
  OTreeLayout      *layout = GetListLayout();
  OListLayout      *column;
  logical           term = NO;
BEGINSEQ
  if ( !(column = layout->FindColumn(region_id,column_id)) )
                                                     ERROR
  column->ProvideDataLayout(YES); 
  column->SetLayout(pDFont);

RECOVER
  term = YES;
ENDSEQ
  return(YES);
}

/******************************************************************************/
/**
\brief  SetColumnPixmap - 



\return term - 

\param  pDPixmap - 
\param  region_id - 
\param  column_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetColumnPixmap"

logical ODataWidget :: SetColumnPixmap (DPixmap *pDPixmap, int32 region_id, int32 column_id )
{
  OTreeLayout      *layout = GetListLayout();
  OListLayout      *column;
  logical           term = NO;
BEGINSEQ
  if ( !(column = layout->FindColumn(region_id,column_id)) )
                                                     ERROR
  column->SetIcon(pDPixmap,NULL,NULL);

RECOVER
  term = YES;
ENDSEQ
  return(YES);
}

/******************************************************************************/
/**
\brief  SetCurrentItem - Changes the selection

        please  do  not  interrupt  the  logics  behind  that  and  use/change 
        setCurrentItemCandidate


\param  pItemData - ItemData
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetCurrentItem"

void ODataWidget :: SetCurrentItem (ItemData *pItemData )
{



}

/******************************************************************************/
/**
\brief  SetDatabaseHandle - 



\return term - 

\param  db_handle - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetDatabaseHandle"

logical ODataWidget :: SetDatabaseHandle (DatabaseHandle &db_handle )
{

  return(YES);

}

/******************************************************************************/
/**
\brief  SetDefaultReactions - 



\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetDefaultReactions"

logical ODataWidget :: SetDefaultReactions ( )
{


  return(NO);
}

/******************************************************************************/
/**
\brief  SetDisabled - Disable data widget

        The  function  disables  or  enables  the data widget, if possible. When
        being  disabled, the widget does not allow entering data and actions are
        disabled.  Passing  true  (YES)  will  disable the widget. Passing false
        (NO) will enable the widget.


\param  disable_opt - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetDisabled"

void ODataWidget :: SetDisabled (logical disable_opt )
{

  if ( WidgetQ() )
    WidgetQ()->setDisabled(disable_opt);
  enabled = !disable_opt;

}

/******************************************************************************/
/**
\brief  SetDisplayLevel - 



\return term - 
-------------------------------------------------------------------------------
\brief  - 



\param  dsp_level - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetDisplayLevel"

logical ODataWidget :: SetDisplayLevel (int16 dsp_level )
{

  if ( display_level <= 0 )
    display_level = dsp_level;

  return(NO);
}

/******************************************************************************/
/**
\brief  i01 - 



\param  typenames - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetDisplayLevel"

logical ODataWidget :: SetDisplayLevel (char *typenames )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  SetEventHandling - 




\param  evh - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetEventHandling"

void ODataWidget :: SetEventHandling (logical evh )
{

  event_handling = evh;

}

/******************************************************************************/
/**
\brief  SetFilter - 



\return term - 

\param  expression - 
\param  enable_opt - Enable option
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetFilter"

logical ODataWidget :: SetFilter (char *expression, logical enable_opt )
{

  if ( olayout )
    olayout->SetFilter(expression,enable_opt);
    

  return(NO);
}

/******************************************************************************/
/**
\brief  SetFont - 



\return term - 

\param  pDFont - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetFont"

logical ODataWidget :: SetFont (DFont *pDFont )
{

  return ( GetLayout()->SetFont(pDFont,AUTO) );

}

/******************************************************************************/
/**
\brief  SetFrameStyle - 




\param  pDBorder - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetFrameStyle"

void ODataWidget :: SetFrameStyle (DBorder *pDBorder )
{
  OBorder      border;
  border.FromDBorder(pDBorder);
  
  if ( FrameQ() )
  {
    if ( !pDBorder )
      FrameQ()->setFrameStyle( QFrame::NoFrame );
    else
    {
      FrameQ()->setFrameStyle( border.get_type() | 
                               border.get_shadow_type() );
  
      FrameQ()->setLineWidth(border.get_line_with());
      FrameQ()->setMidLineWidth(border.get_mid_line_with());
    }
  }

}

/******************************************************************************/
/**
\brief  SetGeometry - 




\param  position - 
\param  dsize - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetGeometry"

void ODataWidget :: SetGeometry (DPoint &position, DSize &dsize )
{
  QWidget     *widget = WidgetQ();
BEGINSEQ
  if ( !widget )                                     ERROR

  widget->setGeometry(QRect(QPoint(position.X,position.Y),
                            QSize(dsize.Width,dsize.Height)));
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  SetHandleWidth - 



\return term - 

\param  handle_width - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetHandleWidth"

logical ODataWidget :: SetHandleWidth (int16 handle_width )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  SetHelp - 



\return term - 

\param  string - Character string
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetHelp"

logical ODataWidget :: SetHelp (char *string )
{
  QWidget       *qwidget = WidgetQ();
  logical        term    = NO;
BEGINSEQ
  if ( !string || !*string )                         ERROR
  if ( !qwidget )                                    ERROR

  qwidget->setWhatsThis(SZ2QS(string));
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  SetHidden - 




\param  hidden - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetHidden"

void ODataWidget :: SetHidden (logical hidden )
{

  if ( WidgetQ() )
  {
    if ( hidden )
      WidgetQ()->hide();
    else
      WidgetQ()->show();
  }
  visible = !hidden;

}

/******************************************************************************/
/**
\brief  SetIconSet - 



\return term - 

\param  pOIconSet - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetIconSet"

logical ODataWidget :: SetIconSet (OIconSet *pOIconSet )
{


  return(NO);
}

/******************************************************************************/
/**
\brief  SetKey - Set key value

        The  function will replace the key value for the currently selected item
        in  the edit control of  the list. It tries  to locate the instance with
        the  key value passed to the function. When no such instance exists, the
        function updates the text in the edit field of the control, only.

\return term - 

\param  key_area - Kea area
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetKey"

logical ODataWidget :: SetKey (char *key_area )
{
  logical                 term = NO;

  return(term);
}

/******************************************************************************/
/**
\brief  SetLayout - Set layout

        The  function  allows  setting  the  layout information for the control.
        Many  controls do have a simple  layout described mainly by the property
        path  (data source). But  a layout may  also define a table with several
        (structured)  columns  (OListLayout)  or  even  a table with a number of
        regions and subregions etc (OTreeLayout).
        The  function will copy the layout information into internal areas, i.e.
        changing  settings in the  layout after setting  the layout for the data
        widget will not have any affect.


\param  tree_layout - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetLayout"

void ODataWidget :: SetLayout (OTreeLayout *tree_layout )
{

  if ( olayout )
  {
    OGUISET(14)
    OGUIRESET
    if ( layout_owner )
      delete olayout;
  }
  
  olayout      = tree_layout;
  layout_owner = YES;
  


}

/******************************************************************************/
/**
\brief  SetLineFont - 



\return term - 
-------------------------------------------------------------------------------
\brief  i00 - 



\param  font_names - 
\param  column - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetLineFont"

logical ODataWidget :: SetLineFont (char *font_names, int column )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  i01 - 



\param  pDFont - 
\param  column - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetLineFont"

logical ODataWidget :: SetLineFont (DFont *pDFont, int column )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  SetLinePixmap - 



\return term - 
-------------------------------------------------------------------------------
\brief  i00 - 



\param  pixmap_names - 
\param  column - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetLinePixmap"

logical ODataWidget :: SetLinePixmap (char *pixmap_names, int column )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  i01 - 



\param  pDPixmap - 
\param  column - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetLinePixmap"

logical ODataWidget :: SetLinePixmap (DPixmap *pDPixmap, int column )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  SetMouseTracking - 



\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetMouseTracking"

logical ODataWidget :: SetMouseTracking ( )
{
  logical                 term = NO;
BEGINSEQ
  if ( WidgetQ() )                                   ERROR

  WidgetQ()->setMouseTracking(true);
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  SetParent - 



\return term - 

\param  pODataWidget - Parent data widget
\param  oODataWidget - Owning data widget
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetParent"

logical ODataWidget :: SetParent (ODataWidget *pODataWidget, ODataWidget *oODataWidget )
{
  logical           term = NO;
  owning_odw = oODataWidget;
  parent_odw = pODataWidget;

  if ( owning_odw )
    odw_ods->SetParentODS(owning_odw->ods()); // nd 18.8. statt in OADI    
  else if ( parent_odw )
    odw_ods->SetParentODS(parent_odw->ods()); // ist nur zur Sicherheit

  if ( !ods_owner && od_control &&  
        od_control->ods_owner && odw_ods == od_control->odw_ods )
  {
    ods_owner = YES;
    od_control->ods_owner = NO;
    od_control->odw_ods = NULL;
    od_control = NULL;
  }
  return(term);
}

/******************************************************************************/
/**
\brief  SetPath - Set data source

        Before  activating a data widget a proper  data source must be set. This
        can  be done by passing  a property path or  a list layout. You may also
        expand  a property path  by adding columns  to the data source definitin
        of the widget.

\return pOTreeLayout - Tree layout definition
-------------------------------------------------------------------------------
\brief  i0 - 



\param  prop_path - Property path
\param  prop_type - Property path  type
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetPath"

OTreeLayout *ODataWidget :: SetPath (char *prop_path, ODSPropertyType prop_type )
{

// erst in OEHDataWidget implementiert
  return(NULL);
}

/******************************************************************************/
/**
\brief  i01 - 



\param  prop_path - Property path
\param  strname - 
\param  is_collection - Is referenced path pointing to a collection
\param  sort_index_name - 
\param  prop_type - Property path  type
\param  accmode_w - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetPath"

OTreeLayout *ODataWidget :: SetPath (char *prop_path, char *strname, logical is_collection, char *sort_index_name, ODSPropertyType prop_type, PIACC accmode_w )
{

// erst in OEHDataWidget implementiert
  return(NULL);
}

/******************************************************************************/
/**
\brief  i02 - 



\param  rODSPropPath - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetPath"

OTreeLayout *ODataWidget :: SetPath (ODSPropPath &rODSPropPath )
{

// erst in OEHDataWidget implementiert
  return NULL;
}

/******************************************************************************/
/**
\brief  SetPropertyHandle - 



\return term - 

\param  prophdl - 
\param  auto_select - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetPropertyHandle"

logical ODataWidget :: SetPropertyHandle (PropertyHandle *prophdl, logical auto_select )
{
  logical                 term = NO;
BEGINSEQ
  if ( !prophdl )
  {
    ods()->ResetPropertyHandle();
    ERROR    
  }

  if ( !odw_ods )
    if ( !auto_select )                              ERROR

  if ( ods()->SetPropertyHandle(prophdl) )           ERROR
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  SetRegionFont - 



\return term - 

\param  pDFont - 
\param  region_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetRegionFont"

logical ODataWidget :: SetRegionFont (DFont *pDFont, int32 region_id )
{
  OTreeLayout      *layout = GetListLayout();
  OTreeLayout      *region;
  logical           term = NO;
BEGINSEQ
  if ( !(region = layout->FindRegion(region_id)) )   ERROR

  region->ProvideDataLayout(YES); 
  region->SetLayout(pDFont);

RECOVER
  term = YES;
ENDSEQ
  return(YES);
}

/******************************************************************************/
/**
\brief  SetRegionPixmap - 



\return term - 

\param  pDPixmap - 
\param  region_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetRegionPixmap"

logical ODataWidget :: SetRegionPixmap (DPixmap *pDPixmap, int32 region_id )
{
  OTreeLayout      *layout = GetListLayout();
  OTreeLayout      *region;
  logical           term = NO;
BEGINSEQ
  if ( !(region = layout->FindRegion(region_id)) )   ERROR

  region->SetIcon(pDPixmap,NULL,NULL);

RECOVER
  term = YES;
ENDSEQ
  return(NO);
}

/******************************************************************************/
/**
\brief  SetSpacing - 




\param  inner_dist - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetSpacing"

void ODataWidget :: SetSpacing (int16 inner_dist )
{



}

/******************************************************************************/
/**
\brief  SetStandardAction - Set standard action

        The  function sets the standard action  for a GUI element (data widget).
        The  function is mainly  used to set  standard actions for menu items or
        buttons.

\return term - 

\param  act_namesc - Action name
\param  loid - Identification for an action object
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetStandardAction"

logical ODataWidget :: SetStandardAction (const char *act_namesc, char *loid )
{


  return(NO);
}

/******************************************************************************/
/**
\brief  SetText - 



\return term - 

\param  string - Character string
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetText"

logical ODataWidget :: SetText (char *string )
{
  logical                 term = NO;

  return(term);
}

/******************************************************************************/
/**
\brief  SetTextPosition - 




\param  dposition - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetTextPosition"

void ODataWidget :: SetTextPosition (DPoint dposition )
{



}

/******************************************************************************/
/**
\brief  SetTextSelection - 



-------------------------------------------------------------------------------
\brief  i0 - 



\param  start_pos - 
\param  length - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetTextSelection"

void ODataWidget :: SetTextSelection (int32 start_pos, int32 length )
{



}

/******************************************************************************/
/**
\brief  i01 - 



\param  start_point - 
\param  end_point - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetTextSelection"

void ODataWidget :: SetTextSelection (DPoint start_point, DPoint end_point )
{



}

/******************************************************************************/
/**
\brief  SetToggled - Set toggle mode

        The  function sets  the toggle  mode for  the data widget, when the data
        widget supports toggle modes.


\param  toggle_opt - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetToggled"

void ODataWidget :: SetToggled (logical toggle_opt )
{



}

/******************************************************************************/
/**
\brief  SetTooltip - 



\return term - 

\param  string - Character string
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetTooltip"

logical ODataWidget :: SetTooltip (char *string )
{
  QWidget       *qwidget = WidgetQ();
  logical        term    = NO;
BEGINSEQ
  if ( !string || !*string )                         ERROR
  if ( !qwidget )                                    ERROR

  qwidget->setToolTip(SZ2QS(string));
RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  SetType - 



\return term - 
-------------------------------------------------------------------------------
\brief  i0 - 



*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetType"

logical ODataWidget :: SetType ( )
{

  return(SetType(ods()->Handle()));

}

/******************************************************************************/
/**
\brief  i01 - 



\param  prophdl - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetType"

logical ODataWidget :: SetType (PropertyHandle *prophdl )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  i02 - 



\param  typenames - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetType"

logical ODataWidget :: SetType (char *typenames )
{


  return(YES);
}

/******************************************************************************/
/**
\brief  SetUserActionHdl - 



\return term - 

\param  pOEHActionHandler - 
\param  gui_opt - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetUserActionHdl"

logical ODataWidget :: SetUserActionHdl (OEHActionHandler *pOEHActionHandler, logical gui_opt )
{
  logical                 term = NO;
BEGINSEQ
  if ( !this || !event_handling )                   OGUIERR(13)
    
  if ( gui_opt && EventHandling() == 1 )
  {
    if ( event_handler )                            OGUIERR(99)  // gui_opt kommt zu spaet
    enableEventHandling(YES);
  }
  oeh()->SetUserActionHdl(pOEHActionHandler);

RECOVER
  term = YES;
ENDSEQ
  return(term);
}

/******************************************************************************/
/**
\brief  SetVisible - 




\param  fEnabled - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetVisible"

void ODataWidget :: SetVisible (logical fEnabled )
{
  QWidget          *qw = WidgetQ();
BEGINSEQ
  if ( !qw )                                         ERROR
  
  if ( fEnabled )
    qw->show();
  else
    qw->hide();
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  SetWindowFlags - 




\param  reset_flags - 
\param  has_title - 
\param  has_border - 
\param  has_close - 
\param  has_resize - 
\param  has_minmax - 
\param  has_sysmenu - 
\param  is_top_always - 
\param  has_small_title - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetWindowFlags"

void ODataWidget :: SetWindowFlags (logical reset_flags, logical has_title, logical has_border, logical has_close, logical has_resize, logical has_minmax, logical has_sysmenu, logical is_top_always, logical has_small_title )
{
  QWidget           *qw;
  Qt::WindowFlags    flg;
BEGINSEQ
  if ( !this || !(qw = WidgetQ()) )                  ERROR
  
  if ( !reset_flags )
    flg = qw->windowFlags();

  if ( has_title || has_minmax || has_resize || has_sysmenu ) 
    flg |= Qt::Window;
  if ( has_title ) 
    flg |= Qt::WindowTitleHint;
  if ( has_minmax ) 
    flg |= Qt::WindowMinMaxButtonsHint;
  if ( !has_border && !has_resize ) 
    flg |= Qt::FramelessWindowHint;
  if ( !has_resize )
    flg |= Qt::MSWindowsFixedSizeDialogHint;
  if ( has_sysmenu ) 
    flg |= Qt::WindowSystemMenuHint;
  if ( is_top_always ) 
    flg |= Qt::WindowStaysOnTopHint;
  if ( has_small_title ) 
    flg |= Qt::Tool;    

  qw->setWindowFlags(flg);

RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  SetZoomOutWidget - 



\return term - 

\param  pODataWidget - Parent data widget
\param  auto_zoom - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetZoomOutWidget"

logical ODataWidget :: SetZoomOutWidget (ODataWidget *pODataWidget, char auto_zoom )
{

  zoom_out_odw = pODataWidget;
  
  if ( auto_zoom != AUTO )
    auto_zoom_in = auto_zoom;
  return(NO);
}

/******************************************************************************/
/**
\brief  SetupFont - 



\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "SetupFont"

logical ODataWidget :: SetupFont ( )
{
  QWidget       *qwidget = WidgetQ();
  QFont         *font;
  QColor        *color;
  QPalette       palette;
  logical        term = NO;
  if ( olayout && olayout->HasLayout() && qwidget )
  {
    if ( (color = olayout->GetBackgroundColor()) && color->isValid() )
    {
      palette.setColor(qwidget->backgroundRole(),*color);
      qwidget->setPalette(palette);  
    }
    
    if ( (color = olayout->GetTextColor()) && color->isValid() )
    {
      palette.setColor(qwidget->foregroundRole(),*color);
      qwidget->setPalette(palette);  
    }
    
    if ( font = olayout->GetFont() )
      if ( font->pointSize() > 0 || font->pixelSize() > 0)
        qwidget->setFont(*(QFont *)font);
  }

  return(term);
}

/******************************************************************************/
/**
\brief  ShowToolbars - 



\return term - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ShowToolbars"

logical ODataWidget :: ShowToolbars ( )
{
  logical                 term = NO;
  if ( this && toolbars )
    toolbars->Show();
  return(term);
}

/******************************************************************************/
/**
\brief  UpdateReadOnly - 




\param  fReadOnly - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpdateReadOnly"

void ODataWidget :: UpdateReadOnly (logical fReadOnly )
{

  if ( od_control )
    od_control->UpdateReadOnly(fReadOnly);

}

/******************************************************************************/
/**
\brief  UpdateScrollBars - 




\param  has_hscroll - 
\param  has_vscroll - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpdateScrollBars"

void ODataWidget :: UpdateScrollBars (logical has_hscroll, logical has_vscroll )
{
  QWidget *qwidget = this ? WidgetQ() : NULL;
BEGINSEQ
  if ( !qwidget )                                    ERROR 
    
  if ( qwidget->inherits("QTextEdit") && !has_hscroll )
    ((QTextEdit *)qwidget)->setWordWrapMode(QTextOption::WordWrap);
  
  if ( qwidget->inherits("QWorkspace") )
    ((QWorkspace *)qwidget)->setScrollBarsEnabled(has_hscroll || has_vscroll);
  
  if( qwidget->inherits("QAbstractScrollArea") )    
  {
    ((QAbstractScrollArea *)qwidget)->setHorizontalScrollBarPolicy(has_hscroll ? Qt::ScrollBarAsNeeded: Qt::ScrollBarAlwaysOff);
    ((QAbstractScrollArea *)qwidget)->setVerticalScrollBarPolicy  (has_vscroll ? Qt::ScrollBarAsNeeded: Qt::ScrollBarAlwaysOff);
  }
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  UpdateSize - 



-------------------------------------------------------------------------------
\brief  i00 - 



\param  dsize - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpdateSize"

void ODataWidget :: UpdateSize (DSize &dsize )
{
  QWidget     *widget = WidgetQ();
BEGINSEQ
  if ( !widget )                                     ERROR

  widget->setMinimumWidth(dsize.Width);
  widget->setMinimumHeight(dsize.Height);

  widget->resize(dsize.Width,dsize.Height);
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  i01 - 



\param  dsize - 
\param  vsize_policy - 
\param  hsize_policy - 
\param  hori_strech - 
\param  vert_strech - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpdateSize"

void ODataWidget :: UpdateSize (DSize &dsize, ADK_SizeType vsize_policy, ADK_SizeType hsize_policy, int32 hori_strech, int32 vert_strech )
{
  QWidget     *widget = WidgetQ();
BEGINSEQ
  if ( !widget )                                     ERROR
  
  QSizePolicy sp  = widget->sizePolicy();
  
  sp.setHorizontalPolicy(GetQSizeType(hsize_policy));
  sp.setVerticalPolicy(GetQSizeType(vsize_policy));
  
  widget->setSizePolicy(sp);  
  UpgradeSizePolicy(hori_strech,vert_strech);

  sp = widget->sizePolicy();
  
  if ( sp.horizontalPolicy() != QSizePolicy::Fixed )
    widget->setMaximumWidth(32767);
  if ( sp.verticalPolicy() != QSizePolicy::Fixed )
    widget->setMaximumHeight(32767);
  
  if ( dsize.IsValid() )
  {
    if ( sp.horizontalPolicy() == QSizePolicy::Fixed )
      widget->setMaximumWidth(dsize.Width);

    if ( sp.verticalPolicy() == QSizePolicy::Fixed )
      widget->setMaximumHeight(dsize.Height);
  
    UpdateSize(dsize);
  }
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  i02 - 



\param  pQWidget - 
\param  grid_control - 
\param  dsize - 
\param  position - 
\param  dalign - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpdateSize"

void ODataWidget :: UpdateSize (QWidget *pQWidget, int8 grid_control, DSize &dsize, DPoint &position, DAlign &dalign )
{
  int            hcells;
  int            vcells;
  Qt::Alignment  align = dalign.ToQAlignment();
  QLayout       *layout;
  QWidget       *widget = WidgetQ();
BEGINSEQ
  if ( !widget )                                     ERROR
  if ( widget && grid_control && (layout = widget->parentWidget()->layout()) )
    layout->removeWidget(widget);
  
  switch ( grid_control )
  {
    case 1 : // horizontal 
             {
               QHBoxLayout  *hlayout = (QHBoxLayout *)pQWidget->layout();
               hlayout->addWidget(widget);
             }
             break;
    case 2 : // vertical 
             {
               QVBoxLayout  *vlayout = (QVBoxLayout *)pQWidget->layout();
               vlayout->addWidget(widget);
             }
             break;
    case 3 : // grid 
             {
               QGridLayout  *glayout = (QGridLayout *)pQWidget->layout();
               if ( (hcells = dalign.get_horiCells()) <= 0 )
                 hcells = 1; 
               if ( (vcells = dalign.get_vertCells()) <= 0 )
                 vcells = 1; 
               glayout->addWidget(widget,MAX(0,position.Y),MAX(0,position.X),vcells,hcells,align);
             }
             break;
    default: ;
  }

  UpdateSize(dsize,dalign.get_vertSizing(),dalign.get_horiSizing(),
             dalign.get_horiSizingRate(),dalign.get_vertSizingRate());
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  UpdateTreeLayout - 



\return term - 

\param  region_id - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpdateTreeLayout"

logical ODataWidget :: UpdateTreeLayout (int32 region_id )
{

  return(YES);

}

/******************************************************************************/
/**
\brief  UpgradeSizePolicy - 



-------------------------------------------------------------------------------
\brief  i00 - 



\param  vsize_policy - 
\param  hsize_policy - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpgradeSizePolicy"

void ODataWidget :: UpgradeSizePolicy (ADK_SizeType vsize_policy, ADK_SizeType hsize_policy )
{
  QWidget     *widget = WidgetQ();

BEGINSEQ
  if ( !widget )                                     ERROR

  QSizePolicy sp  = widget->sizePolicy();
  
  sp.setHorizontalPolicy(GetMaxQSizeType(sp.horizontalPolicy(),hsize_policy));
  sp.setVerticalPolicy(GetMaxQSizeType(sp.verticalPolicy(),vsize_policy));
  
  widget->setSizePolicy(sp);
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  i01 - 



\param  hori_strech - 
\param  vert_strech - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UpgradeSizePolicy"

void ODataWidget :: UpgradeSizePolicy (int32 hori_strech, int32 vert_strech )
{
 QWidget     *widget = WidgetQ();
BEGINSEQ
 if ( !widget )                                     ERROR

 QSizePolicy sp  = widget->sizePolicy();
  
 if(vert_strech>=0)
   sp.setHorizontalStretch(hori_strech);
 if(vert_strech>=0)
   sp.setVerticalStretch(vert_strech);
 
 widget->setSizePolicy(sp);
RECOVER

ENDSEQ

}

/******************************************************************************/
/**
\brief  UseDefaultHeight - 



\return cond - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "UseDefaultHeight"

logical ODataWidget :: UseDefaultHeight ( )
{


  return(NO);
}

/******************************************************************************/
/**
\brief  Value - Value ODS

        The  function  returns  the  ODS  that  helds  the  value (text) for the
        control.  In  case  of  combo-listboxes  this  is  the value in the edit
        control.

\return pODS - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "Value"

ODS *ODataWidget :: Value ( )
{

  return(ods());

}

/******************************************************************************/
/**
\brief  disableEventHandling - Disable event handling for the control

        Usually,  each  GUI-Control  will  handle  events. In some cases, it is,
        however,  preferable to pass events to the parent for being handled at a
        higher  level.  This  function  allows  disabling event handling. Events
        will be sent to the next higher conrol which handles events (enabled).


*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "disableEventHandling"

void ODataWidget :: disableEventHandling ( )
{

  event_handling = NO;

}

/******************************************************************************/
/**
\brief  enableEventHandling - Enable event handling for the control

        Usually,  each  GUI-Control  will  handle  events. In some cases, it is,
        however,  preferable to pass events to the parent for being handled at a
        higher  level. This function allows  enabling eventhandling when this is
        switched off.


\param  gui_opt - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "enableEventHandling"

void ODataWidget :: enableEventHandling (logical gui_opt )
{

  event_handling = gui_opt ? 2 : 1;

}

/******************************************************************************/
/**
\brief  ods - 



\return pODS - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "ods"

ODS *ODataWidget :: ods ( )
{
  ODS       *pODS = NULL;
BEGINSEQ
  if ( !this )                                      LEAVESEQ
  if ( pODS = odw_ods )                             LEAVESEQ

  if ( parent_odw && !parent_odw->get_is_destroying() )
   pODS = parent_odw->ods();

ENDSEQ
  return( pODS );
}

/******************************************************************************/
/**
\brief  oeh - 



\return pOEH - 

*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "oeh"

OEH *ODataWidget :: oeh ( )
{

  return( EventHandlingODW()->ProvideOEH() );


}

/******************************************************************************/
/**
\brief  set_display_level - 




\param  dsp_level - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "set_display_level"

void ODataWidget :: set_display_level (int16 dsp_level )
{

  display_level = dsp_level;


}

/******************************************************************************/
/**
\brief  set_od_control - 




\param  pODControl - 
*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "set_od_control"

void ODataWidget :: set_od_control (ODControl *pODControl )
{

  od_control = pODControl;

}

/******************************************************************************/
/**
\brief  ~ODataWidget - 




*/
/******************************************************************************/

#undef     MOD_ID
#define    MOD_ID  "~ODataWidget"

     ODataWidget :: ~ODataWidget ( )
{

  is_destroying = YES;
  
  if ( this == GetApplication()->GetLastFocusWidget() )
  {
    if ( has_focus )
      GenerateEvent(GEV_Leave);
    if ( WidgetQ() && WidgetQ()->parent() )
      GetApplication()->SetLastFocusWidget(owning_odw);
    else
      GetApplication()->SetLastFocusWidget(NULL);
//  GetApplication()->SetLastFocusWidget(owning_odw);
// das geht nicht, da der odw schon destruiert sein kann. Ist aber nicht ganz so dramatisch,
// da nur das letzte Leave beim destruieren nicht kommt. ...
  }

  if ( event_handler )
    event_handler->ExecuteAction("ForceClose",YES,NO);
  
  if ( ods_owner )
    delete odw_ods;
  odw_ods = NULL;
  
  if ( od_control && !od_control->IsDestroying() )
  {
    od_control->ResetControlWidget();
    delete od_control;
    od_control = NULL;
  }
  
  delete toolbars;
  toolbars = NULL;
  
  delete context_menu;
  context_menu = NULL;
  
  delete menu;
  menu = NULL;
  
  delete input_help;
  input_help = NULL;
  
  delete event_handler;
  event_handler = NULL;

  delete olayout;
  olayout = NULL;

dw_count--;
}



{\rtf1\ansi\deff0\deflang1031 {\fonttbl
{\f0\froman Times New Roman;}
{\f1\froman Times New Roman;}
{\f2\froman Times New Roman;}
{\f3\froman Times New Roman;}
{\f4\froman Times New Roman;}
{\f5\froman Times New Roman;}
{\f6\froman Times New Roman;}
{\f7\froman Times New Roman;}
{\f8\froman Times New Roman;}
{\f9\froman Times New Roman;}
}
{\colortbl
\red1\green1\blue0;
\red1\green1\blue0;
\red1\green1\blue0;
\red1\green1\blue0;
\red1\green1\blue0;
\red0\green0\blue0;
\red1\green1\blue0;
\red1\green1\blue0;
\red1\green1\blue0;
\red1\green1\blue0;
}
\paperw11906 {\stylesheet{\f0\fs20\lang1031 \snext0 Normal;}
{\s1\sb240\sa60\keepn \b\f0\fs28\lang1031\kerning28 \sbasedon0\snext0 heading 1;}
{\s2\sb240\sa60\keepn \b\i\f0\lang1031 \sbasedon0\snext0 heading 2;}
{\*\cs10 \additive Default Paragraph Font;}
{\s15\fi-200\li200\tqr\tx4176 \f0\fs18\lang1031 \sbasedon0\snext0 index 1;}
{\s16\fi-200\li400\tqr\tx4176 \f0\fs18\lang1031 \sbasedon0\snext0 index 2;}
{\s24\sb360\sa240\brdrt\brdrth\brdrw15 \b\i\f0\fs26\lang1031 \sbasedon0\snext15 index heading;}
{\s25\sb360\tqr\tx9072 \b\caps\f0\lang1031 \sbasedon0\snext0 toc 1;}
{\s26\li200\sb240\tqr\tx9072 \b\f0\fs20\lang1031 \sbasedon0\snext0 toc 2;}
}\ftnbj{${\footnote\plain{$}{C
lass overview}}} 
{#{\footnote\plain{#}{.bvhw1}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 Class Overview\par
\pard\s0\ql\sb240\sa120\tx2270 \f1\cf1\fs26\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb120\tx2270 \f3\cf3\fs24\b\i0\ul0 Classes\par
\pard\s0\ql\sb40\li2840\fi-2820\tx2690 \f2\cf2\fs20\b0\i0 ODABAServer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 ODABA Serve
r\par
\f2\cf2\fs20\b0\i0 ODABAClient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 ODABA client\par
\f2\cf2\fs20\b0\i0 DictionaryHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Dictionary Handle\par
\f2\cf2\fs20\b0\i0 DBO
bjectHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database Object handle\par
\f2\cf2\fs20\b0\i0 DatabaseHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database Hand
le\par
\f2\cf2\fs20\b0\i0 PropertyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Property Handle\par
\f2\cf2\fs20\b0\i0 OperationHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Opreartion Han
dle\par
\f2\cf2\fs20\b0\i0 QueryHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database Query Handle\par
\f2\cf2\fs20\b0\i0 Instance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance Handle\par
\f2\cf2\fs20\b0\i0 Ke
y\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Key Handle\par
\pard\s0\ql\sb40\li2840\fi-2820\tx2690 \f2\cf2\fs20\b0\i0 EventHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Event Handler Class\par
\f2\cf2\fs20\b0\i0 EventLink\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Event L
ink\par
\f2\cf2\fs20\b0\i0 PIStack\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Property handle stack\par
\f2\cf2\fs20\b0\i0 ExecExchange\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Data Exchange\par
\f2\cf2\fs20\b0\i0 Data
SourceHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Data source\par
\f2\cf2\fs20\b0\i0 UtilityHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2690 \f1\cf1\fs26\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb120\tx2690 \f3\cf3\fs24\b\i0\ul0 Classes\par
\pard\s0\ql\sb40\li2840\fi-2820\tx2690 \f2\cf2\fs20\b0\i0 DBStructDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Defi
nition for the internal presentation of data structures and enum
erations\par
\f2\cf2\fs20\b0\i0 DBFieldDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Definition for the internal presentation of 
property data\par
\pard\s0\ql\sb240\sa120\tx2690 \f1\cf1\fs26\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb120\tx2690 \f3\cf3\fs24\b\i0\ul0 Classes\par
\pard\s0\ql\sb40\li2840\fi-2820\tx2690 \f2\cf2\fs20\b0\i0 CTX_Base\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 General Context Class\par
\f2\cf2\fs20\b0\i0 CTX_DBBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 B
ase class for data base contexts\par
\f2\cf2\fs20\b0\i0 CTX_DataBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database Context\par
\f2\cf2\fs20\b0\i0 CT
X_Object\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database Object Context\par
\f2\cf2\fs20\b0\i0 CTX_Structure\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Structure Contex
t\par
\f2\cf2\fs20\b0\i0 CTX_Property\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Property contexts\par
\pard\s0\ql\sb240\sa120\tx2690 \f1\cf1\fs26\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb120\tx2690 \f3\cf3\fs24\b\i0\ul0 Classes\par
\pard\s0\ql\sb40\li2840\fi-2820\tx2690 \f2\cf2\fs20\b0\i0 Error\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 General Error obje
ct\par
\f2\cf2\fs20\b0\i0 DBErrorHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database Error Handle\par
\f2\cf2\fs20\b0\i0 dbdt\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 dbtm\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 dttm\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 smcb\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 fm
cb\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2690 \f1\cf1\fs26\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb120\tx2690 \f3\cf3\fs24\b\i0\ul0 Classes\par
\pard\s0\ql\sb40\li2840\fi-2820\tx2690 \f2\cf2\fs20\b0\i0 SDB_Attribute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Extend\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_GenType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Index\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SD
B_Key\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_KeyComponent\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Member\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_ODABA_Str\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Property
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Reference\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Relationship\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Structure\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_Type\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2690 \f1\cf1\fs26\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb120\tx2690 \f3\cf3\fs24\b\i0\ul0 Clas
ses\par
\pard\s0\ql\sb40\li2840\fi-2820\tx2690 \f2\cf2\fs20\b0\i0 PIREPL\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Replace options\par
\f2\cf2\fs20\b0\i0 SDB_AT\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SDB_RLEV\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 TYP_TYPES\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ActionTyp
e\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Action Types\par
\pard\s0\ql\sb60\tx2690 \f5\cf5\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f5\cf5\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2690 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Action Types}}} 
{#{\footnote\plain{#}{.bvhos}}} 
{K{\footnote\plain{K}{ActionType}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 ActionType\tab -  Action T
ypes\par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Action types allow defining different types of actions that 
can be called for reacting on events. Some of the action types r
equire special runtime environments (e.g. the Window Action that
 requires an GUI application and will not run in a console appli
cation). Eac action can be defined by an action specific resourc
e object in a resource database, when running a database applica
tion. Otherwise the application must provide the required run-ti
me information for the action.\par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 ACT_undefined\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Action type u
ndefined\par
\f2\cf2\fs20\b0\i0 ACT_Constant\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constant action\par
\f2\cf2\fs20\b0\i0 ACT_Document\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Document acti
on\par
\f2\cf2\fs20\b0\i0 ACT_Expression\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Expression action\par
\f2\cf2\fs20\b0\i0 ACT_Function\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Function Action
\par
\f2\cf2\fs20\b0\i0 ACT_Jump\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Jump Action\par
\f2\cf2\fs20\b0\i0 ACT_ParmAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Parameter action\par
\f2\cf2\fs20\b0\i0 ACT_Program
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Program Action\par
\f2\cf2\fs20\b0\i0 ACT_Menu\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Menu Action\par
\f2\cf2\fs20\b0\i0 ACT_Window\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Window Action\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 AC
T_Extended\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f5\cf5\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{BNF data element}}} 
{#{\footnote\plain{#}{.bvhpw}}} 
{K{\footnote\plain{K}{BNFData}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFData\tab -  BNF data elem
ent\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A BNF data element contains the data for a given symbol in an
 BNF expression. BNF data elements form a hierarchie down to sym
bols, which have been defined as relevant symbols.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 symb
ol\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 BNF Symbol\f2\cf2\fs20\b0\i0\ul0 \par
value\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 String value\f2\cf2\fs20\b0\i0\ul0 \par
value_len\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Length for value\f2\cf2\fs20\b0\i0\ul0 \par
elem
ents\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Sub-data elements\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 BNFData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 CreateParser
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create ad-hoc parser\par
\f2\cf2\fs20\b0\i0 GenerateSource\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Generate source file for a
 parser\par
\f2\cf2\fs20\b0\i0 GetElement\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Element\par
\f2\cf2\fs20\b0\i0 GetSymbol\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Looks for expression a 
given symbol (recursive)\par
\f2\cf2\fs20\b0\i0 GetValue\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provides the element value as 
string\par
\f2\cf2\fs20\b0\i0 GetValueLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get value length\par
\f2\cf2\fs20\b0\i0 HasData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Has node data\par
\f2\cf2\fs20\b0\i0 IsA\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Is expression a given symbol\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 IsValue\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Has expressio a given valu
e\par
\f2\cf2\fs20\b0\i0 Position\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Current position in string\par
\f2\cf2\fs20\b0\i0 Print\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Print syntax tree\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Con
structor}}} 
{#{\footnote\plain{#}{.bvhpy}}} 
{K{\footnote\plain{K}{BNFData:BNFData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFData\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0               
           BNFData (BNFSymbol *bsymbol, char *string, int32 stri
ng_len );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          BNFData (BNFData *bparent );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0   
                       BNFData (const BNFData &bdata_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bsymbol\tab - BNF Symbol\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to a BNF symbol.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  BNFSymbol\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-ter
minated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string_len\tab - String length\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The string length d
efines the maximum number of characters that can be stored in th
e string area without counting the terminating 0. Usually this v
alue is 1 less that the allocated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bparent\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bdata_ref
\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create ad-hoc parser}}} 
{#{\footnote\plain{#}{.bvhqv}}} 
{K{\footnote\plain{K}{BNFData:CreateParser}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CreateParser\tab -  C
reate ad-hoc parser\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  BNFParser *CreateParser (BNFParser *bs_paren
t=NULL, logical list_symbols=NO, char *trace_path=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fun
ction create an ad-hoc parser for the  BNF described by the BNFD
ata tree. The BNFData tree can be constructed from a BNF definit
ion file or string using the BNF meta parser (BNFDefinition).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The
 function returns a pointer to the parser, which allows analysin
g syntax aexpressions according to the defined BNF. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Since the fu
nction is optimizing the priority for the parser symbols, one ma
y list the priority list for the symbols, beginning with the sym
bol of highest priority. When sub-parsers are referenced, the sy
mbols for sub-parsers are listed as well. Symbols with higher pr
iority are analized before symbols of lower priority. This solve
s some of ambiguity problems, which result from the fact, that t
he same symbol can be used as starting symbol in different produ
ction rules.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bs_parent\tab - Parent parser\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This
 is a pointer to the parent BNFParser object.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defi
nition for:  BNFParser\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 list_symbols\tab - List symbols\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this option
 is set to YES, the list of symbols is listed on console.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 trace_p
ath\tab - Trace file location\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The location point to a file that contai
ns all attempts for locating symbols in an expression. It record
s the symbol names and the symbol data.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Generate source file for 
a parser}}} 
{#{\footnote\plain{#}{C_dn.1b}}} 
{K{\footnote\plain{K}{BNFData:GenerateSource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GenerateSource\tab -  Generate s
ource file for a parser\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical GenerateSource (char *cpath );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function generates a source file that creates a parser for the
 BNF described by the BNFData tree. The BNFData tree can be cons
tructed from a BNF definition file or string using the BNF meta 
parser (BNFDefinition).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameter
s\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpath\tab - Complete path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete path is passed as 0-terminated
 string with a maximum length of 255 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get Element}}} 
{#{\footnote\plain{#}{.bvhs
v}}} 
{K{\footnote\plain{K}{BNFData:GetElement}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetElement\tab -  Get Element\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  BNFData *GetElement 
(int index0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  BNFData *GetElement (char *symbol );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
searches for an element in the BNFData tree. When terminating su
ccessfullly it retuns the BNFData object for the node foung, oth
erwise NULL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 index0\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 symbol\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Looks for ex
pression a given symbol (recursive)}}} 
{#{\footnote\plain{#}{.bvhsy}}} 
{K{\footnote\plain{K}{BNFData:GetSymbol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSym
bol\tab -  Looks for expression a given symbol (recursive)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  BNFData *G
etSymbol (char *symbol );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the expression for
 the symbol when the sub-expression defined in the BNFData objec
t corresponds to a symbol with the name passed in 'symbol' or no
t. The function searches recursively in subordinated symbols. Se
archung stops, when a sub-expression has more than one elemenmt.
\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 symbol\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provides the element value as st
ring}}} 
{#{\footnote\plain{#}{.bvhu1}}} 
{K{\footnote\plain{K}{BNFData:GetValue}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetValue\tab -  Provides the element value 
as string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetValue (char *string, int32 maxlen );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion returns the element value as string, when the element contai
ns data. Otherwise the function returns NULL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.
\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 maxlen\tab - Size of output buffer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Specifies the length of the buffer,
 the information should be stored into. The information is trunc
ated if it is longer than the buffer.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get value length}}} 
{#{\footnote\plain{#}{.bvhts}}} 
{K{\footnote\plain{K}{BNFDa
ta:GetValueLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetValueLength\tab -  Get value length\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetValu
eLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the value length for the data a
rea of the symbol.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Has node data}}} 
{#{\footnote\plain{#}{.bvhtt}}} 
{K{\footnote\plain{K}{BNFData:HasDa
ta}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HasData\tab -  Has node data\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical HasData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retur
ns, whether a BNFData node contains data or not.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Re
turn value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answere
d positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is expression a given symbo
l}}} 
{#{\footnote\plain{#}{.bvhty}}} 
{K{\footnote\plain{K}{BNFData:IsA}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsA\tab -  Is expression a given symbol\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsA
 (char *symbol );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns, whether the sub-expressio
n defined in the BNFData object exactly corresponds to a symbol 
with the name passed in 'symbol' or not.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return val
ue\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered positi
vly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 symbol\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Has expressio a g
iven value}}} 
{#{\footnote\plain{#}{con8q1a_u}}} 
{K{\footnote\plain{K}{BNFData:IsValue}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsValue\tab -  Has expressio a give
n value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsValue (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns, wh
ether the sub-expression defined in the BNFData object has the v
alue passed in 'string' or not.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The fun
ction returns YES when the question was answered positivly. Othe
rwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 
0-terminated string area.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Current position in string}}} 
{#{\footnote\plain{#}{.bvhut}}} 
{K{\footnote\plain{K}{BNFData
:Position}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Position\tab -  Current position in string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *Position ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string ar
ea.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Print syntax tree}}} 
{#{\footnote\plain{#}{.bvhuu}}} 
{K{\footnote\plain{K}{BNFData:Print}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Print\tab -  Print syntax tree
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Print (logical recursive=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Print (char *pa
th, logical recursive=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Print (FILE *fileptr, logic
al recursive=YES, logical erropt=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will print th
e syntax tree to console.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value
 is YES if the function returns an error. In case of normal term
ination the value is NO. When the function returns YES more deta
iled error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Paramet
ers\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 recursive\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 path\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fileptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 erropt\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{BNF Symbol}}} 
{#{\footnote\plain{#}{C_dn35b}}} 
{K{\footnote\plain{K}{BNFData:sy
mbol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 symbol\tab -  BNF Symbol\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Symbol that describes the string in the v
alue.\par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  BNFSymbol\strike0\ul0 \par\pard\par
{${\footnote\plain{$}{String value}}} 
{#{\footnote\plain{#}{Ind2.v
mka}}} 
{K{\footnote\plain{K}{BNFData:value}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 value\tab -  String value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Strin value for the symbol. 
The value is NOT 0-terminated.\par
\par\pard\par
{${\footnote\plain{$}{Length for value}}} 
{#{\footnote\plain{#}{Ind2.vmk8}}} 
{K{\footnote\plain{K}{BNFData:v
alue_len}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 value_len\tab -  Length for value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sub-data elements}}} 
{#{\footnote\plain{#}{Ind2.vmk9}}} 
{K{\footnote\plain{K}{BN
FData:elements}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 elements\tab -  Sub-data elements\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 This is a list of dire
ctly subordinated data elements.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  
BNFData\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{BNF expression}}} 
{#{\footnote\plain{#}{Ind2.vmk_}}} 
{K{\footnote\plain{K}{BNFExpression}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFExpression\tab -  BNF e
xpression\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A BNF expression defines a BNF symbol. A BNF Symbol mig
ht be defined by more than one expression. A BNF expression may 
consist of one or more BNF elements with a defined order.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Propert
ies\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 elements\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Elements for the BNF expression\f2\cf2\fs20\b0\i0\ul0 \par
symbol\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 BNF symbol\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Fu
nctions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 AddElement\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Add element to expression.\par
\f2\cf2\fs20\b0\i0 Analyze\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Analyse ex
pression\par
\f2\cf2\fs20\b0\i0 NextExpressions\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Add element to expression.}}} 
{#{\footnote\plain{#}{con8q186s}}} 
{K{\footnote\plain{K}{BNFE
xpression:AddElement}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 AddElement\tab -  Add element to expression.\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int3
2 AddElement (BNFSymbol *bsymbol, logical is_optional, int32 rep
_count, logical case_opt, logical sep_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Valida
tion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The validation code has the following values:\par
  0 - matc
hes symbol exactly\par
  1 - matches symbol but contains additional s
paces\par
  2 - matches symbol including separating space, but contai
ns more information\par
  3 - matches symbol but contains further dat
a without separating blank\par
  4 - does not match symbol\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 b
symbol\tab - BNF Symbol\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to a BNF symbol.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  BNFSymbol\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 is_optional\tab - Is value optional\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 YES (or true) f
or this value indicates, that the item is optional.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rep_count\tab - Re
petition count\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Number of repetitions for the item.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 case_opt\tab - Case 
sensitive\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates case sensitive data in text (YES)\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 s
ep_opt\tab - Separator option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this option is set to YES (true) a 
separator will be inserted between two items.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Analyse expression}}} 
{#{\footnote\plain{#}{c
on8q186t}}} 
{K{\footnote\plain{K}{BNFExpression:Analyze}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Analyze\tab -  Analyse expression\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 
Analyze (BNFExpression **bexpressions, BNFData *bdata, int index
0, logical case_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Validation code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The validatio
n code has the following values:\par
  0 - matches symbol exactly\par
  1 
- matches symbol but contains additional spaces\par
  2 - matches sym
bol including separating space, but contains more information\par
  3
 - matches symbol but contains further data without separating b
lank\par
  4 - does not match symbol\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bexpressions\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bdata\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 in
dex0\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 case_opt\tab - Case sensitive\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates case sensitiv
e data in text (YES)\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vml8}}} 
{K{\footnote\plain{K}{BNFExpression:NextExpressions}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 NextEx
pressions\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 NextExpressions (BNFSymbol *target_symbol, BN
FExpression **bexpressions, BNFData *bdata, int index0, logical 
case_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Number of entries\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 target_symbo
l\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bexpressions\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bdata\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 index0\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 case_opt\tab - Case sensitive\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The opti
on indicates case sensitive data in text (YES)\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Elements for the B
NF expression}}} 
{#{\footnote\plain{#}{Ind2.vml.}}} 
{K{\footnote\plain{K}{BNFExpression:elements}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 elements\tab -  Elements 
for the BNF expression\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 This is a list of elements the BNF express
ion consists of.\par
\par\pard\par
{${\footnote\plain{$}{BNF symbol}}} 
{#{\footnote\plain{#}{Ind2.vml_}}} 
{K{\footnote\plain{K}{BNFExpression:symbol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 symbol\tab -  
BNF symbol\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 This is the BNF symbol defined by the expression.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See a
lso class definition for:  BNFSymbol\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Parser for BNF strings}}} 
{#{\footnote\plain{#}{con8q1
87t}}} 
{K{\footnote\plain{K}{BNFParser}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFParser\tab -  Parser for BNF strings\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A string according
 to a given BNF syntax is based on a (top) BNF symbol. You may d
erive a specific BNF parsers for each type of BNF you want to su
pport. The BNF is defined in the constructor for the BNF parser.
 Any number of spaces is allowed between symbols in a BNF but no
t required. Spaces are usually considered as separators between 
symbols. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 BNF parsers can be referenced as symbols in other BNF s
ymbols. This allows defining common BNF symbols e.g. for name an
d number (as BNFStandardSymbold). You may create a hierarchy con
sisting of a BNF tree by passing the parent (the more complex de
finition) to the referenced BNF or by constructing objects for r
eferenced BNF parsers.\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 BNFSymbol\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Symbol for the B
NF string\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 tokens\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Tokens defined for the symbol\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Function
s\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Analyze\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Analyse string\par
\f2\cf2\fs20\b0\i0 AnalyzeFile\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Analyse BNF definition prov
ided in a file\par
\f2\cf2\fs20\b0\i0 BNFParser\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 GetLastError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Return last pa
rser error\par
\f2\cf2\fs20\b0\i0 IsValidString\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Checks, whether the symbol passed is va
lid\par
\f2\cf2\fs20\b0\i0 ListSymbols\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 List symbols for the parser\par
\f2\cf2\fs20\b0\i0 ResetLastError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset
 last parser Error\par
\f2\cf2\fs20\b0\i0 ~BNFParser\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Analyse string}}} 
{#{\footnote\plain{#}{Ind2.vmma}}} 
{K{\footnote\plain{K}{B
NFParser:Analyze}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Analyze\tab -  Analyse string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  BNFData *Analyze (char 
*string, logical skip_sep );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  BNFData *Analyze (char *string, cha
r *symbol, logical skip_sep );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function analyses the string a
nd creates a hierarchy of BNF data elements. Each BNF data eleme
nt refers to the string, that describes the data element and to 
the symbol or token defined for the data element.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function wi
ll parse the string according to the syntax defined in the BNF (
top-aymbol) or according to a given symbol of the syntax.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated 
string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 skip_sep\tab - Skip separators\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates that s
eparators (blanks, tabs and new line characters) at the beginnin
g of the expression should be ignored. \par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 symbol\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Analy
se BNF definition provided in a file}}} 
{#{\footnote\plain{#}{Ind2.vmm8}}} 
{K{\footnote\plain{K}{BNFParser:AnalyzeFi
le}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 AnalyzeFile\tab -  Analyse BNF definition provided in a file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  BNFDat
a *AnalyzeFile (char *path, logical skip_sep );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  BNFData *Analyze
File (char *path, char *symbol, logical skip_sep );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
analyses BNF definitions provided in the file passed to the func
tion (path) and creates a hierarchy of BNF data elements. Each B
NF data element refers to the string, that describes the data el
ement and to the symbol or token defined for the data element.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 path\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 skip_sep\tab - Skip separators\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option 
indicates that separators (blanks, tabs and new line characters)
 at the beginning of the expression should be ignored. \par
Default: 
YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 symbol\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{Ind2.vmm0}}} 
{K{\footnote\plain{K}{BNFParser:BNFParser}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFParser\tab -  Co
nstructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          BNFParser (char *names, BNFPar
ser *bs_parent=NULL, logical skip_new_line=YES, logical term_opt
=NO, char *trace_path=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The constructor allows constructing
 a top-parser as well as a referenced parser. When constructing 
a referenced parser, you must pass the poiter to the top parser 
as 'bs_parent'.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 names\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bs_parent\tab - Parent parser\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is 
a pointer to the parent BNFParser object.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definiti
on for:  BNFParser\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 skip_new_line\tab - New line as separator\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This optio
n is set to true (YES), when new line characters (10,13) should 
be considered as separators (like blank and tab). In this case n
ew line characters should not be used as BNF symbols.\par
Default: YE
S\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 term_opt\tab - Terminate symbol\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option indicates, thet the symbo
l is a terminal symbol, i.e. subordinated noodes need not to be 
displayed in the syntax tree.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 trace_path\tab - Trace file location\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
location point to a file that contains all attempts for locating
 symbols in an expression. It records the symbol names and the s
ymbol data.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Return last parser error}}} 
{#{\footnote\plain{#}{con8q188t}}} 
{K{\footnote\plain{K}{BNFParser:GetLastErr
or}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetLastError\tab -  Return last parser error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetLastError ( )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns an error string for the last parser error.
 This information is overwritten when calling the Analyse functi
on for the nect expression. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns NULL, when no e
rror has been set.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-term
inated string area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Checks, whether the symbol passed is valid}}} 
{#{\footnote\plain{#}{Ind
2.vmn9}}} 
{K{\footnote\plain{K}{BNFParser:IsValidString}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsValidString\tab -  Checks, whether the
 symbol passed is valid\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsValidString (char *symbol_name
, char *string, int32 string_len );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 function returns YES when the question was answered positivly. 
Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 symbol_name\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String ar
ea\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string_len\tab - String len
gth\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The string length defines the maximum number of characters th
at can be stored in the string area without counting the termina
ting 0. Usually this value is 1 less that the allocated string a
rea.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{List symbols for the parser}}} 
{#{\footnote\plain{#}{Ind2.vmn0}}} 
{K{\footnote\plain{K}{BNFParser:ListSymbols}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Lis
tSymbols\tab -  List symbols for the parser\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ListSymbols ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he function allows listing the symbols defined for a parser incl
uding symbols referenced from external parsers.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Ter
mination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. 
In case of normal termination the value is NO. When the function
 returns YES more detailed error information are available in th
e error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset last parser Error}}} 
{#{\footnote\plain{#}{Ind2.vmoa}}} 
{K{\footnote\plain{K}{BNFParser:ResetLa
stError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ResetLastError\tab -  Reset last parser Error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void ResetLastEr
ror ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function resets the last parser error after it has b
een displayed or analysed.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{Ind2.vmo.}}} 
{K{\footnote\plain{K}{BNFParser:~BNFParse
r}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~BNFParser\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~BNFParser ( );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Symbol for the BNF string}}} 
{#{\footnote\plain{#}{con8q180s}}} 
{K{\footnote\plain{K}{BNFParser:BNFSymbol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFSymbol\tab - 
 Symbol for the BNF string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  BNFSym
bol\strike0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Tokens defined for the symbol}}} 
{#{\footnote\plain{#}{Ind2.vmo_}}} 
{K{\footnote\plain{K}{BNFParser:tokens}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 tokens\tab -
  Tokens defined for the symbol\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 This is a list of all tokens (ter
minal symbols) defined in the BNF definition.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class defi
nition for:  BNFSymbol\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{BNF symbol}}} 
{#{\footnote\plain{#}{Ind2.vmpa}}} 
{K{\footnote\plain{K}{BNFSymbol}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFSymbol\tab -  BN
F symbol\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A BNF symbol is a variable in a BNF specification, which
 is defined by one or more BNF expressions. Symbols do have a ne
me and may consist of one or more expressions. Terminal symbols 
are tokens with a fixed value, which is stored in the name. Term
inal symbols do not habe expressions.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 name\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Name for sy
mbol\f2\cf2\fs20\b0\i0\ul0 \par
expressions\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Expressions defining the symbol\f2\cf2\fs20\b0\i0\ul0 \par
terminate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Termi
nate symbol analyze\f2\cf2\fs20\b0\i0\ul0 \par
used_in\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 BNF expressions referring to the sym
bol\f2\cf2\fs20\b0\i0\ul0 \par
starting_symbol_in\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 BNF expressions referring to the symbol a
s first element\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 BNFSymbol\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Konstruktor\par
\f2\cf2\fs20\b0\i0 ElementaryToken\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 P
rovide symbol for elementary token\par
\f2\cf2\fs20\b0\i0 SetTerminal\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Mark symbol as te
rminal symbol\par
\f2\cf2\fs20\b0\i0 ~BNFSymbol\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destruktor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Konstruktor}}} 
{#{\footnote\plain{#}{cngfi5iv}}} 
{K{\footnote\plain{K}{BNFSymbol:
BNFSymbol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BNFSymbol\tab -  Konstruktor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          BNFSymb
ol (BNFParser *bparser, char *names, logical term_opt=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0      
                    BNFSymbol ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bparser\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 names\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 term
_opt\tab - Terminate symbol\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option indicates, thet the symbol is 
a terminal symbol, i.e. subordinated noodes need not to be displ
ayed in the syntax tree.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide symbol for elementary token}}} 
{#{\footnote\plain{#}{Ind2.
vmp_}}} 
{K{\footnote\plain{K}{BNFSymbol:ElementaryToken}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ElementaryToken\tab -  Provide symbol fo
r elementary token\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  BNFSymbol *ElementaryToken (uint8 ctoken, log
ical case_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function provides the standard symbol for si
ngle characters (elementary tokens.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - BNF Symbol\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Point
er to a BNF symbol.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  BNFSymbol\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Para
meters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ctoken\tab - Elementary token\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Elementary tokens are single chara
cters fro 0-255. Symbols for elementary tokens are generated aut
omatically.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 case_opt\tab - Case sensitive\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates case sen
sitive data in text (YES)\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Mark symbol as terminal symbol}}} 
{#{\footnote\plain{#}{con8q18.s
}}} 
{K{\footnote\plain{K}{BNFSymbol:SetTerminal}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTerminal\tab -  Mark symbol as terminal symbo
l\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetTerminal ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Symbols marked as terminal symbols will n
ot keep children symbols for analysing. Typically, keywords, whi
ch have a child for each character, are marked as terminal symbo
ls.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destruktor}}} 
{#{\footnote\plain{#}{Ind2.vmra}}} 
{K{\footnote\plain{K}{BNFSymbol:~BNFSymbol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~BNFSymbol\tab -  Destrukto
r\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~BNFSymbol ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Name for symbol}}} 
{#{\footnote\plain{#}{Ind2.vmr
8}}} 
{K{\footnote\plain{K}{BNFSymbol:name}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 name\tab -  Name for symbol\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The name of the symbol is t
he name defined in the BNF or the value for terminal symbols.\par
\par\pard\par
{${\footnote\plain{$}{Exp
ressions defining the symbol}}} 
{#{\footnote\plain{#}{Ind2.vmr9}}} 
{K{\footnote\plain{K}{BNFSymbol:expressions}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 expres
sions\tab -  Expressions defining the symbol\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A symbol is defined by on
e or more BNF expressions.\par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  BNFExp
ression\strike0\ul0 \par\pard\par
{${\footnote\plain{$}{Terminate symbol analyze}}} 
{#{\footnote\plain{#}{Ind2.vmr0}}} 
{K{\footnote\plain{K}{BNFSymbol:terminate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 termi
nate\tab -  Terminate symbol analyze\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Setting this option to NO will st
op creating data elements for subordinated symbols.\par
\par\pard\par
{${\footnote\plain{$}{BNF expressio
ns referring to the symbol}}} 
{#{\footnote\plain{#}{con8q18_p}}} 
{K{\footnote\plain{K}{BNFSymbol:used_in}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 used_in\tab -  BN
F expressions referring to the symbol\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  BNFExpression\strike0\ul0 \par\pard\par
{${\footnote\plain{$}{BNF expressions referring to the symbol as fir
st element}}} 
{#{\footnote\plain{#}{Ind2.vmr.}}} 
{K{\footnote\plain{K}{BNFSymbol:starting_symbol_in}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 starting_symbol_i
n\tab -  BNF expressions referring to the symbol as first element\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  BNFExpression\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{cngfi5lz}}} 
{K{\footnote\plain{K}{CAU_Action}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_A
ction\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CAU_simpleAction\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 structure\strike0\ul0 \tab - \par
pr
operty\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 pre_handler\strike0\ul0 \tab - \par
post_handler\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 reactions_act\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.
vnt9}}} 
{K{\footnote\plain{K}{CAU_Action:CAU_simpleAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_simpleAction\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnta}}} 
{K{\footnote\plain{K}{CAU_A
ction:structure}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 structure\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnt8}}} 
{K{\footnote\plain{K}{CAU_Action:property}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 property\tab -
  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnt0}}} 
{K{\footnote\plain{K}{CAU_Action:pre_handler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 pre_handler\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{cngfi6mv}}} 
{K{\footnote\plain{K}{CAU_Actio
n:post_handler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 post_handler\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnt.}}} 
{K{\footnote\plain{K}{CAU_Action:reactions_act}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 re
actions_act\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{cngfi6my}}} 
{K{\footnote\plain{K}{CAU_Causality}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_Causality\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 act
ions\strike0\ul0 \tab - \par
event\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnk8}}} 
{K{\footnote\plain{K}{CAU_Causality:actions}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 actions\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{In
d2.vnk9}}} 
{K{\footnote\plain{K}{CAU_Causality:event}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 event\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnk0}}} 
{K{\footnote\plain{K}{CAU_Delay_Types}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_De
lay_Types\tab -  \par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 RDT_undefined\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RDT_immediately\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RDT_end_of_TA\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RDT_top_of_TA\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q196t}}} 
{K{\footnote\plain{K}{CAU_Event}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_Event\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 sys_iden
t\strike0\ul0 \tab - \par
pre_condition\strike0\ul0 \tab - \par
post_condition\strike0\ul0 \tab - \par
generate\strike0\ul0 \tab - \par
int_event\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 reactions
_evt\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q196u}}} 
{K{\footnote\plain{K}{CAU_Event:sys_ident}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sys_ident\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnla
}}} 
{K{\footnote\plain{K}{CAU_Event:pre_condition}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 pre_condition\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnl8}}} 
{K{\footnote\plain{K}{CAU_Event:post_c
ondition}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 post_condition\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnl9}}} 
{K{\footnote\plain{K}{CAU_Event:generate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 generate\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{I
nd2.vnl0}}} 
{K{\footnote\plain{K}{CAU_Event:int_event}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 int_event\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q197p}}} 
{K{\footnote\plain{K}{CAU_Event:reacti
ons_evt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 reactions_evt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnl.}}} 
{K{\footnote\plain{K}{CAU_RCT_Path}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_RCT_Path\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Prope
rties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 struct_event\strike0\ul0 \tab - \par
inactive\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 property_path\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnl_}}} 
{K{\footnote\plain{K}{CA
U_RCT_Path:struct_event}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 struct_event\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q197s}}} 
{K{\footnote\plain{K}{CAU_RCT_Path:inac
tive}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 inactive\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q197t}}} 
{K{\footnote\plain{K}{CAU_RCT_Path:property_path}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 property_path\tab -
  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q197u}}} 
{K{\footnote\plain{K}{CAU_RCT_PathComp}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_RCT_PathComp\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 prop_nam
e\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnma}}} 
{K{\footnote\plain{K}{CAU_RCT_PathComp:prop_name}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 prop_name\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.
vnm8}}} 
{K{\footnote\plain{K}{CAU_RCT_Types}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_RCT_Types\tab -  \par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 RCT_undefined\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RCT_Self\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RCT_Path\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RCT_Up\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RCT_DataBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RCT_Global\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q198t}}} 
{K{\footnote\plain{K}{CAU_Reactio
n}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_Reaction\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 __AUTOIDENT\strike0\ul0 \tab - \par
rct_path\strike0\ul0 \tab - \par
rct_type\strike0\ul0 \tab - \par
delay
\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 db_event\strike0\ul0 \tab - \par
db_action\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 set__AUTOIDENT\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q198u}}} 
{K{\footnote\plain{K}{CAU_Rea
ction:set__AUTOIDENT}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 set__AUTOIDENT\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 autoident\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.v
nna}}} 
{K{\footnote\plain{K}{CAU_Reaction:__AUTOIDENT}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 __AUTOIDENT\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnn8}}} 
{K{\footnote\plain{K}{CAU_Reaction:r
ct_path}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 rct_path\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnn9}}} 
{K{\footnote\plain{K}{CAU_Reaction:rct_type}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 rct_type\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.
vnn0}}} 
{K{\footnote\plain{K}{CAU_Reaction:delay}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 delay\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q199p}}} 
{K{\footnote\plain{K}{CAU_Reaction:db_event}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 db_e
vent\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vnn.}}} 
{K{\footnote\plain{K}{CAU_Reaction:db_action}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 db_action\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q199t}}} 
{K{\footnote\plain{K}{CAU_s
impleAction}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_simpleAction\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 sys_ident\strike0\ul0 \tab - \par
action_type\strike0\ul0 \tab - 
\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vno8}}} 
{K{\footnote\plain{K}{CAU_simpleAction:sys_ident}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sys_ident\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.vno
9}}} 
{K{\footnote\plain{K}{CAU_simpleAction:action_type}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 action_type\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{General Context Class
}}} 
{#{\footnote\plain{#}{Ind2.vns8}}} 
{K{\footnote\plain{K}{CTX_Base}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_Base\tab -  General Context Class\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The general con
text class is a base class for all database or GUI context class
es. A context usually defines a data element or a data collectio
n in its specific context, e.g. children in the context of a per
son or in a list in a GUI application. In a context the behaviou
r of object becomes more specific, which can be expressed in a c
ontext class. Context classes have to be defined in a specified 
form according to the type of context to be implemented. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Context
s in an application form a hierarchy, i.e. each context object h
as either a parent (upper) context or is a top context (e.g. dat
abase or project context). \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Each context has two status propertie
s which reflect the current state of the context. Since context 
classes area created and deleted by the system the current state
 of a context class (as opened or closed) is not always clear fo
r the application programmer. The process state (-> CTX_ProcessS
tate) describes the the current state in the processing. The dis
play state (-> CTX_DisplayState) describes the visibility of the
 context. For GUI context classes this is the way the associated
 GUI element is presented at the moment on the user interface. S
tate properties are maintained by the system but can be retrieve
d by the application. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Moreover, the context class provides three
 user states that can be updated and retrieved by the applicatio
n. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Context classes signal several events that are relevent for t
he specific context. Thus, context classes are typically used fo
r handling system events as delete or inserted for database inst
ances or lose/get focus for GUI contexts. The enumeration of eve
nts supported by a context class is defined in the cpecific cont
ext class implementation. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The context class supports the action 
interface, which enables functions in context classes calling ac
tions defined in a reasource database or created internally. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Bas
e Structures\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 high_ctx\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Parent context\f2\cf2\fs20\b0\i0\ul0 \par
user_states\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 User 
States\f2\cf2\fs20\b0\i0\ul0 \par
intern_states\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 System states\f2\cf2\fs20\b0\i0\ul0 \par
action_rc\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Last action return 
code\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CTX_Base\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Konstructor\par
\f2\cf2\fs20\b0\i0 CheckPermission\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check Permiss
ion\par
\f2\cf2\fs20\b0\i0 Close\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close Handler\par
\f2\cf2\fs20\b0\i0 CreateAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create action from action r
esource\par
\f2\cf2\fs20\b0\i0 CreateCAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create complex action\par
\f2\cf2\fs20\b0\i0 DataState\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get data s
tate\par
\f2\cf2\fs20\b0\i0 DeleteData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Delete data handler\par
\f2\cf2\fs20\b0\i0 Disable\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 DisplayDecision\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Dis
play decision\par
\f2\cf2\fs20\b0\i0 DisplayMessage\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Display message\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DisplayState\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get di
splay state\par
\f2\cf2\fs20\b0\i0 Enable\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ExecuteAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute action\par
\f2\cf2\fs20\b0\i0 ExecuteFunction\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Execute function\par
\f2\cf2\fs20\b0\i0 ExecuteProgram\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute program\par
\f2\cf2\fs20\b0\i0 FillData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Fill d
ata handler\par
\f2\cf2\fs20\b0\i0 GetActionResult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get last action result\par
\f2\cf2\fs20\b0\i0 GetContextType
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get context type\par
\f2\cf2\fs20\b0\i0 GetDecision\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get decision\par
\f2\cf2\fs20\b0\i0 GetMessageString\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get
 message string\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetPropertyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Property handle\par
\f2\cf2\fs20\b0\i0 GetResource
Name\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get resource name\par
\f2\cf2\fs20\b0\i0 HighContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get parent context\par
\f2\cf2\fs20\b0\i0 InitData\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Init data handler\par
\f2\cf2\fs20\b0\i0 InsertData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Insert data handler\par
\f2\cf2\fs20\b0\i0 IsEdit\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Can data
 be updated\par
\f2\cf2\fs20\b0\i0 IsEnabled\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 NextData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Next data handler\par
\f2\cf2\fs20\b0\i0 Open\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open cont
ext\par
\f2\cf2\fs20\b0\i0 Parm\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provides parameter\par
\f2\cf2\fs20\b0\i0 PreviousData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Previous data handler\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Pr
ocessState\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get process state\par
\f2\cf2\fs20\b0\i0 ResetData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset data handler\par
\f2\cf2\fs20\b0\i0 SaveDa
ta\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Save data handler\par
\f2\cf2\fs20\b0\i0 SelectData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Select data handler\par
\f2\cf2\fs20\b0\i0 SetActionRes
ult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set action result\par
\f2\cf2\fs20\b0\i0 SetDataState\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set data state\par
\f2\cf2\fs20\b0\i0 SetDisplayStat
e\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set display state\par
\f2\cf2\fs20\b0\i0 SetParm\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set Parameters for context action\par
\f2\cf2\fs20\b0\i0 Se
tUserState1\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set first user state\par
\f2\cf2\fs20\b0\i0 SetUserState2\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set second user 
state\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetUserState3\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set third user state\par
\f2\cf2\fs20\b0\i0 SetupParm\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Setup paramet
er list options\par
\f2\cf2\fs20\b0\i0 StoreData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Store data handler\par
\f2\cf2\fs20\b0\i0 UserState1\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get firs
t user state\par
\f2\cf2\fs20\b0\i0 UserState2\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get second user state\par
\f2\cf2\fs20\b0\i0 UserState3\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get thi
rd user state\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Konstructor}}} 
{#{\footnote\plain{#}{Ind2.vns9}}} 
{K{\footnote\plain{K}{CTX_Base:CTX_Base}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_Base\tab -  Kon
structor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          CTX_Base ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The constructor fo
r a general context class should never be called explicitly, but
 only by a specialized class.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check Permission}}} 
{#{\footnote\plain{#}{Ind2.vns0}}} 
{K{\footnote\plain{K}{CTX_Base:C
heckPermission}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CheckPermission\tab -  Check Permission\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical 
CheckPermission (UCA_Action *actptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whethe
r the user/application has permission for running the action pas
sed to the function. The function returns true (YES) when the ap
plication has permissions for calling the action. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Permissions ar
e defined in the project or database context and must be initial
ized when permission check is to be supported.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Cont
inuation\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this value is true the function will continue, othe
rwise the processing terminates.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 actptr\tab - Action pointer
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The pointer refers to an internal action that has been implicite
ly defined or created from a resource.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Close Handler}}} 
{#{\footnote\plain{#}{cngfi6lv}}} 
{K{\footnote\plain{K}{CTX_B
ase:Close}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Close\tab -  Close Handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical Close ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The func
tion is called when the context is going to be closed. The handl
er can be overloaded in the specific context to perform necessar
y actions before deleting the context. In this phase all resourc
es of the context are still accessible.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination
 code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case 
of normal termination the value is NO. When the function returns
 YES more detailed error information are available in the error 
object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Create action from action resource}}} 
{#{\footnote\plain{#}{Ind2.vns.}}} 
{K{\footnote\plain{K}{CTX_Base:Creat
eAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CreateAction\tab -  Create action from action resource\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual 
UCA_Action *CreateAction (SimpleAction *action );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function al
lows creating simple actions from a resource action definition.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Action pointer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The pointer refers to an internal act
ion that has been implicitely defined or created from a resource
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action\tab - Simple Action\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The simple action defines the co
ntext action and the action type. Some action types require more
 detailled action definitions that will be retrieved in the dict
ionary. In this case the dictionary must contain an appropriate 
action definition.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create complex action}}} 
{#{\footnote\plain{#}{Ind2.vns_}}} 
{K{\footnote\plain{K}{CTX_Base:CreateC
Action}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CreateCAction\tab -  Create complex action\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  UCA_CAction *CreateC
Action (SimpleAction *prehandler, SimpleAction *action, SimpleAc
tion *postandler );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a complex action includi
ng pre and post handler for the action.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Complex act
ion pointer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A complex action defines an internal action including
 pre- and post-handler.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prehandler\tab - Pre-handler\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The pre-
handler is passed as simple action containing the action name an
d the action type.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action\tab - Simple Action\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The simple action defines
 the context action and the action type. Some action types requi
re more detailled action definitions that will be retrieved in t
he dictionary. In this case the dictionary must contain an appro
priate action definition.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 postandler\tab - Post-handler\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The post-handle
r is passed as simple action containing the action name and the 
action type.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get data state}}} 
{#{\footnote\plain{#}{cngfi6ly}}} 
{K{\footnote\plain{K}{CTX_Base:DataState}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DataState\tab -  
Get data state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_DataStates DataState ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns
 the current data state for the context.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Delete dat
a handler}}} 
{#{\footnote\plain{#}{cngfi6lz}}} 
{K{\footnote\plain{K}{CTX_Base:DeleteData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DeleteData\tab -  Delete data han
dler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DeleteData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The delete data handler is ca
lled before deleting a data element. The handler can be overload
ed in specialized context class implementations.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The delete handl
er can deny the data deletion by returning YES.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Ter
mination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. 
In case of normal termination the value is NO. When the function
 returns YES more detailed error information are available in th
e error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{C_dn44b}}} 
{K{\footnote\plain{K}{CTX_Base:Disable}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Disable\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Disable ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Display decision}}} 
{#{\footnote\plain{#}{.bvaw1}}} 
{K{\footnote\plain{K}{CTX_Base:DisplayDecision}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisplayDecision\tab -
  Display decision\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual ReplyTypes DisplayDecision (int16 msgn
um, ReplyCombi buttons, ReplyTypes def_dec, char *parm1=NULL, ch
ar *parm2=NULL, char *parm3=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function displays a decis
ion according to the environment (message box for windows applic
ations and command line decision for console applications). The 
message text is defined in the message number that refers to a d
efined message in the resource database. When passing no message
 number or 0 the message is constructed from the parameters pass
ed to the function. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The possible decisions can be defined by mea
ns of pre-defined reply combinations. One of the replys can be d
efined as default reply. The selected reply is returned to the u
pplication that waits until the user has been replied.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Decision\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The decision is returned as reply type that is assoc
iated with the given reply.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 msgnum\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 buttons\tab - Decision c
ombinations\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The decision allows different combinations to be disp
layed in the decision, which ere described as "Reply Combination
s".\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 def_dec\tab - Default reply\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 One of the replys displayed in the deci
sion can be set as default reply.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm1\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm2\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm3\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Display me
ssage}}} 
{#{\footnote\plain{#}{.bvavs}}} 
{K{\footnote\plain{K}{CTX_Base:DisplayMessage}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisplayMessage\tab -  Display messa
ge\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual void DisplayMessage (int16 w_msgnum=0, char *parm1=NUL
L, char *parm2=NULL, char *parm3=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows disp
laying a message for a signaled or passed message code. Dependin
g on the environment the error is written to the console (consol
e applications) or displayed in a message box (GUI application).
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_msgnum\tab - Message code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The message code passed must be 
a defined error code in the reesource database.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm1\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm2\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 par
m3\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get display state}}} 
{#{\footnote\plain{#}{.bvavt}}} 
{K{\footnote\plain{K}{CTX_Base:DisplayState}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisplayState\tab -  G
et display state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_DisplayState DisplayState ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
returns the current display state for the context.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvavu}}} 
{K{\footnote\plain{K}{CTX_Base:Enable}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Enable\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Enable ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Execute action}}} 
{#{\footnote\plain{#}{.bv
avv}}} 
{K{\footnote\plain{K}{CTX_Base:ExecuteAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecuteAction\tab -  Execute action\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual l
ogical ExecuteAction (char *acnames, ActionType actype );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0 virtual
 logical ExecuteAction (InternalEvent eventid );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function all
ows executing an action with the action name and type passed to 
the function or an event. The function returns whether the actio
n could be exuted faormally. The action result can be retrieved 
with the function GetActionResult().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination co
de\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of 
normal termination the value is NO. When the function returns YE
S more detailed error information are available in the error obj
ect.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 acnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 actype\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 eventid\tab - Event identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The even
t identifier is an internal number that is defined for typical e
vents.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Execute function}}} 
{#{\footnote\plain{#}{.bvavw}}} 
{K{\footnote\plain{K}{CTX_Base:ExecuteFunction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecuteFunct
ion\tab -  Execute function\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical ExecuteFunction (char *fna
me, logical chk_opt=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0 virtual logical ExecuteFunction (char *
fname, int16 parmcnt, PropertyHandle **parmlist, PropertyHandle 
&retfld );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function calls a context function that has been de
fined as action (function action).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of no
rmal termination the value is NO. When the function returns YES 
more detailed error information are available in the error objec
t.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fname\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parmcnt\tab - Number of parameters\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The number of pa
rameters must correspond to the numbers of parameters in the sub
sequent parameter list.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parmlist\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retfld\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The return 
value area is passed as property handle.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Execute program}}} 
{#{\footnote\plain{#}{.bvavx}}} 
{K{\footnote\plain{K}{CTX
_Base:ExecuteProgram}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecuteProgram\tab -  Execute program\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Exe
cuteProgram (char *prgnams, char *pgmparm1=NULL, char *pgmparm2=
NULL, char *pgmparm3=NULL, char *pgmparm4=NULL, char *pgmparm5=N
ULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function calls a windows or console program or batch f
ile as passed in the program path. The control is returned to th
e application as soon as the program has been started.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an 
error. In case of normal termination the value is NO. When the f
unction returns YES more detailed error information are availabl
e in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prgnams\tab - Program path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complet
e path for the program to be called is passed as 0-terminated st
ring.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pgmparm1\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pgmparm2\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pgmparm3\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pgmparm4\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pgmparm5\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Fill data
 handler}}} 
{#{\footnote\plain{#}{.bvavy}}} 
{K{\footnote\plain{K}{CTX_Base:FillData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 FillData\tab -  Fill data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtu
al logical FillData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fill data handler is called when a d
ata instance or GUI element has been filled with data. The handl
er can be overloaded in specialized context class implementation
s.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function
 returns an error. In case of normal termination the value is NO
. When the function returns YES more detailed error information 
are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get last action result}}} 
{#{\footnote\plain{#}{.bvams}}} 
{K{\footnote\plain{K}{CT
X_Base:GetActionResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetActionResult\tab -  Get last action result\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  i
nt32 GetActionResult ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The last action result is stored in an 
internal field which allows context functions or complex actions
 reacting on the result returned from the action. Some return va
lues are interpreted when executing complex actions as follows:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Y
ES: action terminated with error\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 NO: Action terminated normally\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 AU
TO: action not executed because pre-handler terminated with erro
r.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get context type}}} 
{#{\footnote\plain{#}{.bvamt}}} 
{K{\footnote\plain{K}{CTX_Base:GetContextType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Get
ContextType\tab -  Get context type\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual CTX_Types GetContextType (
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the context type for the current context
 class as e.g. CTX_Property or CTX_Windoww.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Context
 type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The context type for the context class describes the applic
ation resource reflected by the context.\par
Default: CTXT_undefined\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{G
et decision}}} 
{#{\footnote\plain{#}{.bvamv}}} 
{K{\footnote\plain{K}{CTX_Base:GetDecision}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDecision\tab -  Get decision\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 v
irtual logical GetDecision (int16 msgnum, char *parm1=NULL, char
 *parm2=NULL, char *parm3=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates an message
 from the mesage number and the passed variables and generates a
 decision that is displayed on the console for console applicati
ons or in a message box for GUI applications. The function retru
ns true (YES), when the response was 's' or 'S' (for si), 'o' or
 'O' (for oui), 'y' or 'Y' (for yes)  or 'j' or 'J' (for ja) or 
when the YES/OK button has been pressed and false (NO) otherwise
.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 msgnum\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm1\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm2\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm3\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get messag
e string}}} 
{#{\footnote\plain{#}{.bvamw}}} 
{K{\footnote\plain{K}{CTX_Base:GetMessageString}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetMessageString\tab -  Get me
ssage string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual char *GetMessageString (int16 msgnum, char *
parm1=NULL, char *parm2=NULL, char *parm3=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function cr
eates a message string for the passed message number. Parameters
 for replacing message variables defined in the message resource
 can be passed to the function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 msgnum\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 p
arm1\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm2\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm3\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get Property handle}}} 
{#{\footnote\plain{#}{.bvamy}}} 
{K{\footnote\plain{K}{CTX_Base:GetPropert
yHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPropertyHandle\tab -  Get Property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual PropertyHa
ndle *GetPropertyHandle (char *fldname_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ret
urns the property handle associated with the data for the contex
t. The function cannot be called for project, application, datab
ase or database object context, since the data associated with t
hose context cannot be described by means of a property handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 W
hen a property name is passed to the function the subordinated p
roperty handle for the context property handle is returned. The 
name passed to the function must be a valid property name in the
 structure/class defined for the context property.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldname_w\tab - Property name or path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is p
assed as 0-terminated string.\par
Default: ""\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get resource name}}} 
{#{\footnote\plain{#}{.bvamz}}} 
{K{\footnote\plain{K}{C
TX_Base:GetResourceName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetResourceName\tab -  Get resource name\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtua
l char *GetResourceName ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the context spe
cific resource name.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get parent context}}} 
{#{\footnote\plain{#}{con8q106u}}} 
{K{\footnote\plain{K}{CTX
_Base:HighContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HighContext\tab -  Get parent context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_Base *High
Context (CTX_Types ctxtype=CTXT_undefined );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  CTX_Base *HighConte
xt (char *resname, CTX_Types ctxtype=CTXT_undefined );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on returns the next upper context with the context type and/or r
esource name passed to the function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ctxt
ype\tab - Context type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The context type for the context class describe
s the application resource reflected by the context.\par
Default: CTX
T_undefined\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 resname\tab - Resource name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The resource name is passed as 
0-terminated string with a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Init 
data handler}}} 
{#{\footnote\plain{#}{.bvao1}}} 
{K{\footnote\plain{K}{CTX_Base:InitData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 InitData\tab -  Init data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 v
irtual logical InitData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The init data handler is called when
 a data instance or GUI element has been initialized. The handle
r can be overloaded in specialized context class implementations
.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function 
returns an error. In case of normal termination the value is NO.
 When the function returns YES more detailed error information a
re available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Insert data handler}}} 
{#{\footnote\plain{#}{.bvant}}} 
{K{\footnote\plain{K}{CTX_Ba
se:InsertData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 InsertData\tab -  Insert data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical Ins
ertData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The insert data handler is called before inserting a
 data element. The handler can be overloaded in specialized cont
ext class implementations.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The insert data handler can deny the d
ata insertion by returning YES.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 value is YES if the function returns an error. In case of norma
l termination the value is NO. When the function returns YES mor
e detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{C
an data be updated}}} 
{#{\footnote\plain{#}{.bvanu}}} 
{K{\footnote\plain{K}{CTX_Base:IsEdit}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEdit\tab -  Can data be upda
ted\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical IsEdit ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether data c
an be updated in the given context.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 function returns YES when the question was answered positivly. 
Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvanv}}} 
{K{\footnote\plain{K}{CTX_Base:IsEnabled}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEnabled\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  log
ical IsEnabled ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function return
s YES when the question was answered positivly. Otherwise it ret
urns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Next data handler}}} 
{#{\footnote\plain{#}{.bvanw}}} 
{K{\footnote\plain{K}{CTX_Base:NextData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 NextData\tab -  Next 
data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical NextData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The next data handler i
s called when the next data instance or GUI element has been loc
ated. The handler can return an error (YES) to force the system 
providing the next instance. Thus, the next handler allows imple
menting data filters in a given context.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overl
oaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an err
or. In case of normal termination the value is NO. When the func
tion returns YES more detailed error information are available i
n the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open context}}} 
{#{\footnote\plain{#}{.bvanx}}} 
{K{\footnote\plain{K}{CTX_Base:Open}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Open\tab -  Open co
ntext\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical Open ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function is called when the co
ntext has been opened. The handler can be overloaded in the spec
ific context to perform necessary actions after opening the cont
ext. In this phase all resources of the context are already acce
ssible.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the fun
ction returns an error. In case of normal termination the value 
is NO. When the function returns YES more detailed error informa
tion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provides parameter}}} 
{#{\footnote\plain{#}{.bvany}}} 
{K{\footnote\plain{K}{C
TX_Base:Parm}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Parm\tab -  Provides parameter\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *Parm (int32 parm_no 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  char *Parm (char *parm_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When calling context actions par
ameter cannot be passed directly. The application must use the S
etParm function to pass parameters to the context action. Parame
ters that have been set with the SetParm function can be retriev
ed with the Parm() function as keyword or position parameters. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A
fter retrieving a parameter value it can be used until the next 
parameter is retrieved. Copy the parameter value when it is stil
l needed. Do not refer by pointer to several parameters at the s
ame time.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Parameter string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The parameter string is p
assed as 0-terminated string and contains the parameters accordi
ng to the conventions of the action called.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm_no\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pa
rm_key\tab - Parameter keyword\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The keyword that is searched in the par
ameter list. The keyword is passed as 0-terminated string. Param
eter keywords are not case sensitive.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Previous data handler}}} 
{#{\footnote\plain{#}{.bvanz
}}} 
{K{\footnote\plain{K}{CTX_Base:PreviousData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 PreviousData\tab -  Previous data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual
 logical PreviousData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The previous data handler is called wh
en the previous data instance or GUI element has been located. T
he handler can return an error (YES) to force the system providi
ng anoter previous instance. Thus, the previous handler allows i
mplementing data filters in a given context.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be o
verloaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an
 error. In case of normal termination the value is NO. When the 
function returns YES more detailed error information are availab
le in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get process state}}} 
{#{\footnote\plain{#}{con8q107u}}} 
{K{\footnote\plain{K}{CTX_Base:Proces
sState}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProcessState\tab -  Get process state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_ProcessState ProcessS
tate ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the current process state for the 
context.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset data handler}}} 
{#{\footnote\plain{#}{.bvap1}}} 
{K{\footnote\plain{K}{CTX_Base:ResetData
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ResetData\tab -  Reset data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical ResetData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The 
reset data handler is called when a data instance or GUI element
 has been reset. The handler can be overloaded in specialized co
ntext class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The va
lue is YES if the function returns an error. In case of normal t
ermination the value is NO. When the function returns YES more d
etailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Save
 data handler}}} 
{#{\footnote\plain{#}{.bvaos}}} 
{K{\footnote\plain{K}{CTX_Base:SaveData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SaveData\tab -  Save data handler
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical SaveData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The save data handler is called whe
n a data instance or GUI element has been saved. The handler can
 be overloaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function retur
ns an error. In case of normal termination the value is NO. When
 the function returns YES more detailed error information are av
ailable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Select data handler}}} 
{#{\footnote\plain{#}{.bvaot}}} 
{K{\footnote\plain{K}{CTX_Base:Se
lectData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SelectData\tab -  Select data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical SelectDa
ta ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The select data handler is called when a data instance or
 GUI element has been selected. The handler can be overloaded in
 specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termina
tion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In c
ase of normal termination the value is NO. When the function ret
urns YES more detailed error information are available in the er
ror object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set action result}}} 
{#{\footnote\plain{#}{.bvaou}}} 
{K{\footnote\plain{K}{CTX_Base:SetActionResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetAct
ionResult\tab -  Set action result\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetActionResult (int32 rc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he function must be called from context handlers or action funct
ions to set the return value for the action in the context. This
 retrun value can be retrieved by other context functions until 
the nect action call. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Valid values for the return code are \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 0 or 
NO - action terminated normally\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1 or YES - action terminated with
 error\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rc\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set data state}}} 
{#{\footnote\plain{#}{.bvaov}}} 
{K{\footnote\plain{K}{CTX_Base:SetDataState}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Set
DataState\tab -  Set data state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_DataStates SetDataState (CTX_Data
States datstate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually the data state is maintained by the sy
stem. Context functions, however, may set data states to inform 
the system e.g. that data has become invalid. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retur
ns the previuos data state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datstate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set
 display state}}} 
{#{\footnote\plain{#}{.bvaow}}} 
{K{\footnote\plain{K}{CTX_Base:SetDisplayState}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetDisplayState\tab -  Se
t display state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_DisplayState SetDisplayState (CTX_DisplaySta
te dspstate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually the display state is maintained by the sys
tem. Context functions, however, may set display states e.g. to 
request data or GUI elements to be hidden further on.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion returns the previuos display state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he data state is set to DSP_disabled, when the context is set to
 read only.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dspstate\tab - Data state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data state is set t
o DSP_disabled, when the context is set to read only.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set Paramet
ers for context action}}} 
{#{\footnote\plain{#}{.bvaox}}} 
{K{\footnote\plain{K}{CTX_Base:SetParm}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetParm\tab -  Set Parame
ters for context action\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetParm (char *parm1=NULL, char 
*parm2=NULL, char *parm3=NULL, char *parm4=NULL, char *parm5=NUL
L );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When calling context actions parameter cannot be passed dire
ctly. The application must use the SetParm() function to pass pa
rameters to the context action. This function is usually called 
internally from the ExecuteAction function for different handles
.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function 
returns an error. In case of normal termination the value is NO.
 When the function returns YES more detailed error information a
re available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm1\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm2\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm3\tab - 
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm4\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm5\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set first user state}}} 
{#{\footnote\plain{#}{con8q108u}}} 
{K{\footnote\plain{K}{CTX_Base:SetUserState
1}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetUserState1\tab -  Set first user state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 SetUserState1 (int16
 userstat );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function set the new value for the user state an
d returns the previous user state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - User state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The us
er state is true (YES) or false (NO).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 userstat\tab - User st
ate\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The user state is true (YES) or false (NO).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set second user st
ate}}} 
{#{\footnote\plain{#}{.bvaq1}}} 
{K{\footnote\plain{K}{CTX_Base:SetUserState2}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetUserState2\tab -  Set second user s
tate\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 SetUserState2 (int16 userstat );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function set the 
new value for the user state and returns the previous user state
.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - User state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The user state is true (YES) or false (
NO).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 userstat\tab - User state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The user state is true (YES) o
r false (NO).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set third user state}}} 
{#{\footnote\plain{#}{.bvaps}}} 
{K{\footnote\plain{K}{CTX_Base:SetUserState3}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Set
UserState3\tab -  Set third user state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 SetUserState3 (int16 use
rstat );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function set the new value for the user state and re
turns the previous user state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - User state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The user s
tate is true (YES) or false (NO).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 userstat\tab - User state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he user state is true (YES) or false (NO).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Setup parameter list o
ptions}}} 
{#{\footnote\plain{#}{.bvapt}}} 
{K{\footnote\plain{K}{CTX_Base:SetupParm}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetupParm\tab -  Setup parameter list o
ptions\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetupParm (char separator=',', logical key_parms=
NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows settting up the parameter list by defin
ing separator and parameter list type. The default values are ',
' as seperator and no keyword parms. When another type of parame
ter list should be used for passing parameters to context action
s of the given context it is suggested to setup the parameter li
st when opening the context (DBOpened).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination
 code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case 
of normal termination the value is NO. When the function returns
 YES more detailed error information are available in the error 
object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 separator\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_parms\tab - Parmlist with key paramet
er format\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option is set to YES (true) when the parameter lis
t contains key word parameters. If no (position parameters) the 
option is set to NO (false).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Store data handler}}} 
{#{\footnote\plain{#}{.bvapu}}} 
{K{\footnote\plain{K}{CTX_Base:Sto
reData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 StoreData\tab -  Store data handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical StoreData ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The store data handler is called when a data instance or GUI e
lement has been saved. The handler can be overloaded in speciali
zed context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of no
rmal termination the value is NO. When the function returns YES 
more detailed error information are available in the error objec
t.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get first user state}}} 
{#{\footnote\plain{#}{.bvapv}}} 
{K{\footnote\plain{K}{CTX_Base:UserState1}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 UserState1\tab -  Get 
first user state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 UserState1 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the c
urrent user state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get second user state}}} 
{#{\footnote\plain{#}{.bvapw}}} 
{K{\footnote\plain{K}{CTX_B
ase:UserState2}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 UserState2\tab -  Get second user state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 UserState
2 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the current user state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get third user state}}} 
{#{\footnote\plain{#}{.bvapx}}} 
{K{\footnote\plain{K}{CTX_Base:UserState3}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 UserState3\tab -  Get th
ird user state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 UserState3 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the cur
rent user state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Parent context}}} 
{#{\footnote\plain{#}{.bvapz}}} 
{K{\footnote\plain{K}{CTX_Base:high_
ctx}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 high_ctx\tab -  Parent context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The parent context is the upper cont
ext in the application, which usually owns the lower context.\par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  CTX_Base\strike0\ul0 \par\pard\par
{${\footnote\plain{$}{User States}}} 
{#{\footnote\plain{#}{con8q109u}}} 
{K{\footnote\plain{K}{CTX_Bas
e:user_states}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 user_states\tab -  User States\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 User states can be used by
 the application to indicate certain relevant states for the app
lication. User states are not updates by the system.\par
\par\pard\par
{${\footnote\plain{$}{System state
s}}} 
{#{\footnote\plain{#}{.bvar1}}} 
{K{\footnote\plain{K}{CTX_Base:intern_states}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 intern_states\tab -  System states\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 System
 states are maintained by the system and cannot be updated by th
e application. The application may, however, ask for intern stat
es.\par
\par\pard\par
{${\footnote\plain{$}{Last action return code}}} 
{#{\footnote\plain{#}{.bvaqs}}} 
{K{\footnote\plain{K}{CTX_Base:action_rc}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 action_rc\tab -  La
st action return code\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The return code, that has been returned by 
the last action call. Since an action call returns only the meta
 return code, i.e. wheter the action could be called or not, the
 actully returncaode from the action is provided in this field.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{B
ase class for data base contexts}}} 
{#{\footnote\plain{#}{.bvaqv}}} 
{K{\footnote\plain{K}{CTX_DBBase}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_DBBase\tab -  Bas
e class for data base contexts\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The base class for database contex
ts provides some basic functionality for data base context class
es. In particular the class provides most of the default event h
andlers that can be overloaded in specific context classes. Over
loaded handlers need not to call the default handlers since noth
ing is done in the default handlers. Handlers for database event
s are usually called within internal transactions. Thus, all mod
ifications made by the event handler are reset when the transact
ion fails.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 For a number of database operations Not-events are gen
erated that are called in case of an error. An error could be a 
database (consistency) error but the process event (before event
) could have denied the operation as well.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Che
ckPermission\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check permission\par
\f2\cf2\fs20\b0\i0 DBBeforeRead\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before read event ha
ndler\par
\f2\cf2\fs20\b0\i0 DBClose\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close event\par
\f2\cf2\fs20\b0\i0 DBCreate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before create handler\par
\f2\cf2\fs20\b0\i0 DBCreate
d\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 After create handler\par
\f2\cf2\fs20\b0\i0 DBDelete\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before delete handler\par
\f2\cf2\fs20\b0\i0 DBDeleted\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 After delete handler\par
\f2\cf2\fs20\b0\i0 DBInitialize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initialize handler\par
\f2\cf2\fs20\b0\i0 DBInsert\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 B
efore insert handler\par
\f2\cf2\fs20\b0\i0 DBInserted\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 After inserted handler\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DBModify\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Modify handler\par
\f2\cf2\fs20\b0\i0 DBNotCreated\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Not created handler\par
\f2\cf2\fs20\b0\i0 DBNotDeleted\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Not
 deleted handler\par
\f2\cf2\fs20\b0\i0 DBNotInserted\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Not inserted handler\par
\f2\cf2\fs20\b0\i0 DBNotOpened\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Not opened handler\par
\f2\cf2\fs20\b0\i0 DBNotRemoved\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Not removed handler\par
\f2\cf2\fs20\b0\i0 DBOpen\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Befor
e open handler\par
\f2\cf2\fs20\b0\i0 DBOpened\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 After Open handler\par
\f2\cf2\fs20\b0\i0 DBRead\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 After read eve
nt\par
\f2\cf2\fs20\b0\i0 DBRefresh\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Refresh handler\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DBRemove\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before remove handler\par
\f2\cf2\fs20\b0\i0 DBRem
oved\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 After remove handler\par
\f2\cf2\fs20\b0\i0 DBStore\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before stor handler\par
\f2\cf2\fs20\b0\i0 DBStored\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 After strore handler\par
\f2\cf2\fs20\b0\i0 ExecuteAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute action\par
\f2\cf2\fs20\b0\i0 GetPropertyHand
le\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Property handle\par
\f2\cf2\fs20\b0\i0 GetSysDict\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get system dictionary\par
\f2\cf2\fs20\b0\i0 HighDBCo
ntext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get next higher database context\par
\f2\cf2\fs20\b0\i0 SetTransactionError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set 
trasaction error\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check permission}}} 
{#{\footnote\plain{#}{.bvaqx}}} 
{K{\footnote\plain{K}{CTX_DBBase:CheckPermission
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CheckPermission\tab -  Check permission\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CheckPermission (UCA_
Action *actptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether the user/applicatio
n has permission for running the action passed to the function. 
The function returns true (YES) when the application has permiss
ions for calling the action. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Permissions are defined in the proj
ect or database context and must be initialized when permission 
check is to be supported.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value
 is YES if the function returns an error. In case of normal term
ination the value is NO. When the function returns YES more deta
iled error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Paramet
ers\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 actptr\tab - Action pointer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The pointer refers to an internal actio
n that has been implicitely defined or created from a resource.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{B
efore read event handler}}} 
{#{\footnote\plain{#}{.bvaqy}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBBeforeRead}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBBeforeRea
d\tab -  Before read event handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBBeforeRead ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e before read event handler is called before reading an instance
 (DBP_Read event). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 At the time, when the handler is called, the 
instance is already selected in the property handle. Key data fo
r the sort key (when defined) is available and can be copied to 
the instance area using the SetKey() structure context function 
or can be provided by using the GetKey() context function. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The h
andler can be used to optimize read access by returning YES or m
arking an instance as 'hidden' (HideInstance()), when an instanc
e with the given key should not be provided.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be o
verloaded in specialized structure context class (CTX_Structure)
 implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES 
if the function returns an error. In case of normal termination 
the value is NO. When the function returns YES more detailed err
or information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Close event}}} 
{#{\footnote\plain{#}{.bva
qz}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBClose}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBClose\tab -  Close event\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBClose
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function reacts on the DBO_Close event, i.e. it is call
ed when the context is going to be closed. In this phase all res
ources of the context are still accessible.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be ov
erloaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an 
error. In case of normal termination the value is NO. When the f
unction returns YES more detailed error information are availabl
e in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Before create handler}}} 
{#{\footnote\plain{#}{con8q100u}}} 
{K{\footnote\plain{K}{CTX_DBBase:D
BCreate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBCreate\tab -  Before create handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBCreate 
( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before create handler is called before creating a new da
ta instance (DBP_Create event). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before create handler can de
ny creating the data instance by returning YES.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can b
e overloaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns
 an error. In case of normal termination the value is NO. When t
he function returns YES more detailed error information are avai
lable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{After create handler}}} 
{#{\footnote\plain{#}{.bvas1}}} 
{K{\footnote\plain{K}{CTX_DBBase:D
BCreated}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBCreated\tab -  After create handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBCreate
d ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The after create handler is called when a data instance ha
s been cretaed. (DBO_Created event). The handler can be overload
ed in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Te
rmination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error.
 In case of normal termination the value is NO. When the functio
n returns YES more detailed error information are available in t
he error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Before delete handler}}} 
{#{\footnote\plain{#}{.bvars}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBDelete}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DB
Delete\tab -  Before delete handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBDelete ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The b
efore delete handler is called before deleting a data instance (
DBP_Delete event). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before delete handler can deny deleting t
he data instance by returning YES.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded 
in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termi
nation code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In
 case of normal termination the value is NO. When the function r
eturns YES more detailed error information are available in the 
error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{After delete handler}}} 
{#{\footnote\plain{#}{.bvart}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBDeleted}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBDel
eted\tab -  After delete handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBDeleted ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The aft
er delete handler is called when a data instance has been delete
d. (DBO_Deleted event). The handler can be overloaded in special
ized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination cod
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of n
ormal termination the value is NO. When the function returns YES
 more detailed error information are available in the error obje
ct.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Initialize handler}}} 
{#{\footnote\plain{#}{.bvaru}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBInitialize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBInitialize\tab - 
 Initialize handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBInitialize ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The initiali
ze handler is called when a data instance has been initializes (
DBO_Initialized event). When the handler is called the instance 
is not yet selected in the property handle. Hence, only attribut
es can be accessed in the instance in this phase. References and
 relationships are not accessable.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded 
in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termi
nation code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In
 case of normal termination the value is NO. When the function r
eturns YES more detailed error information are available in the 
error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Before insert handler}}} 
{#{\footnote\plain{#}{.bvarv}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBInsert}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBIns
ert\tab -  Before insert handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBInsert ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The befo
re insert handler is called before insering a data instance in a
 collection (DBP_Insert event). When the handler is called the i
nstance to be inserted in the collection is not yet selected in 
the property handle. Hence, only attributes can be accessed in t
he instance in this phase. References and relationships are not 
accessable.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before insert handler can deny creating the data 
instance by returning YES.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded in speci
alized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination c
ode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of
 normal termination the value is NO. When the function returns Y
ES more detailed error information are available in the error ob
ject.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{After inserted handler}}} 
{#{\footnote\plain{#}{.bvarw}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBInserted}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBInserted
\tab -  After inserted handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBInserted ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The afte
r inserted handler is called when a data instance has been inser
ted in a collection (DBO_Inserted event). In contrast to create 
insert means only that an instance has been added to a collectio
n but it need not to be a newly created instance. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler ca
n be overloaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Ret
urn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function retu
rns an error. In case of normal termination the value is NO. Whe
n the function returns YES more detailed error information are a
vailable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Modify handler}}} 
{#{\footnote\plain{#}{.bvarx}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBMo
dify}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBModify\tab -  Modify handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBModify ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The mo
dify handler is called when a modification is signaled for the i
nstance (DBP_Modify event). This may happen before or after perf
orming the modification. new data instance. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before create ha
ndler can deny creating the data instance by returning YES.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The h
andler can be overloaded in specialized context class implementa
tions. When handling the modify event no values should be assign
ed to the instance of the property handle since this will cause 
another modification event and thus, a recursive call of the eve
nt handler. You can prevent recursion by setting a user state an
d checking it always when entering the modify event handler. The
 state should be reset at least in the stored handler to handle 
new modify events.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Not created ha
ndler}}} 
{#{\footnote\plain{#}{.bvary}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBNotCreated}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBNotCreated\tab -  Not created han
dler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBNotCreated ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The not created handler is 
called when a data instance could not be cretaed because of an e
rror (DBO_NotCreated event). The handler can be overloaded in sp
ecialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Terminatio
n code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case
 of normal termination the value is NO. When the function return
s YES more detailed error information are available in the error
 object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Not deleted handler}}} 
{#{\footnote\plain{#}{.bvarz}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBNotDeleted}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBNotDel
eted\tab -  Not deleted handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBNotDeleted ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The n
ot deleted handler is called when a data instance could not be d
eleted because of an error (DBO_NotDeleted event). The handler c
an be overloaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function ret
urns an error. In case of normal termination the value is NO. Wh
en the function returns YES more detailed error information are 
available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Not inserted handler}}} 
{#{\footnote\plain{#}{C_dn51b}}} 
{K{\footnote\plain{K}{CTX_DBB
ase:DBNotInserted}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBNotInserted\tab -  Not inserted handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual log
ical DBNotInserted ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The not inserted handler is called when a
 data instance could not be inserted because of an error (DBO_No
tInserted event). The handler can be overloaded in specialized c
ontext class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The v
alue is YES if the function returns an error. In case of normal 
termination the value is NO. When the function returns YES more 
detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Not
 opened handler}}} 
{#{\footnote\plain{#}{.bvat1}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBNotOpened}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBNotOpened\tab -  Not ope
ned handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBNotOpened ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The not opened handle
r is called when the context could not be oened because of an er
ror (DBO_NotOpened event). The handler can be overloaded in spec
ialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination 
code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case o
f normal termination the value is NO. When the function returns 
YES more detailed error information are available in the error o
bject.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Not removed handler}}} 
{#{\footnote\plain{#}{.bvass}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBNotRemoved}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBNotRemov
ed\tab -  Not removed handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBNotRemoved ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The not
 removed handler is called when a data instance could not be rem
oved from a collection because of an error (DBO_NotRemoved event
). The handler can be overloaded in specialized context class im
plementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if 
the function returns an error. In case of normal termination the
 value is NO. When the function returns YES more detailed error 
information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Before open handle
r}}} 
{#{\footnote\plain{#}{.bvast}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBOpen}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBOpen\tab -  Before open handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logi
cal DBOpen ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before open handler is called when opening th
e context (DBP_Open event). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before delete handler can deny o
pening the context by returning YES. In this case the cantext ha
s the process state PRC_NotOpened. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded
 in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Term
ination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. I
n case of normal termination the value is NO. When the function 
returns YES more detailed error information are available in the
 error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{After Open handler}}} 
{#{\footnote\plain{#}{.bvasu}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBOpened}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBOpene
d\tab -  After Open handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBOpened ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
is called when the context has been opened (DBOpened event). The
 handler can be overloaded in the specific context to perform ne
cessary actions after opening the context. In this phase all res
ources of the context are already accessible.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termi
nation code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In
 case of normal termination the value is NO. When the function r
eturns YES more detailed error information are available in the 
error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{After read event}}} 
{#{\footnote\plain{#}{.bvasv}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBRead}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBRead\tab -  Aft
er read event\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBRead ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The after delete handler
 is called when a data instance has been deleted. (DBO_Read even
t). This handler is typically used to initialize transient attri
butes and references in the instance or to select propert settin
gs for generic attributes. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded in spec
ialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination 
code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case o
f normal termination the value is NO. When the function returns 
YES more detailed error information are available in the error o
bject.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Refresh handler}}} 
{#{\footnote\plain{#}{.bvasw}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBRefresh}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBRefresh\tab -  Refre
sh handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBRefresh ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The refresh handler is s
ignaled by the application when submitting a refresh request to 
a property handle (DBO_Refresh event). This handler is typically
 used to initialize transient attributes and references for the 
property handle or to re-calculate derived values.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler 
can be overloaded in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function re
turns an error. In case of normal termination the value is NO. W
hen the function returns YES more detailed error information are
 available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Before remove handler}}} 
{#{\footnote\plain{#}{.bvasx}}} 
{K{\footnote\plain{K}{CTX_DB
Base:DBRemove}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBRemove\tab -  Before remove handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBR
emove ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before remove handler is called before removing a 
data instance from a collection (DBP_Remove event). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before i
nsert handler can deny creating the data instance by returning Y
ES.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded in specialized context class im
plementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if 
the function returns an error. In case of normal termination the
 value is NO. When the function returns YES more detailed error 
information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{After remove handl
er}}} 
{#{\footnote\plain{#}{.bvasy}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBRemoved}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBRemoved\tab -  After remove handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virt
ual logical DBRemoved ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The after remove handler is called whe
n a data instance has been removed from a collection (DBO_Remove
d event). In contrast to delete remove means only that an instan
ce has been removed from a collection but not necessarily delete
d as instance. When the handler is called the instance removed f
rom the collection is not anymore selected in the property handl
e and thus, not accessible.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded in spec
ialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination 
code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case o
f normal termination the value is NO. When the function returns 
YES more detailed error information are available in the error o
bject.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Before stor handler}}} 
{#{\footnote\plain{#}{con8q10.u}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBStore}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBStore\tab -  Be
fore stor handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBStore ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before store ha
ndler is called before storing data to the transaction or databa
se (DBP_Store event). The event handler is typically used to per
form application consistency checks for the instance. Since in t
his phase all indices have already been updated and consistency 
checks have been finished key components must not be updated. Wh
en changing sub-ordinated instances in this handler the modifica
tions should be saved explicitely. Otherwise, they are not store
d in the same transaction and may cause problems when the transa
ction fails.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The before store handler can deny creating the data 
instance by returning YES.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overloaded in speci
alized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination c
ode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of
 normal termination the value is NO. When the function returns Y
ES more detailed error information are available in the error ob
ject.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{After strore handler}}} 
{#{\footnote\plain{#}{.bvau1}}} 
{K{\footnote\plain{K}{CTX_DBBase:DBStored}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBStored\tab -  Aft
er strore handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical DBStored ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The after store ha
ndler is called when a data instance has been stored (DBO_Stored
 event). The handler can be overloaded in specialized context cl
ass implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is Y
ES if the function returns an error. In case of normal terminati
on the value is NO. When the function returns YES more detailed 
error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Execute acti
on}}} 
{#{\footnote\plain{#}{.bvatt}}} 
{K{\footnote\plain{K}{CTX_DBBase:ExecuteAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecuteAction\tab -  Execute action\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  l
ogical ExecuteAction (DB_Event intevent );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows ex
ecuting an action with the action name and type passed to the fu
nction or an event. The function returns whether the action coul
d be exuted faormally. The action result can be retrieved with t
he function GetActionResult().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
value is YES if the function returns an error. In case of normal
 termination the value is NO. When the function returns YES more
 detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 intevent\tab - Event identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The event identifier is an int
ernal number that is defined for typical events.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  DB_Event\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Property handle}}} 
{#{\footnote\plain{#}{.bvatx}}} 
{K{\footnote\plain{K}{CTX_DBBase:GetP
ropertyHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPropertyHandle\tab -  Get Property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual Prop
ertyHandle *GetPropertyHandle (char *fldname_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on returns the property handle associated with the data for the 
context. The function cannot be called for database or database 
object context, since the data associated with those context can
not be described by means of a property handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a property n
ame is passed to the function the subordinated property handle f
or the context property handle is returned. The name passed to t
he function must be a valid property name in the structure/class
 defined for the context property.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to a pro
perty handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually) opened property handle.
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldname_
w\tab - Property name or path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is passed as 0-termina
ted string.\par
Default: ""\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get system dictionary}}} 
{#{\footnote\plain{#}{.bvatz}}} 
{K{\footnote\plain{K}{CTX_DBBase:GetS
ysDict}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSysDict\tab -  Get system dictionary\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DictionaryHandle &GetSy
sDict ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the system dictionary for the dat
abase opened. The system dictionary contains the model definitio
ns for the metadata.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is a ref
erence to an opened dictionary handle.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get next higher database c
ontext}}} 
{#{\footnote\plain{#}{con8q10_u}}} 
{K{\footnote\plain{K}{CTX_DBBase:HighDBContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HighDBContext\tab -  Get next 
higher database context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl HighDBContext     
                      ( DBField *co, DBField *retval, ParmList *
parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  CTX_DBBase *HighDBCont
ext (CTX_Types ctxtype=CTXT_undefined );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  CTX_DBBase *HighDBConte
xt (char *resname, CTX_Types ctxtype=CTXT_undefined );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on returns the next upper context with the context type and/or r
esource name passed to the function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ctxtype\tab - Conte
xt type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The context type for the context class describes the appl
ication resource reflected by the context.\par
Default: CTXT_undefine
d\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 resname\tab - Resource name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The resource name is passed as 0-terminat
ed string with a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set trasaction 
error}}} 
{#{\footnote\plain{#}{.bvbvt}}} 
{K{\footnote\plain{K}{CTX_DBBase:SetTransactionError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTransactionError\tab -  S
et trasaction error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual void SetTransactionError ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The func
tion marks a transaction as errounus. This leads to a rollback o
f the transaction when the transaction is finished. The function
 can be called in post handlers (as inserted or deleted) to undo
 the performed operation.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database Context}}} 
{#{\footnote\plain{#}{.bvbvx}}} 
{K{\footnote\plain{K}{CTX_DataBase}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_D
ataBase\tab -  Database Context\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The database context allows defining f
unctionality that is executed when opening or closing a database
. The database context does not have a parent context.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The defaul
t database context can be overloaded by a application specific d
atabase context class.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CTX_DataBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Konstruct
or\par
\f2\cf2\fs20\b0\i0 GetDBHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Det database handle\par
\f2\cf2\fs20\b0\i0 ~CTX_DataBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Konst
ructor}}} 
{#{\footnote\plain{#}{.bvbvy}}} 
{K{\footnote\plain{K}{CTX_DataBase:CTX_DataBase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_DataBase\tab -  Konstructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
                        CTX_DataBase ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Det database handle}}} 
{#{\footnote\plain{#}{C_dn
65b}}} 
{K{\footnote\plain{K}{CTX_DataBase:GetDBHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDBHandle\tab -  Det database handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Dat
abaseHandle &GetDBHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns a database han
dle for the database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvbmt}}} 
{K{\footnote\plain{K}{CTX_DataBase:
~CTX_DataBase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~CTX_DataBase\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual                  
       ~CTX_DataBase ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function destroys the database cont
ext. The function must be overloaded in an application specific 
implementation of the database context.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database Object Context}}} 
{#{\footnote\plain{#}{.b
vbmw}}} 
{K{\footnote\plain{K}{CTX_Object}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_Object\tab -  Database Object Context\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The Database O
bject context allows defining functionality that is executed whe
n opening or closing a Database Object. The parent context for a
n object context is an object con-text (if the Database Object i
s not the root Database Object) or the database context (for the
 root Database Object).\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The default database object context can b
e overloaded by a application specific database context class.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Pr
operties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ~CTX_Object\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvbo1}}} 
{K{\footnote\plain{K}{CTX_Obje
ct:~CTX_Object}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~CTX_Object\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual                   
      ~CTX_Object ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function destroys the database object 
context. The function must be overloaded in an application speci
fic implementation of the database object context.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Property conte
xts}}} 
{#{\footnote\plain{#}{.bvbnt}}} 
{K{\footnote\plain{K}{CTX_Property}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_Property\tab -  Property contexts\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Property co
ntexts are created for extents, references, attributes, relation
ships and base structures. The property context defines refers t
o the property instance as well as to the property definition. M
oreover, it allows determining the active context hierarchy for 
the property, i.e. the parent structure/Database Object, the pro
perty the parent structure is accessed from, the parent parent s
tructure etc. Thus, the property context defines the context in 
which the property instance has been provided. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The parent contex
t for a property context is a structure context (when the proper
ty is part of an object instance) or a Database Object context (
when the property is an extent. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The property context allows hand
ling read and update events, validity checks and insert and remo
ve events.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The default property context can be overloaded by a ap
plication specific property context classes.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 D
BRefresh\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Refresh handler\par
\f2\cf2\fs20\b0\i0 GetInstContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Instance context\par
\f2\cf2\fs20\b0\i0 Get
PropContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Property context\par
\f2\cf2\fs20\b0\i0 GetPropertyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Property
 Handle\par
\f2\cf2\fs20\b0\i0 GetResourceName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get resource name\par
\f2\cf2\fs20\b0\i0 GetStructContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get s
tructure context\par
\f2\cf2\fs20\b0\i0 IsEdit\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Can data be updated\par
\f2\cf2\fs20\b0\i0 IsReadOnly\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is read-o
nly enabled\par
\f2\cf2\fs20\b0\i0 SetReadOnly\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set read only\par
\f2\cf2\fs20\b0\i0 SetResult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set value for ac
tion result\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetTransactionError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set Transaction Error\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Refresh han
dler}}} 
{#{\footnote\plain{#}{.bvbnv}}} 
{K{\footnote\plain{K}{CTX_Property:DBRefresh}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBRefresh\tab -  Refresh handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtu
al logical DBRefresh ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The refresh handler is signaled by the 
application when submitting a refresh request to a property hand
le (DBO_Refresh event). This handler is typically used to initia
lize transient attributes and references for the property handle
 or to re-calculate derived values.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handler can be overload
ed in specialized context class implementations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Te
rmination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error.
 In case of normal termination the value is NO. When the functio
n returns YES more detailed error information are available in t
he error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Instance context}}} 
{#{\footnote\plain{#}{.bvbnz}}} 
{K{\footnote\plain{K}{CTX_Property:GetInstCo
ntext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInstContext\tab -  Get Instance context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_Structure *GetIns
tContext ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the structure context for the 
instance that owns the current property (high structure). This i
s not identical with the structure that owns the property. The i
nstance owning the property is the instance that is stored in th
e database. Hence, the function goes up in the context hirarchy 
until it finds the context that referst to the instance stored i
n the database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Structure Context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Structure context 
for a property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  CTX_Struct
ure\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Property context}}} 
{#{\footnote\plain{#}{ID_7gji75}}} 
{K{\footnote\plain{K}{CTX_Property:GetPropContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPr
opContext\tab -  Get Property context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual CTX_Property *GetPropCon
text (char *w_fldnames=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the property 
context for the property passed as name or property path. The pr
operty is searched in the structure that owns the current proper
ty.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the default property co
ntext or a user-defined context class instance for the property.
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  CTX_Property\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_fldnames
\tab - Property path or name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is passed as 0-terminat
ed string. It may contain a property path that consists of a seq
uence of property names. NULL is passed if no property name is a
vailable.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get Property Handle}}} 
{#{\footnote\plain{#}{.bvbp1}}} 
{K{\footnote\plain{K}{CTX_Property:GetPropertyHandle
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPropertyHandle\tab -  Get Property Handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual PropertyHandle *G
etPropertyHandle (char *fldname_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns th
e property handle associated with the data for the context. The 
function cannot be called for database or database object contex
ts, since the data associated with those contexts cannot be desc
ribed by means of a property handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a property name is pass
ed to the function the subordinated property handle for the cont
ext property handle is returned. The name passed to the function
 must be a valid property name in the structure/class defined fo
r the context property.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to a property handl
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cl
ass definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldname_w\tab - Property
 name or path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is passed as 0-terminated string.
\par
Default: ""\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get resource name}}} 
{#{\footnote\plain{#}{.bvbos}}} 
{K{\footnote\plain{K}{CTX_Property:GetResourceName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Ge
tResourceName\tab -  Get resource name\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual char *GetResourceName (
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the property name as context specific re
source name.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Resource name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The resource name is pass
ed as 0-terminated string with a maximum length of 40 characters
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get structure context}}} 
{#{\footnote\plain{#}{.bvbot}}} 
{K{\footnote\plain{K}{CTX_Property:GetStructContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStru
ctContext\tab -  Get structure context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual CTX_Structure *GetStruc
tContext (char *w_strnames=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the struc
ture context for the currently selected instance in the property
 handle. For weak-typed properties the context may change with t
he selection from instance to instance. When no instance is sele
cted in the property handle associated with the context the func
tion returns the instance context for the default instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retur
n value\tab - Structure Context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Structure context for a property handl
e.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  CTX_Structure\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_strna
mes\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Can data be updated}}} 
{#{\footnote\plain{#}{.bvbov}}} 
{K{\footnote\plain{K}{CTX_Property:IsEdit}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEdit\tab -  Can da
ta be updated\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical IsEdit ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whet
her data can be updated in the property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Ret
urn value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered
 positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is read-only enabled}}} 
{#{\footnote\plain{#}{.bvbow}}} 
{K{\footnote\plain{K}{CT
X_Property:IsReadOnly}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsReadOnly\tab -  Is read-only enabled\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical I
sReadOnly ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the read only option 
has been set in the instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The v
alue is YES if the function returns an error. In case of normal 
termination the value is NO. When the function returns YES more 
detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set
 read only}}} 
{#{\footnote\plain{#}{.bvboy}}} 
{K{\footnote\plain{K}{CTX_Property:SetReadOnly}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetReadOnly\tab -  Set read o
nly\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetReadOnly (logical readonly );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows 
setting the instance selected in the property handle to read-onl
y. This will prevent the data in the property handle from being 
updated. The indication is reset automatically, when reading the
 next instance. The function sets the read only optin for all su
b-ordinated property handles.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The v
alue is YES if the function returns an error. In case of normal 
termination the value is NO. When the function returns YES more 
detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 readonly\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set value for action result}}} 
{#{\footnote\plain{#}{.bvboz}}} 
{K{\footnote\plain{K}{CTX_Property:S
etResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetResult\tab -  Set value for action result\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetResult (
char *result_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually it is not possible to pass an resu
lt from a context function. You can, however, return a string li
st which can be retrieved by the application using the function 
GetActionResult(). The result is also passed from the server to 
the client when the action is executed on a server.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 res
ult_string\tab - Result string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The result string can be a list of stri
ngs where strings are usually separated by x01 characters. If th
ere is only one string returned the string is 0-terminated. Mult
iple strings are terminated with 0 after the last string in the 
list, which should be terminated with x01 as well.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set Transactio
n Error}}} 
{#{\footnote\plain{#}{ID_7gji85}}} 
{K{\footnote\plain{K}{CTX_Property:SetTransactionError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTransactionEr
ror\tab -  Set Transaction Error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual void SetTransactionError ( );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function marks a transaction as errounus. This leads to a ro
llback of the transaction when the transaction is finished. The 
function can be called in post handlers (as inserted or deleted)
 to undo the performed operation.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure Context}}} 
{#{\footnote\plain{#}{.bvbpt}}} 
{K{\footnote\plain{K}{CTX_Stru
cture}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_Structure\tab -  Structure Context\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A structure context is cre
ated for each structure type. It defines the connection between 
the instance and the instance description. Moreover, it allows d
etermining the active con-text hierarchy for the structure insta
nce, i.e. the parent property/extent, the structure the parent p
roperty is defined in, the parent parent property etc. Thus, the
 structure context defines the context in which the object insta
nce has been provided.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The parent context for a structure context
 is always a property context. This can be the property context 
for an extent or for another property within a structure instanc
e.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The structure context allows handling read and updating events
 as well as creating or deleting events.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Build
ObjDescription\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create an object description\par
\f2\cf2\fs20\b0\i0 CTX_Structure\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Struc
ture context constructor\par
\f2\cf2\fs20\b0\i0 CopyTo\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Duplicate instance\par
\f2\cf2\fs20\b0\i0 GetContextType
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Context type\par
\f2\cf2\fs20\b0\i0 GetInstContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Instance context\par
\f2\cf2\fs20\b0\i0 GetInstanc
e\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get instance\par
\f2\cf2\fs20\b0\i0 GetKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Key value\par
\f2\cf2\fs20\b0\i0 GetOldField\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide propert
y handle for old instance\par
\f2\cf2\fs20\b0\i0 GetOldInstance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get old instance\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetProp
Context\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Property context\par
\f2\cf2\fs20\b0\i0 GetPropertyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Property han
dle\par
\f2\cf2\fs20\b0\i0 GetReadOnly\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is context set to read-only?\par
\f2\cf2\fs20\b0\i0 GetRefContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get r
eferenced context\par
\f2\cf2\fs20\b0\i0 GetResourceName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get resource name\par
\f2\cf2\fs20\b0\i0 GetSourceFiel
d\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get source field\par
\f2\cf2\fs20\b0\i0 HideInstance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Hide instance\par
\f2\cf2\fs20\b0\i0 IsEdit\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Can data b
e updated\par
\f2\cf2\fs20\b0\i0 IsHidden\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is instance hidden\par
\f2\cf2\fs20\b0\i0 IsReadOnly\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Has instance be
en set to read-only\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set key in instance area\par
\f2\cf2\fs20\b0\i0 SetReadOnly\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Set instance to read-only\par
\f2\cf2\fs20\b0\i0 SetRefContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set reference context\par
\f2\cf2\fs20\b0\i0 Set
Result\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set Result\par
\f2\cf2\fs20\b0\i0 SetTransactionError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set Transaction Error\par
\f2\cf2\fs20\b0\i0 Show
Instance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Show instannce\par
\f2\cf2\fs20\b0\i0 ~CTX_Structure\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Create an obje
ct description}}} 
{#{\footnote\plain{#}{.bvbpz}}} 
{K{\footnote\plain{K}{CTX_Structure:BuildObjDescription}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BuildObjDes
cription\tab -  Create an object description\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical BuildObjDescript
ion (PropertyHandle &templ_pi, logical html );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function provi
des a html or simple text description for the object that is con
structed according to a defined template that describes the elem
ents to be included into the object.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination co
de\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of 
normal termination the value is NO. When the function returns YE
S more detailed error information are available in the error obj
ect.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 templ_pi\tab - Template property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property han
dle refers to the template that is used for buildung the textual
 presentation of the object.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Prop
ertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 html\tab - HTML option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Indicates whether the description (te
xtual object presentatin) is to be provided in HTML format (YES)
 or not (NO).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Structure context constructor}}} 
{#{\footnote\plain{#}{.bvbqt}}} 
{K{\footnote\plain{K}{CTX_Structure:CT
X_Structure}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CTX_Structure\tab -  Structure context constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0         
                 CTX_Structure ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Duplicate instance}}} 
{#{\footnote\plain{#}{.bvbqu}}} 
{K{\footnote\plain{K}{CTX_S
tructure:CopyTo}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyTo\tab -  Duplicate instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CopyTo ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function duplicates an existing instance. Since specific copy 
rules must be implemented in several cases an overloaded specifi
c action can be defined in derived context classes. The function
 is not a virtual function and must be implemented as an action 
that can be called via the executeFunction function\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an err
or. In case of normal termination the value is NO. When the func
tion returns YES more detailed error information are available i
n the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Context type}}} 
{#{\footnote\plain{#}{.bvbqx}}} 
{K{\footnote\plain{K}{CTX_Structure:GetContex
tType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetContextType\tab -  Get Context type\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual CTX_Types GetConte
xtType ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the specific context type as CTX
_Structure.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Context type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The context type for the co
ntext class describes the application resource reflected by the 
context.\par
Default: CTXT_undefined\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Instance context}}} 
{#{\footnote\plain{#}{.bvbqz}}} 
{K{\footnote\plain{K}{CTX_Str
ucture:GetInstContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInstContext\tab -  Get Instance context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_S
tructure *GetInstContext ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the structure 
context for the instance that owns the current property (high st
ructure). This is not identical with the structure that owns the
 property. The instance owning the property is the instance that
 is stored in the database. Hence, the function goes up in the c
ontext hirarchy until it finds the context that referst to the i
nstance stored in the database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Structure Context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 St
ructure context for a property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  CTX_Structure\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get instance}}} 
{#{\footnote\plain{#}{ID_7gji05}}} 
{K{\footnote\plain{K}{CTX_Structure:GetInstanc
e}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInstance\tab -  Get instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl GetInstance   
                          ( DBField *co, DBField *retval, ParmLi
st *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance GetInstan
ce ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the instance for the  context.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the reference
d property handle (collection type). The instance contains a poi
nter to a properly structured instance area. \par
You can use the !-o
perator or the GetData() function to check whether the instance 
refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ge
t Key value}}} 
{#{\footnote\plain{#}{.bvbs1}}} 
{K{\footnote\plain{K}{CTX_Structure:GetKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetKey\tab -  Get Key value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char
 *GetKey ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function can be called when an instance is sel
ected in the property handle (PropertyHandle::IsSelected() ) or 
in the DBBeforeRead() event handler. The function returns the ke
y for the selcted instance in the internal key structure, when t
he collection is ordered or an empty key instance, when the coll
ection is not ordered or no instance is selected in the collecti
on.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal ke
y format. When necessary the key value can be converted from a s
tring into the internal format using the (.r pib.StringToKey*** 
ERROR : Chapter not found ***()) function. Regardles on the type
 key values are passed as (char *) areas.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide property handle
 for old instance}}} 
{#{\footnote\plain{#}{.bvbrs}}} 
{K{\footnote\plain{K}{CTX_Structure:GetOldField}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetOldField\tab -  Pr
ovide property handle for old instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle GetOldFiel
d ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns a froperty handle for the old instanc
e (as currently stored in the database, -> GetOldInstance()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Ret
urn value\tab - Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property handle refers to data and
 metadata of the selected property.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for
:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get old instance}}} 
{#{\footnote\plain{#}{.bvbrt}}} 
{K{\footnote\plain{K}{CTX_Structure:GetOldInsta
nce}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetOldInstance\tab -  Get old instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl GetOl
dInstance                          ( DBField *co, DBField *retva
l, ParmList *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  char *Get
OldInstance ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the "old instance" state as
 it is stored still in the database. This allows comparing old a
nd new values within the DBModify() or DBStore() handler.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Property context}}} 
{#{\footnote\plain{#}{.bvbru}}} 
{K{\footnote\plain{K}{CTX_Structure:GetPropContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Get
PropContext\tab -  Get Property context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual CTX_Property *GetPropC
ontext (char *w_fldnames=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the propert
y context for the property passed as name or property path. The 
property is searched in the structure associated with the contex
t.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the default property con
text or a user-defined context class instance for the property.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  CTX_Property\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_fldnames\tab -
 Property path or name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is passed as 0-terminate
d string. It may contain a property path that consists of a sequ
ence of property names. NULL is passed if no property name is av
ailable.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get Property handle}}} 
{#{\footnote\plain{#}{.bvbrv}}} 
{K{\footnote\plain{K}{CTX_Structure:GetPropertyHandle
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPropertyHandle\tab -  Get Property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual PropertyHandle *G
etPropertyHandle (char *fldname_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns th
e property handle associated for the structure. When a property 
name or path is passed to the function the property handle is se
arched in the structure. When no property name or path is passed
 the property handle the structure belongs to is returned.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Pointer to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually)
 opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Property
Handle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldname_w\tab - Property name or path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property nam
e is passed as 0-terminated string.\par
Default: ""\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is context set to 
read-only?}}} 
{#{\footnote\plain{#}{.bvbrw}}} 
{K{\footnote\plain{K}{CTX_Structure:GetReadOnly}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetReadOnly\tab -  Is contex
t set to read-only?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_DisplayState GetReadOnly ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n returns whether the context has been set to read-only (-> SetR
eadOnly()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data state is set to DSP_
disabled, when the context is set to read only.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get referenced co
ntext}}} 
{#{\footnote\plain{#}{.bvbrx}}} 
{K{\footnote\plain{K}{CTX_Structure:GetRefContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetRefContext\tab -  Get refere
nced context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_Structure *GetRefContext ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Some functions as 
Copy are setting a reference context. The reference context can 
be set also explicitly using the SetRefContext() function. The f
unction returns the reference context when it is set or NULL oth
erwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Structure Context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Structure context for a pr
operty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  CTX_Structure\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get r
esource name}}} 
{#{\footnote\plain{#}{.bvbry}}} 
{K{\footnote\plain{K}{CTX_Structure:GetResourceName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetResourceName\tab - 
 Get resource name\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual char *GetResourceName ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function
 returns the structure name as context specific resource name.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - Resource name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The resource name is passed as 0-termin
ated string with a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get source fi
eld}}} 
{#{\footnote\plain{#}{.bvbrz}}} 
{K{\footnote\plain{K}{CTX_Structure:GetSourceField}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSourceField\tab -  Get source
 field\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle GetSourceField ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Some functions as Copy 
are setting the property handle for the source during the action
 that refers to a source property handle. The function returns t
he source property handle when it is set or an empty property ha
ndle otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property handle 
refers to data and metadata of the selected property.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cl
ass definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Hide instance}}} 
{#{\footnote\plain{#}{.bvbt1}}} 
{K{\footnote\plain{K}{CTX_Struct
ure:HideInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HideInstance\tab -  Hide instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical HideInstanc
e ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function can be used in the structure context to exclu
de an instance from being selected in any property handle. Hidde
n instances will return NO when trying to lacate such an instanc
e using the Get() or another function to locate the instance. Po
sition() (or the ++ or -- operator) will skip hidden instances.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he state is typically set in the DBRead() handler. When resettin
g or changing the selection in the property handle the state is 
automatically reset. You may, however, reset the state explicite
ly using the ShowInstance() context function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function return
s the 'hidden' state as it was set before calling the function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the quest
ion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can data be 
updated}}} 
{#{\footnote\plain{#}{.bvbsu}}} 
{K{\footnote\plain{K}{CTX_Structure:IsEdit}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEdit\tab -  Can data be updated\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 vir
tual logical IsEdit ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether data can be 
updated in the instance selected for the property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question wa
s answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is instance hidden
}}} 
{#{\footnote\plain{#}{.bvbsv}}} 
{K{\footnote\plain{K}{CTX_Structure:IsHidden}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsHidden\tab -  Is instance hidden\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logica
l IsHidden ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Hidden instances are not selected when attempting
 to read them. The state can be set using the structure context 
function HideInstance() in a derived structure context. The func
tion returns YES, when the instance is hidden and NO otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the quest
ion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Has instance
 been set to read-only}}} 
{#{\footnote\plain{#}{.bvbsw}}} 
{K{\footnote\plain{K}{CTX_Structure:IsReadOnly}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsReadOnly\tab - 
 Has instance been set to read-only\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsReadOnly ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The f
unction returns whether the property handle has been set to read
-only for instances (-> SetReadOnly()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set key in 
instance area}}} 
{#{\footnote\plain{#}{.bvbsx}}} 
{K{\footnote\plain{K}{CTX_Structure:SetKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetKey\tab -  Set key in insta
nce area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetKey ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function can be called when an 
instance is selected in the property handle (PropertyHandle::IsS
elected()) or in the DBBeforeRead() event handler. The function 
moves the key to the property instance area for the key componen
ts. The function returns an error (YES), when the collection is 
not ordered or when no instance is selected in the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function ret
urns an error. In case of normal termination the value is NO. Wh
en the function returns YES more detailed error information are 
available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set instance to read-only}}} 
{#{\footnote\plain{#}{.bvbsy}}} 
{K{\footnote\plain{K}{CTX
_Structure:SetReadOnly}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetReadOnly\tab -  Set instance to read-only\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  lo
gical SetReadOnly (logical readonly );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows protec
ting an instance from being updated or remove the write protecti
on. The function can be called from within any structure context
 function or in relation with a structure context. The function 
will protect the current property handle and all subsequent hand
les, i.e. it works recursively. When resetting the read-only sta
te the function will not reset subsequent property handles that 
have been set explicitly to read-only. Setting the read-only sta
te for a property handle has the consequence that not only all s
ubordinated instaces are locked for writing but all subordinated
 collections as well, i.e. that the application cannot add or de
lete instances from subordinated property handles.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The read-only 
state is set for the property handle, i.e. after setting the rea
d only state all instances selected for the property handle are 
read-only until the state is reset by another context function c
all.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the current state for the property hand
le. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When changing the instance state for a property handle this 
will affect the write permission only, when being set before sel
ecting an instance in the Property handle. To activate the state
 for the instance currently selected the instance can be re-sele
cted (e.g. using .r PropertyHandle.Reset*** ERROR : Chapter not 
found ***()). Resetting the read-only state will not affect inst
ances that are write protected for other reasons and instances s
elected in other property handles, which have been set explicite
ly to 'read only' by the application.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rea
donly\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set reference context}}} 
{#{\footnote\plain{#}{.bvbsz}}} 
{K{\footnote\plain{K}{CTX_Structure:SetRefContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Set
RefContext\tab -  Set reference context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetRefContext (CTX_St
ructure *strctx );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows setting a reference contex
t  as link in another context e.g. to link structure contexts in
 a copy process. Only one context can be set as reference contex
t. Calling the function several times will overwrite the referen
ce context each time the function is called. When passing NULL a
s reference context the reference context will be reset.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return v
alue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns a
n error. In case of normal termination the value is NO. When the
 function returns YES more detailed error information are availa
ble in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strctx\tab - Structure Context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Struc
ture context for a property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for
:  CTX_Structure\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set Result}}} 
{#{\footnote\plain{#}{ID_7gji.5}}} 
{K{\footnote\plain{K}{CTX_Structure:SetResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetRes
ult\tab -  Set Result\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetResult (char *result_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion stores the result of a context function in the result area, 
which can be retrieved in the application using the PropertyHand
le::GetResult() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 result_string\tab - Result string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he result string can be a list of strings where strings are usua
lly separated by x01 characters. If there is only one string ret
urned the string is 0-terminated. Multiple strings are terminate
d with 0 after the last string in the list, which should be term
inated with x01 as well.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set Transaction Error}}} 
{#{\footnote\plain{#}{.bvbu1}}} 
{K{\footnote\plain{K}{CTX_Structure
:SetTransactionError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTransactionError\tab -  Set Transaction Error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 v
irtual void SetTransactionError ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function marks a transac
tion as errounus. This leads to a rollback of the transaction wh
en the transaction is finished. The function can be called in po
st handlers (as inserted or deleted) to undo the performed opera
tion.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Show instannce}}} 
{#{\footnote\plain{#}{.bvbts}}} 
{K{\footnote\plain{K}{CTX_Structure:ShowInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ShowInstance\tab -
  Show instannce\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ShowInstance ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The show instance func
tion resets the hidden state for an instance. Usually, the hidde
n state is reset automatically, when the selection in a property
 handle is changed.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the 'hidden' state as it
 was set before calling the function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he function returns YES when the question was answered positivly
. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvbtu}}} 
{K{\footnote\plain{K}{CTX_Structure:~CTX_Str
ucture}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~CTX_Structure\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual                        
 ~CTX_Structure ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function destroys the structure context.
 The function must be overloaded in an application specific impl
ementation of the structure context.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database Error Handle}}} 
{#{\footnote\plain{#}{.bvbux}}} 
{K{\footnote\plain{K}{D
BErrorHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DBErrorHandle\tab -  Database Error Handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The database er
ror handle provides extended documentation for errors detected i
n the system. In contrast to the basic ErrorHandle the DBErrorHa
ndle locates signaled errors in the system or application databa
se and provides detailled information for the error detected. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A 
application specific error handle can be defined and set for ena
bling application specific error handling (-> ErrorHandle).\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Prope
rties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DBErrorHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructoe\par
\f2\cf2\fs20\b0\i0 DisplayMessage\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Display 
message\par
\f2\cf2\fs20\b0\i0 GetError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get error text from resource database\par
\f2\cf2\fs20\b0\i0 GetErrorHe
lpID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get context help id for the error\par
\f2\cf2\fs20\b0\i0 GetObjectHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get reso
urce object handle\par
\f2\cf2\fs20\b0\i0 SetObjectHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set resource object handle\par
\f2\cf2\fs20\b0\i0 ~DB
ErrorHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Constructoe}}} 
{#{\footnote\plain{#}{.bvbuy}}} 
{K{\footnote\plain{K}{DBErrorHandle:DBErrorHan
dle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBErrorHandle\tab -  Constructoe\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          DBErrorHa
ndle (DBObjectHandle &object_handle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The cnstructor creates an 
error handle. The object_handle passed to the function should co
ntain the error descriptions in an extent as defined in the erro
r(s) that are handled by the error handler. For system errors th
is is a database object handle for the system database ode.sys. 
For application errors the resource database or dictionary shoul
d contain the error definitions. To activate an error handler fo
r the errors of a certain error class you can use the Error::Set
ErrorHandle() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 object_handle\tab - Database Object 
handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is a pointer to an opened Database Object handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Display message}}} 
{#{\footnote\plain{#}{.bvbuz}}} 
{K{\footnote\plain{K}{D
BErrorHandle:DisplayMessage}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisplayMessage\tab -  Display message\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtu
al logical DisplayMessage (Error *error_obj );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function displ
ays a message to the console or in a message box (when GUI-messa
ges are activated). Displaying messages can be supressed by sett
ing the SUPRESS_ERRORS system variable to "YES". Besides writing
 the message to the protocol file it will be displayed on consol
e (for console applications). This can be supressed by setting t
he system variable NO_CONSOLE_MESSAGES to "YES".\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Te
rmination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error.
 In case of normal termination the value is NO. When the functio
n returns YES more detailed error information are available in t
he error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_obj\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get error text from resourc
e database}}} 
{#{\footnote\plain{#}{C_dn64b}}} 
{K{\footnote\plain{K}{DBErrorHandle:GetError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetError\tab -  Get error text
 from resource database\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual char GetError (Error *error_obj, 
void *error_source );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function provides the error text stored
 in the resource data base passed as error_source or set as erro
r_source in the error object. This is usually the application re
source database that contains the error defintions in an extent 
with the name of the error class. The error text will be provide
d according to the language set in the error handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the er
ror is not found a message "Undefined error" containing the erro
r variables set is created. The function returns the error type 
as set in the error defintion.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_obj\tab -
 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_source\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get context help id for the error}}} 
{#{\footnote\plain{#}{.bvcw1}}} 
{K{\footnote\plain{K}{DBErrorHan
dle:GetErrorHelpID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetErrorHelpID\tab -  Get context help id for the e
rror\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual int32 GetErrorHelpID (Error *error_obj );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n returns a context help id for the error that can be used to ca
ll the online help for errors, that can be created using the ODA
BA design tools or by any other application. By default the erro
r context id is the resource id of the error definition.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return v
alue\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_obj\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get resource object handle}}} 
{#{\footnote\plain{#}{.bvcvs}}} 
{K{\footnote\plain{K}{DBErr
orHandle:GetObjectHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetObjectHandle\tab -  Get resource object ha
ndle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBObjectHandle &GetObjectHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns th
e database object handle for the error handle that has been set 
for error look up.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Database Object Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is th
e database object handle or the database handle when referring t
o the root object or the dictionary handle when referring to the
 root object of the dictionary database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definitio
n for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set resource object handle}}} 
{#{\footnote\plain{#}{.bvcvt}}} 
{K{\footnote\plain{K}{DBErrorHan
dle:SetObjectHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetObjectHandle\tab -  Set resource object handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
void SetObjectHandle (ACObject *obhandle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function sets the
 database object handle for the error handle that is used for er
ror look up.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle\tab - Database Object Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is th
e database object handle or the database handle when referring t
o the root object or the dictionary handle when referring to the
 root object of the dictionary database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definitio
n for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvcvu}}} 
{K{\footnote\plain{K}{DBErrorHandle:~DBErrorHand
le}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~DBErrorHandle\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual                         ~DB
ErrorHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function destroys the error handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Definitio
n for the internal presentation of property data}}} 
{#{\footnote\plain{#}{.bvcvz}}} 
{K{\footnote\plain{K}{DBFieldDef
}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DBFieldDef\tab -  Definition for the internal presentation of propert
y data\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The internal property definition contains all information 
available and necessary accessing data of the property. Among ba
sic information such as type and size it contains special ODABA2
 access information such as index and base collection definition
s.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Alls these information are used for reading and writing data j
ust as to execute operations on properties (see also ).\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Stru
ctures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 fmcb\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DBFieldDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 GetDBStruc
t\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Database structure definition\par
\f2\cf2\fs20\b0\i0 GetExtendName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetIndexDef\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsBaseCollection\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsPIHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsTyped\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetExtent\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_clst_table
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instances of property collection are stored in a cluster\par
\f2\cf2\fs20\b0\i0 get_cr
eate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Property is allowed to create new instances\par
\f2\cf2\fs20\b0\i0 get_depend\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Ins
tance(s) depends on the relationship\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 get_extend\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_gen_type\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ge
t_initval\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_inverse\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_inverse_name\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_mb_number\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_mul
tikey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_owning\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_privilege\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_static\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_transient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get
_update\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_version\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_virtual\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 get_weak_typed\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 se
t_initval\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ~DBFieldDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{con8q1.6u}}} 
{K{\footnote\plain{K}{DBFieldDef
:DBFieldDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBFieldDef\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          DBFi
eldDef (char *fldnames, char *fldtypes, SDB_RLEV fldreflev, uint
16 fldsize=1, uint16 fldprec=0, uint16 flddim=1, smcb *smcbptr, 
char *gentype, logical secrefr, char *extnames, char *irefname, 
DBIndex *indexptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          DBFieldDef (fmcb *f
mcbptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          DBFieldDef ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                
          DBFieldDef (Dictionary *dictptr, SDB_Reference *dbrptr
, smcb *smcbptr, DBIndex *indexptr, logical domopt, logical logr
efr, logical secrefr, logical depopt, char *extnames, char *iref
name );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0                          DBFieldDef (SDB_Property *dbyptr
, smcb *smcbptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldtypes\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldreflev\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See a
lso class definition for:  SDB_RLEV\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldsize\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldprec\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 flddim\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 smc
bptr\tab - Pointer to generel structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more 
general way to define structure (DBStructDef). It contains infor
mation for the structure and its properties. In contrast to the 
DBStructDef the smcb describes structure members regardless on t
he rule they may play in the structure.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition
 for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 gentype\tab - Generic type of property\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to a null-te
rminated string containing the generic type.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 secrefr\tab - Property is
 secundary referenced\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is pas
sed as 0-terminated string or as buffer with trailing blanks and
 a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 irefname\tab - Name of inverse pro
perty\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indexptr\tab - Index definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to an internal index defi
nition.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fmcbptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary h
andle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryHandle
\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbrptr\tab - ODABA2 reference definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to a reference defini
tion instance, stored in an ODABA2 data base.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defi
nition for:  SDB_Reference\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 domopt\tab - Property is dominant\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 logrefr\tab - P
roperty is a logical reference\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 depopt\tab - Property data depends on p
roperty\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbyptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get Database structure definition}}} 
{#{\footnote\plain{#}{.bvcnu}}} 
{K{\footnote\plain{K}{DBFieldDef
:GetDBStruct}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDBStruct\tab -  Get Database structure definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBSt
ructDef *GetDBStruct ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  DBStructDef *GetDBStruct (Dictionary *
dictptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  DBStructDef *GetDBStruct (Dictionary *dictptr, uint8 
schemaversion );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the database structure defi
nition for the field. When the field is not associated with a da
tabase definition or when the associated structure definition is
 an smcb, only, and not a database structure definition the func
tion returns 0.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBS
tructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is
 passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 schemave
rsion\tab - Scheme version\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Number of version for the scheme of data st
ructure definitions. \par
If the number is not known, it can be retri
eved from the  via the function .r ACObject.GetVersion*** ERROR 
: Chapter not found ***().\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bvcnv}}} 
{K{\footnote\plain{K}{DBFieldDef:GetExtendName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetExten
dName\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetExtendName ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ex
tent name is passed as 0-terminated string or as buffer with tra
iling blanks and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcnw}}} 
{K{\footnote\plain{K}{DBField
Def:GetIndexDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetIndexDef\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBIndex *GetIndexDef (int16 indx_p
os );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  DBIndex *GetIndexDef (char *keyname );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parame
ters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx_pos\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keyname\tab - Name of sort key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The order key name must b
e a key name defined for the given structure. The sort key is pa
ssed as 0-terminated string with maximum 40 characters.\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bvcoz}}} 
{K{\footnote\plain{K}{DBF
ieldDef:IsBaseCollection}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsBaseCollection\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsBaseCollec
tion (Dictionary *dictptr, char *strnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return
 value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered po
sitivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dictionary h
andle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure
 name is passed as 0-terminated string or as buffer with a maxim
um size of 40 characters and trailing blanks.\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bvcq1}}} 
{K{\footnote\plain{K}{DBFieldDef:Is
PIHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsPIHandle\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsPIHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termi
nation code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In
 case of normal termination the value is NO. When the function r
eturns YES more detailed error information are available in the 
error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcpv}}} 
{K{\footnote\plain{K}{DBFieldDef:IsTyped}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsTyped\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsTyped 
( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the 
question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q1.
9u}}} 
{K{\footnote\plain{K}{DBFieldDef:SetExtent}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetExtent\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetExtent (char *extn
ames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the fun
ction returns an error. In case of normal termination the value 
is NO. When the function returns YES more detailed error informa
tion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames\tab - Exten
t name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string or as buf
fer with trailing blanks and a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{I
nstances of property collection are stored in a cluster}}} 
{#{\footnote\plain{#}{con8q1.0u
}}} 
{K{\footnote\plain{K}{DBFieldDef:get_clst_table}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_clst_table\tab -  Instances of property 
collection are stored in a cluster\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_clst_table ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
is characteristic is of interest for reference collections, only
. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES, if all instances of the collection a
re stored in a cluster.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function re
turns YES when the question was answered positivly. Otherwise it
 returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Property is allowed to create new instances}}} 
{#{\footnote\plain{#}{.bvcrs}}} 
{K{\footnote\plain{K}{DBF
ieldDef:get_create}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_create\tab -  Property is allowed to create new
 instances\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_create ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This characteristic is of inte
rest for references and relationships, only. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function return
s YES, if  new instances can be created via this property.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question w
as answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance(s) depen
ds on the relationship}}} 
{#{\footnote\plain{#}{.bvcrt}}} 
{K{\footnote\plain{K}{DBFieldDef:get_depend}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_depend\tab -  In
stance(s) depends on the relationship\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_depend ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Thi
s characteristic is of interest for relationships, only. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fun
ction returns YES, if instances are deleted immedialety when rem
oving from the relationship.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Depending relationship
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value YES means that all instances referenced by the relatio
nship depends on the relationship and will be deleted, when they
 are removed from the relationship (see also .r SDB_Relationship
.depend*** ERROR : Chapter not found ***).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcrw}}} 
{K{\footnote\plain{K}{DBFieldDef:get_e
xtend}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_extend\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  const char *get_extend ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Exte
nt name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string or as bu
ffer with trailing blanks and a maximum length of 40 characters.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcrx}}} 
{K{\footnote\plain{K}{DBFieldDef:get_gen_type}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_gen_type\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  const char *get_gen
_type ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Generic type of property\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to a nul
l-terminated string containing the generic type.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcrz}}} 
{K{\footnote\plain{K}{DBFieldDef
:get_initval}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_initval\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  const char *get_initval ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{C_dn71b}}} 
{K{\footnote\plain{K}{DBFieldDef:get_inverse}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_inverse\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBFieldDef *get
_inverse ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvct1}}} 
{K{\footnote\plain{K}{DBFieldDef:get_inverse_name}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_
inverse_name\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  const char *get_inverse_name ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.
bvcsu}}} 
{K{\footnote\plain{K}{DBFieldDef:get_mb_number}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_mb_number\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 get_mb_numbe
r ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Main base number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Mainbase numbers from 0 to 2
52 (for small databases) and 0 to 32767 (for large databases) ar
e valid.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcsv}}} 
{K{\footnote\plain{K}{DBFieldDef:get_multikey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_multikey\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get
_multikey ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcsy}}} 
{K{\footnote\plain{K}{DBFieldDef:get_owning}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_ownin
g\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_owning ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8q1..u}}} 
{K{\footnote\plain{K}{DBFieldDef:ge
t_privilege}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_privilege\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PIADEF get_privilege ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return valu
e\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvctt}}} 
{K{\footnote\plain{K}{DBFieldDef:get_static}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_static\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_static (
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvctu}}} 
{K{\footnote\plain{K}{DBFieldDef:get_transient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_transient\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
logical get_transient ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvctv}}} 
{K{\footnote\plain{K}{DBFieldDef:get_upd
ate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_update\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_update ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvctw}}} 
{K{\footnote\plain{K}{DBFi
eldDef:get_version}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_version\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 get_version ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvctx}}} 
{K{\footnote\plain{K}{DBFieldDef:get_virtual}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_virtual\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_virt
ual ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvcty}}} 
{K{\footnote\plain{K}{DBFieldDef:get_weak_typed}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_weak_ty
ped\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical get_weak_typed ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvctz}}} 
{K{\footnote\plain{K}{DBFieldDef
:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator= (DBFieldDef &dbfield_re
f );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the functi
on returns an error. In case of normal termination the value is 
NO. When the function returns YES more detailed error informatio
n are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbfield_ref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bvcu
y}}} 
{K{\footnote\plain{K}{DBFieldDef:set_initval}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 set_initval\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void set_initval (char *in
it_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 init_string\tab - Initial value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The initial valu
e for the property is passed as 0-terminated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{co
n8q1_6u}}} 
{K{\footnote\plain{K}{DBFieldDef:~DBFieldDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~DBFieldDef\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0            
              ~DBFieldDef ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
value is YES if the function returns an error. In case of normal
 termination the value is NO. When the function returns YES more
 detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.b
vdps}}} 
{K{\footnote\plain{K}{DBFieldDef:fmcb}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcb\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  fmcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Da
tabase Object handle}}} 
{#{\footnote\plain{#}{.bvdqu}}} 
{K{\footnote\plain{K}{DBObjectHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DBObjectHandle\tab -  Databas
e Object handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Database object handles are necessary for accessi
ng data in an database object. A database object can be consider
ed as a database within a database. Each database has a root dat
abase object on top. Below each database object any number of su
bordinated database objects can be created. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Database objects in 
a database are logically separated but not physically. Thus, it 
becomes possible to establish links between structure instances 
in different database objects. Each database object has, however
, its own extents containing the global instances of the databas
e object. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The database object handle for the root database objec
t is part of the database handle (-> DatabaseHandle) and need no
t to be opened explicitly. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A database object handle is required 
for opening extent property handles for accessing structure inst
ances stored in extents.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The database object handle administrates
 transactions. Transactions can be started and stopped for each 
object handle. The database object handle is not thread save, i.
e. a database object handle must not be used simultaneously in d
ifferent threads. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The database object supports version slices, i
.e. each database object may have its own current version.\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base S
tructures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DBObjectHdl\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database object handle\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 database\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Database Handle\f2\cf2\fs20\b0\i0\ul0 \par
connection\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Client connection\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 BeginTransa
ction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Start transaction\par
\f2\cf2\fs20\b0\i0 ChangeTimeStamp\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Change time stamp for c
urrent version\par
\f2\cf2\fs20\b0\i0 Close\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close Object Handle\par
\f2\cf2\fs20\b0\i0 CommitTransaction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Commi
t transaction\par
\f2\cf2\fs20\b0\i0 DBObjectHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create an Database Object handle\par
\f2\cf2\fs20\b0\i0 Dis
ableEventHandling\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Disable event handling\par
\f2\cf2\fs20\b0\i0 EnableEventHandling\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 Ev
entHandling\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is event handling enabled?\par
\f2\cf2\fs20\b0\i0 ExecuteDBObjectAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Ex
ecute object context function\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ExtentExist\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Does Extent exist in d
atabase object\par
\f2\cf2\fs20\b0\i0 GetAccess\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get access mode for object handle\par
\f2\cf2\fs20\b0\i0 GetAct
ionResult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get result from last action executed\par
\f2\cf2\fs20\b0\i0 GetDBHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Prov
ide database handle\par
\f2\cf2\fs20\b0\i0 GetDictionary\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get dictionary handle\par
\f2\cf2\fs20\b0\i0 GetExtent
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide extent form Database Object\par
\f2\cf2\fs20\b0\i0 GetHighObject\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get parent o
bject\par
\f2\cf2\fs20\b0\i0 GetObject\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Database Object\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetStructDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get structure d
efinition\par
\f2\cf2\fs20\b0\i0 GetSystemVersion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get system version\par
\f2\cf2\fs20\b0\i0 GetTimeStamp\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get d
ate/time for version\par
\f2\cf2\fs20\b0\i0 GetVersion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get version number for the time 
point\par
\f2\cf2\fs20\b0\i0 IsClient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is database object client object?\par
\f2\cf2\fs20\b0\i0 IsOpened\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is dat
abase object opened?\par
\f2\cf2\fs20\b0\i0 IsValid\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is database object valid?\par
\f2\cf2\fs20\b0\i0 NewVersion
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create new version\par
\f2\cf2\fs20\b0\i0 Open\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open database object handle\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 RollBack\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 R
oll back transaction\par
\f2\cf2\fs20\b0\i0 SetActionResult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set result string\par
\f2\cf2\fs20\b0\i0 SetOverloa
d\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set object overload\par
\f2\cf2\fs20\b0\i0 SetServerVariable\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set system variable on 
server\par
\f2\cf2\fs20\b0\i0 SetVersion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set current version\par
\f2\cf2\fs20\b0\i0 VersionCount\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get number of
 versions\par
\f2\cf2\fs20\b0\i0 VersionIntervall\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get version interval\par
\f2\cf2\fs20\b0\i0 operator bool\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 DB
ObjectHandle opened?\par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Assigning a database object handl
e\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator==\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Are handles using the same access blocks?\par
\f2\cf2\fs20\b0\i0 ~DBObjectH
andle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Start transaction}}} 
{#{\footnote\plain{#}{.bvdqv}}} 
{K{\footnote\plain{K}{DBObjectHandle:BeginTran
saction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BeginTransaction\tab -  Start transaction\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 BeginTransacti
on (logical ext_TA=NO, int16 w_maxnum=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When starting a tra
nsaction all modification for the database are stored in a trans
action buffer. A transaction can start as an internal or externa
l transaction. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Internal transactions are used for small transact
ions upto 10000 updated database entries. Usually a small transa
ction takes just a few seconds. By defining a maximum buffer cou
nt for the transaction you can define a dynamical transaction bu
ffer for speeding up processes as copying data. In this case the
 transaction buffer will be cleared automatically when the buffe
r limit is reached.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 External transactions are stored in a transac
tion database which is created in a path defined in the TABASE s
ystem variable (or ini-file variable). External transactions are
 a little bit slower than internal ones but they are not limited
 in capacity. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Transactions can be nested. When starting a transa
ction while another transaction is running the new transaction c
reates a transaction within a transaction. The nesting level (>0
) is returned as transaction level. When the function returns 0 
the transaction could not be started. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Entries, wich are stored i
n a transaction are locked for other users until the top-transac
tion has been terminated. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Updates can be moved to the upper tran
saction or stored in the database using CommitTransaction(). Onl
y commiting the top transaction will store the updates to the da
tabase. Updates made within a transaction become visible in an u
pper transaction when the transaction is closed. They become vis
ible for other users when the top transaction is closed (CommitT
ransaction).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 RoleBack() can be used to undo all updates made with
in a transaction.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Transaction level\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The transaction 
level is usually 1.For nested transaction it corresponds to the 
nesting level.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ext_TA\tab - External transaction\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 YES must be 
passed to start the transaction as external transaction, i.e. al
l modification are stored to an external transaction base. Other
wise (NO) the transaction is started as internal transaction, i.
e. the modifications are stored in memory.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_maxnum\tab - Maximum numb
er of entries in transacktion (buffer size)\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The maximum number sh
ould be set to UNDEF (0) for indicating to save only the complet
e transaction. For defining a transaction buffer to optimize rea
d/write options use the maximum number of transaction buffer ent
ries (e.g. 300).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Change time stamp for current version}}} 
{#{\footnote\plain{#}{.bvdqw}}} 
{K{\footnote\plain{K}{DBObj
ectHandle:ChangeTimeStamp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ChangeTimeStamp\tab -  Change time stamp for
 current version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ChangeTimeStamp (uint16 version_nr=CUR_
VERSION, dttm timestamp=dttm() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Each version for a database obj
ect has a final time limit. As long as the time limit for the ve
rsion lies in the future you can change the version end by setti
ng a new time stamp. The new time stamp must always lie in the f
uture.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the func
tion returns an error. In case of normal termination the value i
s NO. When the function returns YES more detailed error informat
ion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Inte
rnal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created internally for ea
ch Active Object when creating a new version for the Database Ob
ject. Each version number is associated with a time stamp that d
efines the end of this version.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 timestamp\tab - Ti
mestamp\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A time stamp defines a time point by passing date and tim
e.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Close Object Handle}}} 
{#{\footnote\plain{#}{.bvdqx}}} 
{K{\footnote\plain{K}{DBObjectHandle:Close}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Close\tab -  Close Obj
ect Handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Close ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Closing the database object handle 
will reduce the use count for the access block. The database obj
ect access block is removed, when the use count becomes 0, i.e. 
when the last database object handle referring to this resource 
is closed or destroyed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Commit tr
ansaction}}} 
{#{\footnote\plain{#}{.bvdqy}}} 
{K{\footnote\plain{K}{DBObjectHandle:CommitTransaction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CommitTransaction
\tab -  Commit transaction\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CommitTransaction (int16 talevel=A
UTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function stores all changes made in the transaction to
 the higher transaction level. When terminating a transaction fo
r a given transaction level transactions on lower levels are com
mited as well.  In contrast to other functions CommitTransaction
 will not reset the error, i.e. after committing the transaction
 any error or warning set during the transaction is still set. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he function returns an error (YES), when the transaction could n
ot be stored because of an error. This may happen when a top tra
nsaction tries to write to the database or when the transaction 
has set an error within the transaction that does not allow stor
ing the transaction. In this case the error signaled while commi
tting the transaction will overwrite any previously set error.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Wh
en ppassing AUTO (-1) as transaction level, the current (last re
cently opened) transaction will be closed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Terminat
ion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In ca
se of normal termination the value is NO. When the function retu
rns YES more detailed error information are available in the err
or object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 talevel\tab - Transaction level\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The transaction le
vel is usually 1.For nested transaction it corresponds to the ne
sting level.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create an Database Object handle}}} 
{#{\footnote\plain{#}{con8q1_0u}}} 
{K{\footnote\plain{K}{DBObjectHan
dle:DBObjectHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBObjectHandle\tab -  Create an Database Object han
dle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          DBObjectHandle (DBHandle *dbhandle, 
PIACC accopt, uint16 version_nr=CUR_VERSION, ResourceTypes local
_ressources=RES_automatic );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          DBObjectHan
dle (DBObjectHandle &dbobject, int32 objid, PIACC accopt, uint16
 version_nr=CUR_VERSION, ResourceTypes local_ressources=RES_auto
matic );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          DBObjectHandle (DBObjectHandle 
&dbobject, char *objname, PIACC accopt, uint16 version_nr=CUR_VE
RSION, ResourceTypes local_ressources=RES_automatic );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0           
               DBObjectHandle (ODABAClient &odaba_client, char *
data_source_name, PIACC access_mode=PI_Read, ResourceTypes local
_ressources=RES_automatic );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          DBObjectHan
dle (const DBObjectHandle &obhandle_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                      
    DBObjectHandle (ACObject *acobject );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                        
  DBObjectHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a new database object 
handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is poi
nter to an opened database handle. The database handle can be an
 opened database handle DatabaseHandle as well as an opened dict
ionary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for: 
 DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines th
e way instances in a property handle are to be accessed (read, u
pdate, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers
 are created internally for each Active Object when creating a n
ew version for the Database Object. Each version number is assoc
iated with a time stamp that defines the end of this version.\par
Def
ault: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 local_ressources\tab - Resource type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Depending on the
 resource type the database or dictionary is opened on the clien
t or server side. \par
\f4\cf4\fs20\b\i0\ul0 RES_automatic\f2\cf2\fs20\b0\i0\ul0 \par
When a connection is opened to th
e server the dictionary is opened on the server side when passin
g a symbolic database path (like %DB_PATH%). When passing a dict
ionary path the dictionary is opened on the client side. When no
 connection is opened the dictionary or database will be opened 
on the client side. \par
\f4\cf4\fs20\b\i0\ul0 RES_local\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary or database will be 
opened on the client machine in any case. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 RES_server\f2\cf2\fs20\b0\i0\ul0 \par
The dictiona
ry or database will be opened on the server machine side in any 
case.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbobject\tab - Database Object handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 objid\tab - Local object identity (LOID)\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The local 
object identity is a 31-bit number that identifies an object ins
tance uniquely in a database. LOIDs are available only for indep
endently stored instances but not for instances of imbedded stru
ctures.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 objname\tab - Database object name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Database object name is pass
ed as 0-terminated string with maximum 40 charcters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 odaba_client
\tab - ODABA Client Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ODABA client handle can be passes as co
nnectet or ea empty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  ODABA
Client\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 data_source_name\tab - Data source name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source name is 
passed as 0-terminated string with a maximum length of 40 charac
ters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 access_mode\tab - Access mode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines the way i
nstances in a property handle are to be accessed (read, update, 
write).\par
Default: PI_Read\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle_refc\tab - Const reference to databas
e object handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference refers to an opened or not opened d
atabase object handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHa
ndle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 acobject\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Disable event handling}}} 
{#{\footnote\plain{#}{.bvdrt}}} 
{K{\footnote\plain{K}{DBObjectHandle:Disable
EventHandling}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisableEventHandling\tab -  Disable event handling\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void 
DisableEventHandling ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will disable external even
t handlingfor the database (object), i.e. events are not sent to
 external event handlers set for property handles or to the clie
nt.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvdru}}} 
{K{\footnote\plain{K}{DBObjectHandle:EnableEventHandling}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 EnableEventHandling\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void EnableEventHandling ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will enable external
 event handling for the database (object) after it has been disa
bled, i.e. events are sent again to external event handlers set 
for property handles or to the client.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is event handling enabled?
}}} 
{#{\footnote\plain{#}{.bvdrv}}} 
{K{\footnote\plain{K}{DBObjectHandle:EventHandling}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 EventHandling\tab -  Is event handl
ing enabled?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical EventHandling ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whet
her external events are enabled or not (see EnableEventHandling(
) and DisableEventHandling())\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The funct
ion returns YES when the question was answered positivly. Otherw
ise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Execute object context function}}} 
{#{\footnote\plain{#}{.bvdrw}}} 
{K{\footnote\plain{K}{DBObjectH
andle:ExecuteDBObjectAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecuteDBObjectAction\tab -  Execute objec
t context function\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ExecuteDBObjectAction (char *action_n
ame, char *parm_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function calls an action that is de
fined in the database object context. The function is executed  
on the server side first. If it was executed successfully, the f
unction is executed on the client side, too.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The action may use t
he SetActionResult() function to pass the result of the action t
o the client application. If execution of the function on the cl
ient side returns NO the result passed from the server overwrite
s any result set by the client function. The result can be retri
eved from the client application using the function GetActionRes
ult().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the func
tion returns an error. In case of normal termination the value i
s NO. When the function returns YES more detailed error informat
ion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action_name\tab - Nam
e of the action to be performed\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of the action is passed 
as 0-terminated string with a maximum length of 40 significant c
haracters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm_string\tab - Parameter string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The parameter string is p
assed as 0-terminated string and contains the parameters accordi
ng to the conventions of the action called.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Does Extent exist in 
database object}}} 
{#{\footnote\plain{#}{.bvdrx}}} 
{K{\footnote\plain{K}{DBObjectHandle:ExtentExist}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExtentExist\tab -  Doe
s Extent exist in database object\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ExtentExist (char *ext
names );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 An extent defined logically in the database schema need 
not exist in a database or database object. Extents are created 
in the database object automatically when accessing it the first
 time with write access. The function returns whether an extent 
has been already created in the given object (YES) or not (NO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the quest
ion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ex
tnames\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated str
ing or as buffer with trailing blanks and a maximum length of 40
 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get access mode for object handle}}} 
{#{\footnote\plain{#}{.bvdry}}} 
{K{\footnote\plain{K}{DBObjectHandl
e:GetAccess}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetAccess\tab -  Get access mode for object handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PIACC G
etAccess ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the access mode set for the ob
ject handle when opening it.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The acces
s option defines the way instances in a property handle are to b
e accessed (read, update, write).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get result from last action exe
cuted}}} 
{#{\footnote\plain{#}{.bvdrz}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetActionResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetActionResult\tab -  Get r
esult from last action executed\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetActionResult ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fu
nction returns the resultstring from the last action executed. T
he result string is available until the next action call, only. 
When the action does not return a result the function returns NU
LL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The result string can be a list of
 strings where strings are usually separated by x01 characters. 
If there is only one string returned the string is 0-terminated.
 Multiple strings are terminated with 0 after the last string in
 the list, which should be terminated with x01 as well.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide d
atabase handle}}} 
{#{\footnote\plain{#}{C_dn81b}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetDBHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDBHandle\tab -  Pro
vide database handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DatabaseHandle &GetDBHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n returns the database handle the for the database the reference
d database object belongs to.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to database h
andle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer to an opened database handle. The database 
handle can be an opened database handle DatabaseHandle as well a
s an opened dictionary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class 
definition for:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get dictionary handle}}} 
{#{\footnote\plain{#}{.bvdt1}}} 
{K{\footnote\plain{K}{DBObje
ctHandle:GetDictionary}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDictionary\tab -  Get dictionary handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Dict
ionaryHandle &GetDictionary ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the d
ictionary handle for the database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Dictionary handl
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition
 for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide extent form Database Object}}} 
{#{\footnote\plain{#}{.bvdss
}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetExtent}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetExtent\tab -  Provide extent form Database
 Object\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetExtent (int32 indx0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the 
name of the n-th extent in the list of extents that are allocate
d for the database object. The collection of allocated extents d
oes not necessarily include all defined extents. Extent names ar
e provided in alphabetic order. The first extent has the index 0
.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 After providing the last extent name the function returns NULL 
for the next extent name.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name is pa
ssed as 0-terminated string or as buffer with trailing blanks an
d a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in
 collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the collection addresses the first in
stance in the collection with 0. AUTO (-1) refers to an undefine
d position.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get parent object}}} 
{#{\footnote\plain{#}{.bvdsu}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetHighObject}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Ge
tHighObject\tab -  Get parent object\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBObjectHandle &GetHighObject ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the parent database object handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Database Object Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the database object handle 
or the database handle when referring to the root object or the 
dictionary handle when referring to the root object of the dicti
onary database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get
 Database Object}}} 
{#{\footnote\plain{#}{.bvdsv}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetObject}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetObject\tab -  Get Da
tabase Object\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetObject (int32 indx0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function return
s the name of the n-th database object in the list of sub-ordina
ted objects. Database object names are provided in alphabetic or
der. The first object has the index 0.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 After providing the last d
atabase object name the function returns NULL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data
base object name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Database object name is passed as buffer with 40
 charcters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position i
n the collection addresses the first instance in the collection 
with 0. AUTO (-1) refers to an undefined position.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get structure 
definition}}} 
{#{\footnote\plain{#}{.bvdsx}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetStructDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStructDef\tab -  Get st
ructure definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBStructDef *GetStructDef (char *strnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he function returns the structure definition for the structure n
ame passed. The structure definition is provided from the dictio
nary associated with the database object handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Po
inter to generel structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure definition (D
BStructDef) contains the metadata for the instance, i.e. informa
tion for the structure and its properties.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  DBStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The struc
ture name is passed as 0-terminated string or as buffer with a m
aximum size of 40 characters and trailing blanks.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get system vers
ion}}} 
{#{\footnote\plain{#}{.bvdsy}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetSystemVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSystemVersion\tab -  Get s
ystem version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetSystemVersion ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fiunction provides
 the schema version of the ODABA system, which is the dictionary
 for a dictionary.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Internal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version n
umbers are created internally for each Active Object when creati
ng a new version for the Database Object. Each version number is
 associated with a time stamp that defines the end of this versi
on.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get date/time for version}}} 
{#{\footnote\plain{#}{.bvdsz}}} 
{K{\footnote\plain{K}{DBObjectHa
ndle:GetTimeStamp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetTimeStamp\tab -  Get date/time for version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm G
etTimeStamp (uint16 version_nr=CUR_VERSION );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function return
s the termination time for the version number passed to the func
tion.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Timestamp\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A time stamp defines a time point by
 passing date and time.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal version nu
mber\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created internally for each Active Objec
t when creating a new version for the Database Object. Each vers
ion number is associated with a time stamp that defines the end 
of this version.\par
Default: CUR_VERSION\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get version number for the t
ime point}}} 
{#{\footnote\plain{#}{.bvdu1}}} 
{K{\footnote\plain{K}{DBObjectHandle:GetVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetVersion\tab -  Get version
 number for the time point\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetVersion (dttm timestamp=dtt
m() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the veriosn number that includes the 
passed time point.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Internal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version n
umbers are created internally for each Active Object when creati
ng a new version for the Database Object. Each version number is
 associated with a time stamp that defines the end of this versi
on.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 timestamp\tab - Timestamp\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A time stam
p defines a time point by passing date and time.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is database obje
ct client object?}}} 
{#{\footnote\plain{#}{.bvdts}}} 
{K{\footnote\plain{K}{DBObjectHandle:IsClient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsClient\tab -  Is data
base object client object?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsClient ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ret
urns, whether the database object has been created on the client
 side (YES) or not (NO). Database objects in local applications 
are both, client and server objects.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e function returns YES when the question was answered positivly.
 Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is database object opened?}}} 
{#{\footnote\plain{#}{.bvdtv}}} 
{K{\footnote\plain{K}{DBObjec
tHandle:IsOpened}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsOpened\tab -  Is database object opened?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Is
Opened ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the database object has 
been opened (YES) or not (NO), i.e. whether an access block is a
sociated with the handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function 
returns YES when the question was answered positivly. Otherwise 
it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is database object valid?}}} 
{#{\footnote\plain{#}{.bvdtx}}} 
{K{\footnote\plain{K}{DBObjectHandle:IsVa
lid}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsValid\tab -  Is database object valid?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsValid ( ) const
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the database object has been opene
d and whether the associated access block is valid (YES) or not 
(NO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the funct
ion returns an error. In case of normal termination the value is
 NO. When the function returns YES more detailed error informati
on are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Create new version}}} 
{#{\footnote\plain{#}{.bvdty}}} 
{K{\footnote\plain{K}{DBO
bjectHandle:NewVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 NewVersion\tab -  Create new version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Ne
wVersion (dttm timestamp=dttm(), uint16 version_nr=CUR_VERSION )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a new version slice for the database objec
t. The timestamp passed indicates, when the current version is t
o be closed and when the new version will start. You cannot defi
ne a timepoint in the passed for ctrating a new version, i.e. th
e time point must be 'now' (empty) or a value that is in the fut
ure.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 New versions can be created for databases enabled for worksp
aces only, when all workspaces are empty (consolidated or discar
ded).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the funct
ion returns an error. In case of normal termination the value is
 NO. When the function returns YES more detailed error informati
on are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 timestamp\tab - Timest
amp\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A time stamp defines a time point by passing date and time.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ve
rsion_nr\tab - Internal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created int
ernally for each Active Object when creating a new version for t
he Database Object. Each version number is associated with a tim
e stamp that defines the end of this version.\par
Default: CUR_VERSIO
N\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Open database object handle}}} 
{#{\footnote\plain{#}{.bvdtz}}} 
{K{\footnote\plain{K}{DBObjectHandle:Open}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Open\tab -  Open
 database object handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Open (DBHandle *dbhandle, PIACC 
accopt, uint16 version_nr=CUR_VERSION, ResourceTypes local_resso
urces=RES_automatic );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (DBObjectHandle &dbobject, i
nt32 objid, PIACC accopt, uint16 version_nr=CUR_VERSION, Resourc
eTypes local_ressources=RES_automatic );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (DBObjectH
andle &dbobject, char *objname, PIACC accopt, uint16 version_nr=
CUR_VERSION, ResourceTypes local_ressources=RES_automatic );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  log
ical Open (ODABAClient &odaba_client, char *data_source_name, PI
ACC access_mode=PI_Read, ResourceTypes local_ressources=RES_auto
matic );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function opens a database object handle. When an acc
ess block is opened for the object handle it will be closed befo
re.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the functio
n returns an error. In case of normal termination the value is N
O. When the function returns YES more detailed error information
 are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle\tab - Pointer t
o database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer to an opened database handle. T
he database handle can be an opened database handle DatabaseHand
le as well as an opened dictionary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines the way instances in a property handle
 are to be accessed (read, update, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal v
ersion number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created internally for each Act
ive Object when creating a new version for the Database Object. 
Each version number is associated with a time stamp that defines
 the end of this version.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 local_ressources\tab - R
esource type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Depending on the resource type the database or dicti
onary is opened on the client or server side. \par
\f4\cf4\fs20\b\i0\ul0 RES_automatic\f2\cf2\fs20\b0\i0\ul0 \par
When 
a connection is opened to the server the dictionary is opened on
 the server side when passing a symbolic database path (like %DB
_PATH%). When passing a dictionary path the dictionary is opened
 on the client side. When no connection is opened the dictionary
 or database will be opened on the client side. \par
\f4\cf4\fs20\b\i0\ul0 RES_local\f2\cf2\fs20\b0\i0\ul0 \par
The dic
tionary or database will be opened on the client machine in any 
case. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 RES_server\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary or database will be opened on the
 server machine side in any case.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbobject\tab - Database Object handl
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 objid\tab - Local obje
ct identity (LOID)\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The local object identity is a 31-bit number t
hat identifies an object instance uniquely in a database. LOIDs 
are available only for independently stored instances but not fo
r instances of imbedded structures.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 objname\tab - Database object name
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Database object name is passed as 0-terminated string with maxim
um 40 charcters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 odaba_client\tab - ODABA Client Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ODABA clien
t handle can be passes as connectet or ea empty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also 
class definition for:  ODABAClient\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 data_source_name\tab - Data source 
name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source name is passed as 0-terminated string with a
 maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 access_mode\tab - Access mode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The acc
ess option defines the way instances in a property handle are to
 be accessed (read, update, write).\par
Default: PI_Read\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Roll back tra
nsaction}}} 
{#{\footnote\plain{#}{.bvdv1}}} 
{K{\footnote\plain{K}{DBObjectHandle:RollBack}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 RollBack\tab -  Roll back transa
ction\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical RollBack (int16 talevel=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function discar
ds all changes made in the transaction. When terminating a trans
action for a given transaction level transactions all lower leve
ls are discarded as well. In contrast to other functions RollBac
k will not reset the error, i.e. after rolling back the transact
ion an error set during the transaction is still set. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on returns an error (YES), when the transaction could not be res
et because of an error. This may happen when some of the include
d access blocks could not be reset properly. In this case the er
ror signaled during roll back of transaction will overwrite an e
rror set during the transaction.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e value is YES if the function returns an error. In case of norm
al termination the value is NO. When the function returns YES mo
re detailed error information are available in the error object.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 talevel\tab - Transaction level\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The transaction level is usu
ally 1.For nested transaction it corresponds to the nesting leve
l.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set result string}}} 
{#{\footnote\plain{#}{.bvdut}}} 
{K{\footnote\plain{K}{DBObjectHandle:SetActionResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetAction
Result\tab -  Set result string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetActionResult (char *result_st
ring );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows setting a result string for the datab
ase object (or the database) handle. The result string can be re
trieved with the GetActionResult function. Thus you can pass the
 result of any action also to a client application while the act
ion is running on the server. The result is passed as string, i.
e. the result must not contain any 0-characters except the termi
nating 0.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 result_string\tab - Result string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The result string
 can be a list of strings where strings are usually separated by
 x01 characters. If there is only one string returned the string
 is 0-terminated. Multiple strings are terminated with 0 after t
he last string in the list, which should be terminated with x01 
as well.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set object overload}}} 
{#{\footnote\plain{#}{.bvduu}}} 
{K{\footnote\plain{K}{DBObjectHandle:SetOverload}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetOv
erload\tab -  Set object overload\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char SetOverload (logical overload_
opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function activates the object overload feature. When t
his option is activated, extents in the current database object 
will overload extents with the same name in parent objects. An e
xtent contains the objects from all instances allong the databas
e object hierarchy.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Overload option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this option
 is set to yes extents in a object hierarchy can be overloaded.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 P
arameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 overload_opt\tab - Overload option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this option is set to
 yes extents in a object hierarchy can be overloaded.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set system 
variable on server}}} 
{#{\footnote\plain{#}{.bvduv}}} 
{K{\footnote\plain{K}{DBObjectHandle:SetServerVariable}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetServe
rVariable\tab -  Set system variable on server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetServerVaria
ble (char *var_name, char *var_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Systemvariables can be s
et for the server. This is necessary for controlling functions r
unning on the server side.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Server variables are valid on the serv
er only for the connected client.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he value is YES if the function returns an error. In case of nor
mal termination the value is NO. When the function returns YES m
ore detailed error information are available in the error object
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 var_name\tab - System variable name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Name of the system vari
able on the server or client side. System variable names must no
t exceed 40 characters and are provided as 0-terminated strings.
\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 var_string\tab - Value for the system variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value for a system 
variable must not exceed 255 characters and is provided as 0-ter
minated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set current version}}} 
{#{\footnote\plain{#}{.bvdux}}} 
{K{\footnote\plain{K}{DBObjectHandle:SetVersio
n}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetVersion\tab -  Set current version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetVersion (uint16 ver
sion_nr=CUR_VERSION );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical SetVersion (dbdt date );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical 
SetVersion (dttm timestamp=dttm() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function sets the curren
t version slice that should be active when accessing instances i
n the object. Since the function may influence data selected in 
property handles all property handles should be saved and cancel
led before calling the function. Data might get incompatible whe
n accessing another version and must be refreshed if not cancell
ed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the functio
n returns an error. In case of normal termination the value is N
O. When the function returns YES more detailed error information
 are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Interna
l version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created internally for each 
Active Object when creating a new version for the Database Objec
t. Each version number is associated with a time stamp that defi
nes the end of this version.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date\tab - Date\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 timest
amp\tab - Timestamp\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A time stamp defines a time point by passing date 
and time.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get number of versions}}} 
{#{\footnote\plain{#}{.bvduy}}} 
{K{\footnote\plain{K}{DBObjectHandle:VersionCount
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 VersionCount\tab -  Get number of versions\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 VersionCount ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The
 function returns the number of versions defined for the databas
e object. The number is identical with the last version number d
efined for the database object. When no version has created for 
the database object the function returns 0.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Number 
of entries\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get version interval}}} 
{#{\footnote\plain{#}{.bvduz}}} 
{K{\footnote\plain{K}{DBObjectHandle:VersionInterv
all}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 VersionIntervall\tab -  Get version interval\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  INTERVAL(dttm) Versio
nIntervall (uint16 version_nr=CUR_VERSION );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns
 the version interval, i.e. the begin and end of the version sli
ce with the passed version number.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Time interval\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 time interval contains two timepoints (DATETIME) for begin and 
end of the time interval.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are cr
eated internally for each Active Object when creating a new vers
ion for the Database Object. Each version number is associated w
ith a time stamp that defines the end of this version.\par
Default: C
UR_VERSION\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{DBObjectHandle opened?}}} 
{#{\footnote\plain{#}{.bvew1}}} 
{K{\footnote\plain{K}{DBObjectHandle:operator bo
ol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator bool\tab -  DBObjectHandle opened?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  NOTYPE operator bool ( 
) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES (true) when the database object
 is opened and NO (false) when the database object is not opened
 or when an error had occured while constructing the dictionary 
handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Assigning a database object handle}}} 
{#{\footnote\plain{#}{.bvevt}}} 
{K{\footnote\plain{K}{DBO
bjectHandle:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  Assigning a database object han
dle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBObjectHandle &operator= (const DBObjectHandle &obhandle_re
fc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will close the odatabase object handle, when i
t is opened. The access block from the passed database object ha
ndle is associated with the current handle increasing the use co
unt by 1.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Database Object Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the databas
e object handle or the database handle when referring to the roo
t object or the dictionary handle when referring to the root obj
ect of the dictionary database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  D
BObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle_refc\tab - Const reference to databas
e object handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference refers to an opened or not opened d
atabase object handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHa
ndle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Are handles using the same access blocks?}}} 
{#{\footnote\plain{#}{.bvevu}}} 
{K{\footnote\plain{K}{DBObjectHandl
e:operator==}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator==\tab -  Are handles using the same access block
s?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator== (const DBObjectHandle &obhandle_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  lo
gical operator== (const DatabaseHandle &dbhandle_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical
 operator== (const DictionaryHandle &dictionary_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The opera
tor returns whether the handles refer to the same database objec
t, i.e. to the same access block.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he value is YES if the function returns an error. In case of nor
mal termination the value is NO. When the function returns YES m
ore detailed error information are available in the error object
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle_refc\tab - Const reference to database object han
dle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference refers to an opened or not opened database obje
ct handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle
_refc\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictionary_refc\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvevv}}} 
{K{\footnote\plain{K}{DBObjectHandle:~DBObject
Handle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~DBObjectHandle\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~DBOb
jectHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The destructor closes the database object handle.
 Closing the database object handle will reduce the use count. T
he internal resources, the database object access block is remov
ed, when the use count becomes 0, i.e. when the last database ob
ject handle referring to this resource is closed or destroyed.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Da
tabase object handle}}} 
{#{\footnote\plain{#}{.bvevz}}} 
{K{\footnote\plain{K}{DBObjectHandle:DBObjectHdl}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBObjectHdl\tab -
  Database object handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database Handle}}} 
{#{\footnote\plain{#}{.bvevx}}} 
{K{\footnote\plain{K}{DBObjectHandle:data
base}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 database\tab -  Database Handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 This points to the database handle
 for the database that owns the database object.\par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  DatabaseHandle\strike0\ul0 \par\pard\par
{${\footnote\plain{$}{Client connection}}} 
{#{\footnote\plain{#}{.bvevy}}} 
{K{\footnote\plain{K}{DBObjectHan
dle:connection}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 connection\tab -  Client connection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Points to the client
 server connection (if one has established).\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Definition for the i
nternal presentation of data structures and enumerations}}} 
{#{\footnote\plain{#}{.bvemv}}} 
{K{\footnote\plain{K}{DB
StructDef}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DBStructDef\tab -  Definition for the internal presentation 
of data structures and enumerations\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Definitions for data structur
es are usually read from an ODABA2 dictionary. However they can 
be provided and filled directly in main storage. Still in this c
ase the definition should be provided via Dictionary functions t
o make them available for the ODABA2 kernel.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 From an ODABA2 dicti
onary structures are provided only, if they are marked as checke
d and as ready for a non test environment.\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 StructD
ef\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DBStructDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 DisplayAlignInfo\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetAttrPath\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide path for the indexed attribute\par
\f2\cf2\fs20\b0\i0 GetEntry\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Pr
ovide DB-FieldDefinition entry\par
\f2\cf2\fs20\b0\i0 GetRefPath\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide path for the i
ndexed reference\par
\f2\cf2\fs20\b0\i0 GetSortKeySMCB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide key definition\par
\f2\cf2\fs20\b0\i0 GetStrDefV
ersion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide structure definition for a previous scheme versi
on\par
\f2\cf2\fs20\b0\i0 IsBasedOn\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is the data structure a specialization of another o
ne ?\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 get_attr_info\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide information about the attribibutes of
 the data structure\par
\f2\cf2\fs20\b0\i0 get_base_info\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide information about the 
base structures of the data structure\par
\f2\cf2\fs20\b0\i0 get_refr_info\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide info
rmation about the references of the data structure\par
\f2\cf2\fs20\b0\i0 get_rshp_info\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Provide information about the relationships of the data structu
re\par
\f2\cf2\fs20\b0\i0 get_sb_number\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide SubBase number\par
\f2\cf2\fs20\b0\i0 get_schema_ver\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide t
he scheme version\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ~DBStructDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{.bveot}}} 
{K{\footnote\plain{K}{DBStru
ctDef:DBStructDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBStructDef\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                       
   DBStructDef (char *strnames, int16 strsid, int32 intlen, int3
2 extlen, TYP_TYPES metatype, SDB_ST strtype, int16 basecount, i
nt16 attrcount, int16 refrcount, int16 rshpcount, char *idkeynam
es=NULL, logical w_vf_opt=NO, int16 w_schema_version=0, logical 
w_versioning=NO, logical glob_identity=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                     
     DBStructDef ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The struc
ture name is passed as 0-terminated string or as buffer with a m
aximum size of 40 characters and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strsid\tab - Interna
l structure number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Internal number identifying a data structure w
ithin a ODABA2 dictionary.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 intlen\tab - Internal length\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extlen\tab - Externa
l length\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 metatype\tab - Meta type for a type definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Via a structure
 definition can described a data structure, a basic data type or
 an enumeration.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  TYP_TYPES\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strtype
\tab - Structure meta type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_ST\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 basec
ount\tab - Number of base structures\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 attrcount\tab - Number of attributes\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 re
frcount\tab - Number of references\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rshpcount\tab - Number of relationships\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 i
dkeynames\tab - Name of the identifying key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to a null-terminat
ed string containing the ident key  name.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_vf_opt\tab - Consider virt
ual function pointer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_schema_version\tab - Scheme version\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Number of ve
rsion for the scheme the data structure definitions stands for.\par
I
f the number is not known, it can be retrieved from the  via the
 function .r ACObject.GetVersion*** ERROR : Chapter not found **
*().\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_versioning\tab - Consider online versioning for data\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 glob_identi
ty\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bveov}}} 
{K{\footnote\plain{K}{DBStructDef:DisplayAlignInfo}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisplayAlignInfo\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logica
l DisplayAlignInfo ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide p
ath for the indexed attribute}}} 
{#{\footnote\plain{#}{.bveoz}}} 
{K{\footnote\plain{K}{DBStructDef:GetAttrPath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetAtt
rPath\tab -  Provide path for the indexed attribute\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetAttrPath
 (int32 indx0, logical full_path, char *fld_path, int32 maxlen, 
logical with_generics=NO, logical search_in_sharebase=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The 
function retrieves the path for attributes with basic types, onl
y. Structured Attributes referenced directly (no pointers) such 
as base structures are resolved.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Generic attributes are considere
d as references in this case (see also \f4\cf4\fs20\b\i0\ul0 .r DBStructDef.GetRefPath
()*** ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0 ).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Position in c
ollection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Position the entry is located at. If the entry could no
t be locates its contains the number of entries for the data str
ucture.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in th
e collection addresses the first instance in the collection with
 0. AUTO (-1) refers to an undefined position.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 full_path\tab - Full pa
th\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The full path option is used to request the property path incl
uding base structure names. \par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fld_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 P
ointer to the buffer that is to receive the property path string
.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 maxlen\tab - Size of output buffer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Specifies the length of the buffer
, the information should be stored into. The information is trun
cated if it is longer than the buffer.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 with_generics\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 search_in_s
harebase\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide DB-FieldDefinition entry}}} 
{#{\footnote\plain{#}{ID_7gjl85}}} 
{K{\footnote\plain{K}{DBStructDef:G
etEntry}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetEntry\tab -  Provide DB-FieldDefinition entry\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBFieldDef *G
etEntry (char *fldnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  DBFieldDef *GetEntry (int16 sindex );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retrieves the definition for a property by name or 
position.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Using this function, only property definitions explicit
ely defined for this structure can be retrieved. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Use  \f4\cf4\fs20\b\i0\ul0 .r smcb.Se
archField()*** ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0  to retrieve a prope
rty from a base structure or from a structured attribute vie pat
h.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sindex\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide path for the
 indexed reference}}} 
{#{\footnote\plain{#}{.bvepy}}} 
{K{\footnote\plain{K}{DBStructDef:GetRefPath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetRefPath\tab -  Provi
de path for the indexed reference\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetRefPath (int32 indx0,
 logical full_path, char *fld_path, int32 maxlen, logical with_g
enerics=NO, logical search_in_sharebase=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retri
eves the path for references and relationships in base structure
s, for generic attributes attributes and for references and rela
tionships of the structure itself.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Position in coll
ection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Position the entry is located at. If the entry could not b
e locates its contains the number of entries for the data struct
ure.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the c
ollection addresses the first instance in the collection with 0.
 AUTO (-1) refers to an undefined position.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 full_path\tab - Full path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he full path option is used to request the property path includi
ng base structure names. \par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fld_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Poin
ter to the buffer that is to receive the property path string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ma
xlen\tab - Size of output buffer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Specifies the length of the buffer, t
he information should be stored into. The information is truncat
ed if it is longer than the buffer.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 with_generics\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 search_in_shar
ebase\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide key definition}}} 
{#{\footnote\plain{#}{ID_7gjl95}}} 
{K{\footnote\plain{K}{DBStructDef:GetSortKeySMCB
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSortKeySMCB\tab -  Provide key definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual smcb *GetSortKeyS
MCB (char *fldnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to generel structure
 definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way to define structure (D
BStructDef). It contains information for the structure and its p
roperties. In contrast to the DBStructDef the smcb describes str
ucture members regardless on the rule they may play in the struc
ture.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Pro
vide structure definition for a previous scheme version}}} 
{#{\footnote\plain{#}{.bver1}}} 
{K{\footnote\plain{K}{DBS
tructDef:GetStrDefVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStrDefVersion\tab -  Provide structure de
finition for a previous scheme version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBStructDef *GetStrDefVer
sion (Dictionary *dictptr, uint8 schemaversion );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function re
trieves the data structure definition valid for the given scheme
 version. Usually this structure definition is read from the dic
tionary. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If the scheme version is invalid the function returns N
ULL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is 
passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 schemaver
sion\tab - Scheme version\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Number of version for the scheme of data str
ucture definitions. \par
If the number is not known, it can be retrie
ved from the  via the function .r ACObject.GetVersion*** ERROR :
 Chapter not found ***().\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is the data structure a specialization 
of another one ?}}} 
{#{\footnote\plain{#}{ID_7gjl05}}} 
{K{\footnote\plain{K}{DBStructDef:IsBasedOn}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsBasedOn\tab -  Is the
 data structure a specialization of another one ?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsBase
dOn (char *strnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES, if the data stru
cture has a base structure of given type. The base structure is 
searched recursive.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function return
s YES when the question was answered positivly. Otherwise it ret
urns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure name is 
passed as 0-terminated string or as buffer with a maximum size o
f 40 characters and trailing blanks.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide information about th
e attribibutes of the data structure}}} 
{#{\footnote\plain{#}{.bvesv}}} 
{K{\footnote\plain{K}{DBStructDef:get_attr_i
nfo}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_attr_info\tab -  Provide information about the attribibutes of
 the data structure\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  MemberInfo &get_attr_info ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Information about attributes\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide information about the base s
tructures of the data structure}}} 
{#{\footnote\plain{#}{.bvesw}}} 
{K{\footnote\plain{K}{DBStructDef:get_base_info}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ge
t_base_info\tab -  Provide information about the base structures of t
he data structure\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  MemberInfo &get_base_info ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - In
formation about base structures\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide information about the ref
erences of the data structure}}} 
{#{\footnote\plain{#}{.bvesy}}} 
{K{\footnote\plain{K}{DBStructDef:get_refr_info}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_
refr_info\tab -  Provide information about the references of the data
 structure\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  MemberInfo &get_refr_info ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Informati
on about references\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide information about the relationships o
f the data structure}}} 
{#{\footnote\plain{#}{.bvesz}}} 
{K{\footnote\plain{K}{DBStructDef:get_rshp_info}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_rshp_info
\tab -  Provide information about the relationships of the data struc
ture\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  MemberInfo &get_rshp_info ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Information abo
ut relationships\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide SubBase number}}} 
{#{\footnote\plain{#}{ID_7gjl.5}}} 
{K{\footnote\plain{K}{DBStructDef:get_s
b_number}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_sb_number\tab -  Provide SubBase number\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 get_sb_numb
er ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Persistant instances of a data structure can be stored in
 a defined SubBase within the ODABA2 data base (see also \f4\cf4\fs20\b\i0\ul0 .r SDB_
ODABA_Str.sb_number*** ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0 ).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on retrieves the SubBase Number defined for the data structure.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Sub-base number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Sub-bases for a main base are number
ed contineously. The highest sub-base number is 255.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide the 
scheme version}}} 
{#{\footnote\plain{#}{.bveu1}}} 
{K{\footnote\plain{K}{DBStructDef:get_schema_ver}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 get_schema_ver\tab -  P
rovide the scheme version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 get_schema_ver ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
retrieves the scheme version of the data structure definition.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Us
ually this is the number of the project version, within the data
 structure was modified last time.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Scheme version\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Nu
mber of version for the scheme of data structure definitions. \par
If
 the number is not known, it can be retrieved from the  via the 
function .r ACObject.GetVersion*** ERROR : Chapter not found ***
().\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvetu}}} 
{K{\footnote\plain{K}{DBStructDef:~DBStructDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~DBStructDef\tab -  Destru
ctor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual                         ~DBStructDef ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bveuv}}} 
{K{\footnote\plain{K}{DBStr
uctDef:StructDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 StructDef\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database Events}}} 
{#{\footnote\plain{#}{.bvfw1}}} 
{K{\footnote\plain{K}{DB_Event}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DB_Even
t\tab -  Database Events\par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Database events are generated when the proces
s state of an instance or collection changes (e.g. open or read)
 or when general changes on an instance or collection are signal
ed. Database events are signaled, when performing special system
 actions as a requested action did not perform well (e.g. not de
leted).\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 There are three different groups of events. Pre-events or
 process events (DBP_...) are generated before running a request
ed action. When handling those events the event handler can retu
rn an error (YES) to abort the action. This allows checking the 
action to be performed. Post-events (DBO_...) are events that ar
e generated after performing the action. The return code from a 
post event is not checked by the system. Post-events allow appli
cation specific actions after the action has been performed. Err
or events (DBO_Not...) are signaled when the action aborted beca
use of the returncode of the pre-handler or because of an error.
 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Events are generated for instances and properties (collections,
 attributes). Database events can be handled by over loaded func
tions in the structure or property context, but also by means of
 property handle event handlers.\par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 DB_undefined\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Event is und
efined\par
\f2\cf2\fs20\b0\i0 DBO_Initialize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initializing an instance\par
\f2\cf2\fs20\b0\i0 DBO_Read\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Read eve
nt\par
\f2\cf2\fs20\b0\i0 DBO_Stored\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance stored\par
\f2\cf2\fs20\b0\i0 DBO_Inserted\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance inserted\par
\f2\cf2\fs20\b0\i0 DBO_
Removed\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance removed from collection\par
\f2\cf2\fs20\b0\i0 DBO_Deleted\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance d
eleted\par
\f2\cf2\fs20\b0\i0 DBP_Modify\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before Modify Instance\par
\f2\cf2\fs20\b0\i0 DBP_Insert\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before Inser
t Instance\par
\f2\cf2\fs20\b0\i0 DBP_Remove\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before Remove Instance\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 DBP_Delete\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before D
elete Instance\par
\f2\cf2\fs20\b0\i0 DBO_Opened\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance or property opened\par
\f2\cf2\fs20\b0\i0 DBO_Close\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Property or instance context closed\par
\f2\cf2\fs20\b0\i0 DBP_Create\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create Instance\par
\f2\cf2\fs20\b0\i0 DB
O_Created\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance created\par
\f2\cf2\fs20\b0\i0 DBP_Store\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Store Instance\par
\f2\cf2\fs20\b0\i0 DBO_NotCreat
ed\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 No instance created\par
\f2\cf2\fs20\b0\i0 DBO_NotInserted\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance not inserted\par
\f2\cf2\fs20\b0\i0 DBO
_NotOpened\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Context not opened\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 DBO_NotRemoved\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance not remov
ed\par
\f2\cf2\fs20\b0\i0 DBO_NotDeleted\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance not deleted\par
\f2\cf2\fs20\b0\i0 DBO_Refresh\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Refresh Event
\par
\f2\cf2\fs20\b0\i0 DBP_Open\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Opening instance or property context\par
\f2\cf2\fs20\b0\i0 DBP_Read\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Before R
ead Event\par
\f2\cf2\fs20\b0\i0 DBP_Select\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Select Instance\par
\f2\cf2\fs20\b0\i0 DBP_Unselect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Unselect insta
nce\par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data source}}} 
{#{\footnote\plain{#}{ID_7gjm85}}} 
{K{\footnote\plain{K}{DataSourceHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DataSourceHandle\tab -  Data s
ource\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A data source describes an ODABA data source on a certain l
evel (Dictionary, Database, DBObject, Extent, Instance). A data 
source can be parametrized by means of an INI-file. The INI file
 contains the names for the objects on the different levels. Not
 specified lower levels are not opened and have to be opened in 
the application (e.g. when defining only dictionary and database
 the extent is not opened and no instance is selected), The data
source is defined as section in the INI-file starting with the [
datasource name]. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A data source can be directed to a server. In 
this case the datasource has to be opened with a connected ODABA
 client or the INI-file must contain a server specification. In 
the last case the data source connects to the server automatical
ly when opening the data source. The connection is owned by the 
datasource in this case.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A data source cane be opened and closed 
as a whole (Open(), Close()) or separately on each definition le
vel (Connect(), OpenDictionary(), ...).\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 dictionary\strike0\ul0 \tab - \par
dbh
andle\strike0\ul0 \tab - \par
dict_path\strike0\ul0 \tab - \par
db_path\strike0\ul0 \tab - \par
accmode\strike0\ul0 \tab - \par
netopt\strike0\ul0 \tab - \par
object_handle\strike0\ul0 \tab - \par
objec
t_name\strike0\ul0 \tab - \par
extent_name\strike0\ul0 \tab - \par
inst_key\strike0\ul0 \tab - \par
transaction\strike0\ul0 \tab - \par
dcp_opt\strike0\ul0 \tab - \par
dbp_opt\strike0\ul0 \tab - \par
ob
j_opt\strike0\ul0 \tab - \par
ext_opt\strike0\ul0 \tab - \par
inst_opt\strike0\ul0 \tab - \par
str_opt\strike0\ul0 \tab - \par
struct_name\strike0\ul0 \tab - \par
acc_opt\strike0\ul0 \tab - \par
net_opt
\strike0\ul0 \tab - \par
dict_opened\strike0\ul0 \tab - \par
base_opened\strike0\ul0 \tab - \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 object_opened\strike0\ul0 \tab - \par
extent_opened\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functi
ons\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 BeginTransaction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Start transaktion for the data source\par
\f2\cf2\fs20\b0\i0 Close\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Close DataSourceHandle\par
\f2\cf2\fs20\b0\i0 CloseDBObject\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close DBObjectHandle\par
\f2\cf2\fs20\b0\i0 CloseD
atabase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close DatabaseHandle\par
\f2\cf2\fs20\b0\i0 CloseDictionary\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close DictionaryHa
ndle\par
\f2\cf2\fs20\b0\i0 CloseProperty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close PropertyHandle\par
\f2\cf2\fs20\b0\i0 CommitTransaction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Termin
ate transaction\par
\f2\cf2\fs20\b0\i0 Connect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Connect DataSourceHandle to server\par
\f2\cf2\fs20\b0\i0 DataSo
urceHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Construcktor\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Disconnect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Disconnect from server\par
\f2\cf2\fs20\b0\i0 GetCli
ent\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get client handle from data source\par
\f2\cf2\fs20\b0\i0 Open\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open DataSourceHand
le\par
\f2\cf2\fs20\b0\i0 OpenDBObject\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open DBObjectHandle\par
\f2\cf2\fs20\b0\i0 OpenDatabase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open DatabaseHa
ndle\par
\f2\cf2\fs20\b0\i0 OpenDictionary\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open DictionaryHandle\par
\f2\cf2\fs20\b0\i0 OpenProperty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open Prop
ertyHandle\par
\f2\cf2\fs20\b0\i0 RollBack\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Roll back modifications made in the transact
ion\par
\f2\cf2\fs20\b0\i0 SetDBObject\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set DBObjectHandle\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetDataSource\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set data source
 definitions\par
\f2\cf2\fs20\b0\i0 SetDatabase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set DatabaseHandle\par
\f2\cf2\fs20\b0\i0 SetDictionary\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set Di
ctionaryHandle\par
\f2\cf2\fs20\b0\i0 SetVariables\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set variables from INI-File\par
\f2\cf2\fs20\b0\i0 Setup\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Se
tup data source parameters\par
\f2\cf2\fs20\b0\i0 SetupVariables\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Setup data source vari
ables from INI-file\par
\f2\cf2\fs20\b0\i0 ~DataSourceHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Start transaktio
n for the data source}}} 
{#{\footnote\plain{#}{.bvfq1}}} 
{K{\footnote\plain{K}{DataSourceHandle:BeginTransaction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Begi
nTransaction\tab -  Start transaktion for the data source\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Beg
inTransaction (logical ext_ta=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Data sources provide simple t
ransaction control. Data source transactions cannot be nested, i
.e. when a transaction is running for the datasource no other tr
ansaction can be started. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Using nested transactions is possible 
with the DBObjectHandle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value 
is YES if the function returns an error. In case of normal termi
nation the value is NO. When the function returns YES more detai
led error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Paramete
rs\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ext_ta\tab - External Transaction\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates that updates 
made within the transaction should be stored on a disk. This opt
ion should be set when the transaction is a long transaction tha
t helds many (100 000) or more updates in the transaction.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Close 
DataSourceHandle}}} 
{#{\footnote\plain{#}{.bvfps}}} 
{K{\footnote\plain{K}{DataSourceHandle:Close}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Close\tab -  Close DataSo
urceHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Close ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The handles on all hierarchy levels
 (Dictionary to Extent) are closed when they are owned (opened) 
by the DataSourceHandle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value 
is YES if the function returns an error. In case of normal termi
nation the value is NO. When the function returns YES more detai
led error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Close DB
ObjectHandle}}} 
{#{\footnote\plain{#}{.bvfpt}}} 
{K{\footnote\plain{K}{DataSourceHandle:CloseDBObject}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CloseDBObject\tab -  
Close DBObjectHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CloseDBObject ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The DBObjectHandl
e and subsequent handles (PropertyHandles) are closed beginning 
with the lowest opened handle. Handles are closed only when they
 have been opened by the datasource handle. Property handles ope
ned by the application must be closed by the application before.
\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function r
eturns an error. In case of normal termination the value is NO. 
When the function returns YES more detailed error information ar
e available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Close DatabaseHandle}}} 
{#{\footnote\plain{#}{.bvfpu}}} 
{K{\footnote\plain{K}{DataSo
urceHandle:CloseDatabase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CloseDatabase\tab -  Close DatabaseHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  log
ical CloseDatabase ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The DatabaseHandle and subsequent handles
 (DBObjectHandle and PropertyHandle for Extents) are closed begi
nning with the lowest opened handle. Handles are closed only whe
n they have been opened by the datasource handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a data sou
rce transaction has is still running it will be commited.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns 
an error. In case of normal termination the value is NO. When th
e function returns YES more detailed error information are avail
able in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Close DictionaryHandle}}} 
{#{\footnote\plain{#}{.bvfpv}}} 
{K{\footnote\plain{K}{DataSourceH
andle:CloseDictionary}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CloseDictionary\tab -  Close DictionaryHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  lo
gical CloseDictionary ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The DictionaryHandle and subsequent ha
ndles for Database, DatabaseObject and Extent are closed beginni
ng with the lowest opened handle. Handles are closed only when t
hey have been opened by the datasource handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Term
ination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. I
n case of normal termination the value is NO. When the function 
returns YES more detailed error information are available in the
 error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Close PropertyHandle}}} 
{#{\footnote\plain{#}{.bvfpw}}} 
{K{\footnote\plain{K}{DataSourceHandle:ClosePr
operty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CloseProperty\tab -  Close PropertyHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CloseProperty
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The PropertyHandle for the defined extent is closed. Handle
s are closed only when they have been opened by the datasource h
andle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the func
tion returns an error. In case of normal termination the value i
s NO. When the function returns YES more detailed error informat
ion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Terminate transaction}}} 
{#{\footnote\plain{#}{.bvfp
x}}} 
{K{\footnote\plain{K}{DataSourceHandle:CommitTransaction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CommitTransaction\tab -  Terminate
 transaction\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CommitTransaction ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The datasource transa
ction it stopped and modifications are stored to the database. C
ommiting the data source transaction will commit all subsequent 
DBObjectHandle transactions that are still running.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an err
or. In case of normal termination the value is NO. When the func
tion returns YES more detailed error information are available i
n the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Connect DataSourceHandle to server}}} 
{#{\footnote\plain{#}{.bvfpy}}} 
{K{\footnote\plain{K}{DataS
ourceHandle:Connect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Connect\tab -  Connect DataSourceHandle to server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
logical Connect (ODABAClient &odaba_client );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function connec
ts the DataSourceHandle to a server. The server name (server_nam
e) and port number (port_number) must be defined in the DataSour
ceHandle before calling this function. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If no client object (odab
a_client) is passed a client object is created when a server is 
defined. If no server name is defined the function does not try 
to connect.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the
 function returns an error. In case of normal termination the va
lue is NO. When the function returns YES more detailed error inf
ormation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 odaba_clien
t\tab - ODABA Client Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ODABA client handle can be passes as c
onnectet or ea empty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  ODAB
AClient\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Construcktor}}} 
{#{\footnote\plain{#}{.bvfpz}}} 
{K{\footnote\plain{K}{DataSourceHandle:DataSourceHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DataSo
urceHandle\tab -  Construcktor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          DataSourceHand
le ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The constructor creates a DataSourceHandle. Before openei
ng a datasource database pathes and object and extent names have
 to be set. This can be done by explicitly setting the pathes an
d names in the programm or by means of an INI-file using the Set
upVariables() function..\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Disconnect from server}}} 
{#{\footnote\plain{#}{ID_7gjm95}}} 
{K{\footnote\plain{K}{DataSourc
eHandle:Disconnect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Disconnect\tab -  Disconnect from server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Di
sconnect ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function disconnects from the server. When the 
DataSourceHandle is still opened it is closed (Close()) before d
isconnecting. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Disconnecting will delete the ODABAClient when it 
has been created by the DataSourceHandle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Terminati
on code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In cas
e of normal termination the value is NO. When the function retur
ns YES more detailed error information are available in the erro
r object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get client handle from data source}}} 
{#{\footnote\plain{#}{.bvfr1}}} 
{K{\footnote\plain{K}{DataSourceHandl
e:GetClient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetClient\tab -  Get client handle from data source\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  ODABAC
lient &GetClient ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the client handle from
 the data source.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - ODABA Client Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ODABA clie
nt handle can be passes as connectet or ea empty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also
 class definition for:  ODABAClient\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open DataSourceHandle}}} 
{#{\footnote\plain{#}{.bvfqt}}} 
{K{\footnote\plain{K}{Da
taSourceHandle:Open}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Open\tab -  Open DataSourceHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Open (OD
ABAClient &odaba_client, PIACC acc_mod=PI_Read );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (
ODABAClient &odaba_client, char *ini_file, char *datasource_name
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (ODABAClient &odaba_client, char *datasource_na
me );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A Datasource consists of a Dictionary and a Database. In ad
dition a DatabaseObject and an Extent can be defined. The data s
ource can be closed using the function Close(). If a DataSourceH
andle is already opened this is closed before reopening the Data
SourceHandle with the current parameters.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The data source is defi
ned by means of external resource defintions in the DataSourceHa
ndle (server_name, dict_path, db_path, object_name, extent_name,
 inst_key).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the
 function returns an error. In case of normal termination the va
lue is NO. When the function returns YES more detailed error inf
ormation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 odaba_clien
t\tab - ODABA Client Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ODABA client handle can be passes as c
onnectet or ea empty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  ODAB
AClient\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 acc_mod\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines the way i
nstances in a property handle are to be accessed (read, update, 
write).\par
Default: PI_Read\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ini_file\tab - Application ini-file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ini-fil
e may contain several sections providing application or data sou
rce information. The path to the ini-file is passed as 0-termina
ted string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datasource_name\tab - Name of the data source\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of t
he data source defines the section in the INI-file or an entry i
n the data catalogue that contains the external data source defi
nitions.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Open DBObjectHandle}}} 
{#{\footnote\plain{#}{.bvfqu}}} 
{K{\footnote\plain{K}{DataSourceHandle:OpenDBObject}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Op
enDBObject\tab -  Open DBObjectHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBObjectHandle &OpenDBObject ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The DBObjectHandle is opened for the database object defined i
n the database path (object_name). The DatabaseHandle of the Dat
aSource must be opened before. If the DBObjectHandle is already 
opened it will be closed before opening the new DBObjectHandle (
CloseDBObject()). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the object name is empty the root object 
of the opened database is provided.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open DatabaseHa
ndle}}} 
{#{\footnote\plain{#}{.bvfqv}}} 
{K{\footnote\plain{K}{DataSourceHandle:OpenDatabase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenDatabase\tab -  Open Datab
aseHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DatabaseHandle &OpenDatabase ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The DatabaseHandle is
 opened for the database defined in the database path (db_path).
 The DictionaryHandle of the DataSource must be opened before. I
f the DatabaseHandle is already opened it will be closed before 
opening the new DatabaseHandle. (CloseDatabase()). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the data
base path is empty the opened DictionaryHandle is opened as Data
baseHandle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is point
er to an opened database handle. The database handle can be an o
pened database handle DatabaseHandle as well as an opened dictio
nary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  D
atabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open DictionaryHandle}}} 
{#{\footnote\plain{#}{.bvfqw}}} 
{K{\footnote\plain{K}{DataSourceHandle:OpenDic
tionary}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenDictionary\tab -  Open DictionaryHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DictionaryHandle &
OpenDictionary (PIACC accopt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The DictionaryHandle is opened on
ly when a dictionary path has been defined (dict_path). If anoth
er dictionary has already been opened it is closed (CloseDiction
ary()) before re-opening the DictionaryHandle. The DictionaryHan
dle is opened with the access mode passed to the function. When 
no database path (db_path) is defined and no access mode is pass
ed the DictionaryHandle is opened with the access mode defined f
or the database,\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened diction
ary handle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryH
andle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines th
e way instances in a property handle are to be accessed (read, u
pdate, write).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Open PropertyHandle}}} 
{#{\footnote\plain{#}{.bvfqx}}} 
{K{\footnote\plain{K}{DataSourceHandle:OpenProp
erty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenProperty\tab -  Open PropertyHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle *OpenPrope
rty (char *extname );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The PropertyHandle can be opened only when 
the DBObjectHandle is opened for the data source and an extent n
ame (extent_name) has been specified. If a  PropertyHandle is al
ready opened it will be closed (CloseProperty()) before re-open 
the handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointe
r to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definiti
on for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extname\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent 
name is passed as 0-terminated string or as buffer with trailing
 blanks and a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Roll back modifica
tions made in the transaction}}} 
{#{\footnote\plain{#}{.bvfqy}}} 
{K{\footnote\plain{K}{DataSourceHandle:RollBack}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Roll
Back\tab -  Roll back modifications made in the transaction\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical R
ollBack ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 All modification made since the transaction has been
 started are removed. The transaction is stopped. If there sur s
ubsequent transactions opened by DBObjectHandles those are close
d as well.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the 
function returns an error. In case of normal termination the val
ue is NO. When the function returns YES more detailed error info
rmation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set DBObjectHandle}}} 
{#{\footnote\plain{#}{.bvf
qz}}} 
{K{\footnote\plain{K}{DataSourceHandle:SetDBObject}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetDBObject\tab -  Set DBObjectHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  l
ogical SetDBObject (DBObjectHandle &ohandle, char *w_objname=NUL
L );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows setting an opened DBObjectHandle as DBOb
jectHandle for the DataSourceHandle. A DBObjectHandle set with t
his function is not closed when calling (CloseDBObject()). When 
the DataSourceHandle has already opened it will be closed (Close
DBObject()) before setting the new DBObjectHandle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an erro
r. In case of normal termination the value is NO. When the funct
ion returns YES more detailed error information are available in
 the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ohandle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_objname\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set data source 
definitions}}} 
{#{\footnote\plain{#}{ID_7gjm05}}} 
{K{\footnote\plain{K}{DataSourceHandle:SetDataSource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetDataSource\tab -
  Set data source definitions\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetDataSource (DataSourceH
andle *dbdefptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function sets the external and internal re
sources as copied from the passed data source handle. Opened int
ernal resources (access handle) will not be closed when closing 
or destructing the data source handle but when closing the origi
nal data source handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameter
s\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdefptr\tab - Data source handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source handle contains def
initions for external and internal resources (resource names and
 opened resource handles)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DataSou
rceHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set DatabaseHandle}}} 
{#{\footnote\plain{#}{.bvfs1}}} 
{K{\footnote\plain{K}{DataSourceHandle:SetDatabase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Set
Database\tab -  Set DatabaseHandle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetDatabase (DatabaseHandl
e &db_handle, char *w_basepath=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows settin
g an opened DatabaseHandle as DatabaseHandle for the DataSourceH
andle. When the DataSourceHandle has already an opened  Database
Handle this is closed (CloseDatabase()) before setting the handl
e passed to the function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A DatabaseHandle set with this function
 will not be closed when closing the data source or the database
 handle (Close(), CloseDatabase()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination cod
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of n
ormal termination the value is NO. When the function returns YES
 more detailed error information are available in the error obje
ct.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 db_handle\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointe
r to an opened database handle. The database handle can be an op
ened database handle DatabaseHandle as well as an opened diction
ary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Da
tabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_basepath\tab - Path for the opened database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The p
ath for the opened database handle can be passed to set the orig
inal database path in the data source.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set DictionaryHandle}}} 
{#{\footnote\plain{#}{.bvfrs
}}} 
{K{\footnote\plain{K}{DataSourceHandle:SetDictionary}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetDictionary\tab -  Set DictionaryHand
le\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetDictionary (Dictionary *dictptr, char *w_dictpath=
NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows setting an opened DictionaryHandle as
 DictionaryHandle for the DataSourceHandle. A DictionaryHandle s
et with this function is not closed when calling (CloseDictionar
y()). If the DataSourceHandle has already an opened  DictionaryH
andle it will be closed (CloseDictionary()) before setting the n
ew handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the 
function returns an error. In case of normal termination the val
ue is NO. When the function returns YES more detailed error info
rmation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dic
tionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_dictpath\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set variables fr
om INI-File}}} 
{#{\footnote\plain{#}{.bvfrt}}} 
{K{\footnote\plain{K}{DataSourceHandle:SetVariables}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetVariables\tab -  Set
 variables from INI-File\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetVariables (char *datasource_
name );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function Initializes the DataSourceHandle from the da
ta source section in the INI-file.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The data source variables must
 be defined in a section [datasource_name] in the INI-file. This
 section may contain the following variables:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 ODABA_SERVER=server
_name\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The server_location specifies the server name ( e.g. ODABAS
erver1). When no server is specified the resources are supposed 
to be available locally. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 ODABA_SERVER_PORT=server_port\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The port n
umber must be the same that has been used for starting the serve
rs (default is 6123).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 DICTIONARY=dict_path\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This variable defines t
he resource database (dictionary). This variable is mandatory. T
he value may refer to a server variable that defines the path on
 the server. Server variables must be enclosed in % characters (
e.g. %DICT_PATH%).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 DATABASE=db_path\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This variable defines the comp
lete path to the database that contains the application data. Th
e value may refer to a server variable that defines the path on 
the server. Server variables must be enclosed in % characters (e
.g. %DB_PATH%).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 WORKSPACE=workspace\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the workspace feature is 
enabled for the database a workspace can be defined as active wo
rkspace for the data source by passing a workspace name or a wor
kspace path.. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 OBJECT=object_name\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The name of database object must
 be specified if a sub object space in the database is to be ope
ned..\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 EXTENT=extent_name\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Name of an extent when the DataSource ref
ers to a certain collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 STRUCTURE=struct_name\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The structure 
name is used in some cases for performing metadata operetions (e
.g. copying a structure definition to another dictionary). It is
 has no direct influence on the data source but can be retrieved
 from the application. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 SCHEMA_VERSION=schema_version\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Schema versi
on when the application should be opened with an older version (
not the current version) of the dictionary (resource database). 
When no schema version or AUTO is passed the database will be op
ened with the current schema version.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 VERSION=version  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Version nu
mber for the database object (DBObject) when the database object
 should be opened with an older (not the current) version. When 
no version number or AUTO is passed the database will be opened 
with the current version.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 ONLINE_VERSION=online_version \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This opti
on activates online-versioning (YES) when the database schema ha
s been changed. When not using online version feature (NO) the d
atabase has to be reorganized before a new schema version can be
 used. Default is NO.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 NET=netopt     \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When opening a data source i
n local or file server mode (no server defined) this option can 
be defined in Windows environments to share the database with ot
her applications. Default is NO.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 ACCESS_MODE=accmode\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This variable
 has to be defined for accessing the database in write mode (Wri
te).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 DISABLE_CONTEXT=sys_appl\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This option allows deactivating the 
database context defined fpr the project, i.e. the logical consi
stency or busines rules defined by teh application. This is usef
ul e.g. for maintenance or reorganisation processes. Default is 
NO.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Alternatively to the ini-file definitions tha data source can
 be described in a data catalogue. In this case you can refer to
 the data catalogue, instead using the inivariable\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 DATA_SOURCE=da
ta_source\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Data source refers to the data source to be opened in t
he file catalogue. Usually this is teh same name as the data sou
rce name passed to the function, but it is also possible to refe
r to another name in this place.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e value is YES if the function returns an error. In case of norm
al termination the value is NO. When the function returns YES mo
re detailed error information are available in the error object.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datasource_name\tab - Name of the data source\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of th
e data source defines the section in the INI-file or an entry in
 the data catalogue that contains the external data source defin
itions.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Setup data source parameters}}} 
{#{\footnote\plain{#}{.bvfru}}} 
{K{\footnote\plain{K}{DataSourceHandle:Setup}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 S
etup\tab -  Setup data source parameters\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Setup (char *ini_fil
e, char *datasource_name );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function updates the external res
ource references from the ini-file and/or the data catalogue. Th
e ini-file passed to the function is set as current ini-file for
 the data source. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 External definitions are copied from the ini-f
ile or data catalogue section according to the passed datasource
_name into the data source.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The val
ue is YES if the function returns an error. In case of normal te
rmination the value is NO. When the function returns YES more de
tailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ini_file\tab - Application ini-file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ini-file may contain seve
ral sections providing application or data source information. T
he path to the ini-file is passed as 0-terminated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datasou
rce_name\tab - Name of the data source\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of the data source def
ines the section in the INI-file or an entry in the data catalog
ue that contains the external data source definitions.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Setup data
 source variables from INI-file}}} 
{#{\footnote\plain{#}{.bvfrv}}} 
{K{\footnote\plain{K}{DataSourceHandle:SetupVaria
bles}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetupVariables\tab -  Setup data source variables from INI-file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  l
ogical SetupVariables (char *datasource_name );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function trie
s to initialize the data source parameters from a section define
d in the ini-file. If no such section is defined or the section 
refers to a data source in the catalogue the function tries to s
etup the variables from the corresponding catalogue entry.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns
 an error. In case of normal termination the value is NO. When t
he function returns YES more detailed error information are avai
lable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datasource_name\tab - Name of the
 data source\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of the data source defines the section in t
he INI-file or an entry in the data catalogue that contains the 
external data source definitions.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvfrw}}} 
{K{\footnote\plain{K}{DataSourceHandl
e:~DataSourceHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~DataSourceHandle\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                
          ~DataSourceHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Destructing the datasource will 
close all handles that are not yet closed. When a data source tr
ansaction is still running this will be comitted before destroyi
ng the data source. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When working with recovery file thsi is clos
ed as well.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfrx}}} 
{K{\footnote\plain{K}{DataSourceHandle:dictionary}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dictionary\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfry}}} 
{K{\footnote\plain{K}{D
ataSourceHandle:dbhandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dbhandle\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfrz}}} 
{K{\footnote\plain{K}{DataSourceHandle:dict_p
ath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dict_path\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{C_dn01b}}} 
{K{\footnote\plain{K}{DataSourceHandle:db_path}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 db_path\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvft1}}} 
{K{\footnote\plain{K}{Da
taSourceHandle:accmode}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 accmode\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfss}}} 
{K{\footnote\plain{K}{DataSourceHandle:netopt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 net
opt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfst}}} 
{K{\footnote\plain{K}{DataSourceHandle:object_handle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 object_handle\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfsu
}}} 
{K{\footnote\plain{K}{DataSourceHandle:object_name}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 object_name\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfsv}}} 
{K{\footnote\plain{K}{DataSourceHandle
:extent_name}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 extent_name\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfsw}}} 
{K{\footnote\plain{K}{DataSourceHandle:inst_key}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 inst_ke
y\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfsx}}} 
{K{\footnote\plain{K}{DataSourceHandle:transaction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 transaction\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfsy}}} 
{K{\footnote\plain{K}{DataSo
urceHandle:dcp_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dcp_opt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfsz}}} 
{K{\footnote\plain{K}{DataSourceHandle:dbp_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dbp_op
t\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{ID_7gjm.5}}} 
{K{\footnote\plain{K}{DataSourceHandle:obj_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 obj_opt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfu1}}} 
{K{\footnote\plain{K}{DataSourceH
andle:ext_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ext_opt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfts}}} 
{K{\footnote\plain{K}{DataSourceHandle:inst_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 inst_opt\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvftt}}} 
{K{\footnote\plain{K}{DataSourceHandle:str_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 str_opt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvftu}}} 
{K{\footnote\plain{K}{DataSourceHandle:
struct_name}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 struct_name\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvftv}}} 
{K{\footnote\plain{K}{DataSourceHandle:acc_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 acc_opt\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvftw}}} 
{K{\footnote\plain{K}{DataSourceHandle:net_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 net_opt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvftx}}} 
{K{\footnote\plain{K}{DataSourceHandle:
dict_opened}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dict_opened\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvfty}}} 
{K{\footnote\plain{K}{DataSourceHandle:base_opened}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 base_
opened\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvftz}}} 
{K{\footnote\plain{K}{DataSourceHandle:object_opened}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 object_opened\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{ID_
7gjm_5}}} 
{K{\footnote\plain{K}{DataSourceHandle:extent_opened}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 extent_opened\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{ODABA data t
ypes}}} 
{#{\footnote\plain{#}{.bvfut}}} 
{K{\footnote\plain{K}{DataTypes}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DataTypes\tab -  ODABA data types\par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 CHAR\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Chara
cter\par
\f2\cf2\fs20\b0\i0 CCHAR\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Coded character\par
\f2\cf2\fs20\b0\i0 STRING\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 String character\par
\f2\cf2\fs20\b0\i0 MEMO\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Memo cha
racter\par
\f2\cf2\fs20\b0\i0 INT\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Signed integer or decimal number\par
\f2\cf2\fs20\b0\i0 UINT\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Unsigned intege
r or decimal number\par
\f2\cf2\fs20\b0\i0 REAL\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Float point number\par
\f2\cf2\fs20\b0\i0 LOGICAL\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Logical fiel
d\par
\f2\cf2\fs20\b0\i0 DATE\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Date\par
\f2\cf2\fs20\b0\i0 TIME\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Time\par
\f2\cf2\fs20\b0\i0 DATETIME\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Timestamp\par
\f2\cf2\fs20\b0\i0 VOID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Unknown type\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 BIT\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{D
atabase Handle}}} 
{#{\footnote\plain{#}{.bvgvx}}} 
{K{\footnote\plain{K}{DatabaseHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 DatabaseHandle\tab -  Database Hand
le\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Database handle must be created for accessing data in an ODABA
 database. An ODABA database must be connected with a dictionary
, which defines the object model for the database. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Each ODABA da
tabase consists of at least one Database Object (Root Object) th
at is the owner od extents and other data collections. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 When crea
ting a database handle the object handle this is based on a data
base object handle (-> DBObjectHandle) for the root object, i.e.
 the database handle inherits all the functionality from the dat
abase object handle. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A database may consists of a number of phys
ical separated mainbases, sub-bases and data areas. This is, how
ever, handles internally after creating the database. For creati
ng a multiple resource database the database handle provides sev
eral functions for initializing main and sub bases and data area
s. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Moreover, the database handle provides log and recovery featu
res, that allow logging all changes made on the database or reco
vering the database in case of errors. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The workspace feature sup
ported by the database handle is a sort of persistent transactio
ns. It allows storing changes for a longer period outside the da
tabase and consolidating or discarding changes when requested by
 the user.\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DBObjectHandle\strike0\ul0 \tab - \par
DatabaseHdl\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database H
andle\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 dictionary\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Dictionary handle\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ActivateSha
dowBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Activate Shadow Database\par
\f2\cf2\fs20\b0\i0 ChangeRecovery\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Enable/disable 
recovery support\par
\f2\cf2\fs20\b0\i0 CheckLicence\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check Application License\par
\f2\cf2\fs20\b0\i0 CloseReco
very\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close recovery file\par
\f2\cf2\fs20\b0\i0 CloseWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close Workspace\par
\f2\cf2\fs20\b0\i0 Consolid
ateWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Consolidate Workspace\par
\f2\cf2\fs20\b0\i0 DatabaseHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Konstructor\par
\f2\cf2\fs20\b0\i0 De
activateShadowBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Deactivate Shadow Database\par
\f2\cf2\fs20\b0\i0 DeleteWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 D
elete workspace\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DisableWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Disabeling workspace feature\par
\f2\cf2\fs20\b0\i0 Dis
cardWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Discard Workspace\par
\f2\cf2\fs20\b0\i0 EnableWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Enable workspac
e feature\par
\f2\cf2\fs20\b0\i0 ExecuteDatabaseAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute action on database level
\par
\f2\cf2\fs20\b0\i0 ExistWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Exist workspace?\par
\f2\cf2\fs20\b0\i0 GetDatabaseID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get database reso
urce number\par
\f2\cf2\fs20\b0\i0 GetPath\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get path for the opened database\par
\f2\cf2\fs20\b0\i0 GetRecoveryF
ile\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide name of recovery file\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetRecoveryNum\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide reacov
ery number\par
\f2\cf2\fs20\b0\i0 GetRecoveryPath\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide path for recovery folder\par
\f2\cf2\fs20\b0\i0 GetSc
hemaVersion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get schema version\par
\f2\cf2\fs20\b0\i0 GetSystemVersion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get system vers
ion\par
\f2\cf2\fs20\b0\i0 GetVersionString\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide database version\par
\f2\cf2\fs20\b0\i0 GetWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get w
orkspace names\par
\f2\cf2\fs20\b0\i0 IgnoreWriteProtect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Ignor permanent write protecti
on\par
\f2\cf2\fs20\b0\i0 InitDataArea\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initialise DataArea\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 InitMainBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initialize main
 base\par
\f2\cf2\fs20\b0\i0 InitRecovery\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initialise recovery file\par
\f2\cf2\fs20\b0\i0 InitSubBase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initiali
se sub-base\par
\f2\cf2\fs20\b0\i0 IsLicenced\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is database licensed\par
\f2\cf2\fs20\b0\i0 IsShared\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is database
 shared by several users\par
\f2\cf2\fs20\b0\i0 LocateWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate an existing Work
space\par
\f2\cf2\fs20\b0\i0 Open\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Opening a database handle\par
\f2\cf2\fs20\b0\i0 OpenRecovery\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open recovery 
file\par
\f2\cf2\fs20\b0\i0 OpenWorkspace\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open Workspace\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 RecreateExtent\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Recreate Index 
for an extent\par
\f2\cf2\fs20\b0\i0 operator bool\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Database handle opened?\par
\f2\cf2\fs20\b0\i0 operator!=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 C
ompare database handles\par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Assignment operator\par
\f2\cf2\fs20\b0\i0 ~DatabaseHa
ndle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructur\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Activate Shadow Database}}} 
{#{\footnote\plain{#}{.bvgvy}}} 
{K{\footnote\plain{K}{DatabaseHandle:Act
ivateShadowBase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ActivateShadowBase\tab -  Activate Shadow Database\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  log
ical ActivateShadowBase ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When running a shadow database (e.g.
 when worspace support is enabled) you might want to read inform
ation from the shadow database rather than from the original dat
abase. Since the shadow database contains the information includ
ing all updates made in workspeces and not yet published, the sh
adow database is the only place where logical consistency checks
 can be made. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function switches from the original database t
o the shadow database and allows reading from the shadow databas
e, i.e. all read operations are directed to the shadow database 
instead of the original database. This funktion has no effect wh
en the shadow database feature is not enabled.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the shadow da
tabase is activated restricted updates are possible on instances
 (you may not change properties that are referenced as key compo
nents). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 After performing the checking or other tasks you must de
activate the shadow database (DeactivateShadowBase()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an 
error. In case of normal termination the value is NO. When the f
unction returns YES more detailed error information are availabl
e in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Enable/disable recovery support}}} 
{#{\footnote\plain{#}{.bvgvz}}} 
{K{\footnote\plain{K}{Datab
aseHandle:ChangeRecovery}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ChangeRecovery\tab -  Enable/disable recovery
 support\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ChangeRecovery (RecoveryType rec_type, char *re
c_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function allows you to enable or disable the recov
ery support for the opened database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 To disable the recovery sup
port you can pass 'RECOVERY_none' as recovery type. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 To enable re
cobery support you can pass 'RECOVERY_full' or 'RECOVERY_transac
tion'. You should enable the recovery support immediately after 
the latest backup.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rec_
type\tab - Type of recovery support\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rec_path\tab - Folder for recovery file
s\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Check Application License}}} 
{#{\footnote\plain{#}{H2zl7x1}}} 
{K{\footnote\plain{K}{DatabaseHandle:CheckLicence}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Chec
kLicence\tab -  Check Application License\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CheckLicence (char 
*lic_owner, char *lic_number );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical CheckLicence (char *appl
name_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks the license number for the use
r. The function returns an error (YES) when the database or the 
application is not licensed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The va
lue is YES if the function returns an error. In case of normal t
ermination the value is NO. When the function returns YES more d
etailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Para
meters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 lic_owner\tab - Owner of the licence\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 lic_number\tab - Licence number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he licence number consists of twelve alphanumeric characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 app
lname_w\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Close recovery file}}} 
{#{\footnote\plain{#}{.bvgn1}}} 
{K{\footnote\plain{K}{DatabaseHandle:CloseRecovery}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Cl
oseRecovery\tab -  Close recovery file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CloseRecovery ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The 
function closes the recovery file. Usually the recovery file is 
closed when closing the database and should not be closed explic
itely ba the application.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value
 is YES if the function returns an error. In case of normal term
ination the value is NO. When the function returns YES more deta
iled error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Close W
orkspace}}} 
{#{\footnote\plain{#}{.bvgms}}} 
{K{\footnote\plain{K}{DatabaseHandle:CloseWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CloseWorkspace\tab -  Clos
e Workspace\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CloseWorkspace ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Workspaces are closed whe
n closing the database. It is possible, however, to close the ac
tive workspace explicitly.Closing the workspace will not save th
e changes in the database or lower workspace but keep until the 
workspace is opened again.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The valu
e is YES if the function returns an error. In case of normal ter
mination the value is NO. When the function returns YES more det
ailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Consol
idate Workspace}}} 
{#{\footnote\plain{#}{.bvgmt}}} 
{K{\footnote\plain{K}{DatabaseHandle:ConsolidateWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Consolid
ateWorkspace\tab -  Consolidate Workspace\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ConsolidateWorkspac
e ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will consolidate all changes made in the work
space. You can consolidate the currently opened workspace, only,
 i.e. you must open the workspace before consolidating. For cons
olidating a workspace it must be opened with exclusive use. Only
 when no other user has access to the workspace it is possible t
o consolidate it.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES 
if the function returns an error. In case of normal termination 
the value is NO. When the function returns YES more detailed err
or information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Konstructor}}} 
{#{\footnote\plain{#}{.bvg
mu}}} 
{K{\footnote\plain{K}{DatabaseHandle:DatabaseHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DatabaseHandle\tab -  Konstructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0      
                    DatabaseHandle (DictionaryHandle &dict_handl
e, char *cpath, PIACC accopt, logical w_netopt, logical online_v
ersion=NO, uint16 version_nr=CUR_VERSION, ResourceTypes local_re
ssources=RES_automatic, char sysenv=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                        
  DatabaseHandle (const DatabaseHandle &dbhandle_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0         
                 DatabaseHandle (DBHandle *_dbhandle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0          
                DatabaseHandle (char *cpath, int16 lowEBN, int16
 highEBN, int32 dasize=0, logical largedb=NO, logical pindep=NO 
);\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0                          DatabaseHandle (DictionaryHandle &dic
t_handle, PIACC accopt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          DatabaseHandle
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A database can be opened in local, in client/server mode or
 in file server mode. Local mode usually implies exclusive acces
s. When running several applications on a local machine the data
base should be opened in file servermode to provide concurrent a
ccess to the database. Client/server mode is suggested when runn
ing the database from different clients on a central server.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function retur
ns an error. In case of normal termination the value is NO. When
 the function returns YES more detailed error information are av
ailable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dict_handle\tab - Dictionary ha
ndle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dictionary handle usually refers to an opened dictionary
. To check whether a dictionary is opened you can use the !-oper
ator.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpath\tab - Comp
lete path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete path is passed as 0-terminated string with
 a maximum length of 255 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The acc
ess option defines the way instances in a property handle are to
 be accessed (read, update, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_netopt\tab - Multi-user option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 YE
S indicates that multi-user access is requested. NO indicates ex
clusive use of database. Accessing a database in update or write
 mode, NO guarantees absolute exclusive access.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 online_version\tab - O
nline versioning option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this option is set the database will
 be enabled vor online versioning. When the option is set to NO 
the system variable ONLINE_VERSION is checked instead.\par
Default: N
O\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created 
internally for each Active Object when creating a new version fo
r the Database Object. Each version number is associated with a 
time stamp that defines the end of this version.\par
Default: CUR_VER
SION\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 local_ressources\tab - Resource type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Depending on the resource typ
e the database or dictionary is opened on the client or server s
ide. \par
\f4\cf4\fs20\b\i0\ul0 RES_automatic\f2\cf2\fs20\b0\i0\ul0 \par
When a connection is opened to the server the 
dictionary is opened on the server side when passing a symbolic 
database path (like %DB_PATH%). When passing a dictionary path t
he dictionary is opened on the client side. When no connection i
s opened the dictionary or database will be opened on the client
 side. \par
\f4\cf4\fs20\b\i0\ul0 RES_local\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary or database will be opened on the
 client machine in any case. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 RES_server\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary or databas
e will be opened on the server machine side in any case.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sysenv\tab - 
System application\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option indicates that the application is 
running as system application. In this case context functions ar
e disabled and will not be executed. This option should never be
 set in normal applications because this may lead to logical inc
onsistence of the database.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle_ref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 _dbhandle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 lowEBN\tab - Firs
t entry number in database\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Low range number for the mainbase. Dep
ending on the database (small or large) the range number is betw
een 0 and 252 (small DB) or 0 and 32767 (0x7fff) for large datab
ases.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 highEBN\tab - Last entry number in database\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 High range number for
 the mainbase. Depending on the database type the range number i
s between 0 and 252 (small DB) or 0 and 32767 (0x7fff) for large
 databases.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dasize\tab - Size for data area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data area size allows l
imiting the area for the data area. When no data area is passed 
(UNDEF), the data area expands whenever more space is needed.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 lar
gedb\tab - Large database option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The large database option idicates th
at a large database is to be defined. This information is stored
 in the database header after creating the database.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pindep\tab - Plat
form independance option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The plattform independance option idicat
es that integer numbers are to be stored in platform independent
 format. This information is stored in the database header after
 creating the database.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Deactivate Shadow Database}}} 
{#{\footnote\plain{#}{.bvgmv}}} 
{K{\footnote\plain{K}{DatabaseH
andle:DeactivateShadowBase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DeactivateShadowBase\tab -  Deactivate Shad
ow Database\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical DeactivateShadowBase ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Deactivating the sh
adow database causes all read operations being sent to the origi
nal database again. This funktion has no effect when the shadow 
database feature is not enabled.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e value is YES if the function returns an error. In case of norm
al termination the value is NO. When the function returns YES mo
re detailed error information are available in the error object.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Delete workspace}}} 
{#{\footnote\plain{#}{.bvgmw}}} 
{K{\footnote\plain{K}{DatabaseHandle:DeleteWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DeleteWorksp
ace\tab -  Delete workspace\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical DeleteWorkspace (char *ws_names, 
char *user_name );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function deletes an existing workspace. Th
e workspace must be empty before deleting, i.e. discard or conso
lidate must run before.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameter
s\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_names\tab - Workspace name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The workspace name is the extension of 
the current workspace or database. The database can be considere
d as the root for all workspaces. The workspace name may address
 a workspace on top of the current one (simple workspace name) o
r a workspace on any higher level by passing a sequence of works
pace names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 user_name\tab - User name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When accessing u
ser protected resources as databases or workspaces, a user  must
 be passed as 0-terminated string, otherwise NULL.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Disabeling wor
kspace feature}}} 
{#{\footnote\plain{#}{.bvgmx}}} 
{K{\footnote\plain{K}{DatabaseHandle:DisableWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisableWorksp
ace\tab -  Disabeling workspace feature\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical DisableWorkspace ( );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Disabeling the workspace feature requires that all workspaces ha
ve been discarded or consolidated. If this is not the case activ
e workspaces must be consolidated before. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When disabling the wor
kspace feature sucsessfully the shadow database is removed as we
ll.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the functio
n returns an error. In case of normal termination the value is N
O. When the function returns YES more detailed error information
 are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Discard Workspace}}} 
{#{\footnote\plain{#}{.bvgmy}}} 
{K{\footnote\plain{K}{Databa
seHandle:DiscardWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DiscardWorkspace\tab -  Discard Workspace\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  lo
gical DiscardWorkspace ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will through away all ch
anges made in the workspace for the currently opened workspace. 
The workspace will be closed and removed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Terminati
on code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In cas
e of normal termination the value is NO. When the function retur
ns YES more detailed error information are available in the erro
r object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Enable workspace feature}}} 
{#{\footnote\plain{#}{.bvgmz}}} 
{K{\footnote\plain{K}{DatabaseHandle:EnableWork
space}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 EnableWorkspace\tab -  Enable workspace feature\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical EnableWo
rkspace (char *sdw_path=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function enables the usage of
 workspaces and shadow database. The function can be executed on
ly when the database is opened exclusive. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When no path or an emp
ty path is passed as location for the shadow database the shadow
 database is positioned in the same folder as the original datab
ase and with the same name as the database but the extension is 
changed to .sdw or appended if no extension has been defined for
 the database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES
 when the question was answered positivly. Otherwise it returns 
NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sdw_path\tab - Complete path for shadow database\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The path
 for the shadow database is passed as 0-terminated string with a
 maximum size of 255.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Execute action on database level}}} 
{#{\footnote\plain{#}{ID_7gjn65}}} 
{K{\footnote\plain{K}{Da
tabaseHandle:ExecuteDatabaseAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecuteDatabaseAction\tab -  Execut
e action on database level\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ExecuteDatabaseAction (char *
action_name, char *parm_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function calls an action th
at is defined in the database context. The function is executed 
 on the server side first. If it was executed successfully, the 
function is executed on the client side, too.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The action may use 
the SetActionResult() function to pass the result of the action 
to the client application. If execution of the function on the c
lient side returns NO the result passed from the server overwrit
es any result set by the client function. The result can be retr
ieved from the client application using the function GetActionRe
sult().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the fun
ction returns an error. In case of normal termination the value 
is NO. When the function returns YES more detailed error informa
tion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action_name\tab - Na
me of the action to be performed\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of the action is passed
 as 0-terminated string with a maximum length of 40 significant 
characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm_string\tab - Parameter string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The parameter string is 
passed as 0-terminated string and contains the parameters accord
ing to the conventions of the action called.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Exist workspace?}}} 
{#{\footnote\plain{#}{.bvg
o1}}} 
{K{\footnote\plain{K}{DatabaseHandle:ExistWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExistWorkspace\tab -  Exist workspace?
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ExistWorkspace (char *ws_names );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns w
hether a workspace with the passed workspace name (ws_name) exis
ts as subordinated workspace (YES) or not(NO). When the database
 has already opened a workspace the function looks for the works
pace relatively to the opened one.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
function returns YES when the question was answered positivly. O
therwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_names\tab - Workspace name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The wor
kspace name is the extension of the current workspace or databas
e. The database can be considered as the root for all workspaces
. The workspace name may address a workspace on top of the curre
nt one (simple workspace name) or a workspace on any higher leve
l by passing a sequence of workspace names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get 
database resource number}}} 
{#{\footnote\plain{#}{.bvgnt}}} 
{K{\footnote\plain{K}{DatabaseHandle:GetDatabaseID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDat
abaseID\tab -  Get database resource number\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetDatabaseID ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he function returns the database resource number.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - D
atabase resource number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The database resource number is a number 
that has been assigned to the database in the database definitio
n of the dictionary. The database number does not describe a dat
abase as such but more a type of data bases. It is used to assig
n the database context class, which is associated with the datab
ase resource number.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get path for the opened database}}} 
{#{\footnote\plain{#}{.bvgnv}}} 
{K{\footnote\plain{K}{Databa
seHandle:GetPath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPath\tab -  Get path for the opened database\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char 
*GetPath ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the database path for the open
ed database. The path returned refers to the database path and d
oes not contain system variable references anymore.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Complete database path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete database path is passed as 0
-terminated string with a maximum length of 255 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provi
de name of recovery file}}} 
{#{\footnote\plain{#}{.bvgnw}}} 
{K{\footnote\plain{K}{DatabaseHandle:GetRecoveryFile}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetR
ecoveryFile\tab -  Provide name of recovery file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetRecoveryFil
e (uint16 recnum=0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the name of the recove
ry file according to the passed recovery number.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Na
me of recovery file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of the recovery file is passed as 0-
terminated string. The recovery file name has been generated whe
n creating the recovery file (.r DatabaseHandle.InitRecovery*** 
ERROR : Chapter not found ***()).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 recnum\tab - Numer of reco
very file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Recovery files have an internal number that is generate
d when creating the recovery file (.r DatabaseHandle.InitRecover
y*** ERROR : Chapter not found ***()).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide reacovery number}}} 
{#{\footnote\plain{#}{.b
vgnx}}} 
{K{\footnote\plain{K}{DatabaseHandle:GetRecoveryNum}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetRecoveryNum\tab -  Provide reacov
ery number\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetRecoveryNum ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the nu
mber for the current recovery file.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Numer of recove
ry file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Recovery files have an internal number that is generated 
when creating the recovery file (.r DatabaseHandle.InitRecovery*
** ERROR : Chapter not found ***()).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide path for recovery fo
lder}}} 
{#{\footnote\plain{#}{.bvgny}}} 
{K{\footnote\plain{K}{DatabaseHandle:GetRecoveryPath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetRecoveryPath\tab -  Provid
e path for recovery folder\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetRecoveryPath ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n returns the path for the folder containing the recovery files.
\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Recovery path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The recovery path points to a folder 
that contains the recovery files. The folder path is passed as 0
-terminated string. The folder has been defined when creating th
e recovery file.  (.r DatabaseHandle.InitRecovery*** ERROR : Cha
pter not found ***()).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get schema version}}} 
{#{\footnote\plain{#}{.bvgp1}}} 
{K{\footnote\plain{K}{DatabaseHandle:Get
SchemaVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSchemaVersion\tab -  Get schema version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetSch
emaVersion ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the current schema version n
umber for the database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get system version}}} 
{#{\footnote\plain{#}{.bvgos}}} 
{K{\footnote\plain{K}{Dat
abaseHandle:GetSystemVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSystemVersion\tab -  Get system versio
n\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetSystemVersion ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fiunction provides the schema 
version of the ODABA system, which is the dictionary for a dicti
onary.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide database version}}} 
{#{\footnote\plain{#}{.bvgot}}} 
{K{\footnote\plain{K}{DatabaseHandle
:GetVersionString}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetVersionString\tab -  Provide database version\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  cha
r *GetVersionString ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function provides the database versi
on and sub version as string.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Version string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ver
sion string is passed as 0-terminated string like e.g. "2.41".\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ge
t workspace names}}} 
{#{\footnote\plain{#}{.bvgou}}} 
{K{\footnote\plain{K}{DatabaseHandle:GetWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetWorkspace\tab - 
 Get workspace names\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetWorkspace (char *ws_root, int32 ws
_index, char *user_name, char *ws_name=NULL, logical refresh_opt
=NO, char *ws_info=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the workspaces de
fined below an existing workspace or database. The function retu
rns workspace names by index sorted in alphabetical order (first
 entry is retrieved with index 0). Only workspaces on a given le
vel are returned. To get workspaces on lower levels you must pas
s the root path for the lower level. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Workspace information is bu
ffered when retrieving it the first time. To refresh the interna
l workspace list you should pass the refresh option (YES). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For r
etrieving workspaces owned by the user a user name can be passed
. Not passing a username will return all workspaces. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The name fo
r the workspace is returned in ws_name in addition when passing 
a pointer to a character array. Otherwise the name is returned o
nly in the result area of the property handle, which might be de
stroyed after the next property handle function call. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Work space name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The workspace name is a 0-terminated string w
ith a maximum size of 128 characters, which contains the name of
 the workspace without the preceeding workspace path for the hie
rarchy of upper workspaces.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_root\tab - Workspace root\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
workspace root is a 0-terminated string that describes the hirar
chy of upper workspaces. The hierarchy is described by workspace
 names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_index\tab - Number of workspace to be retr
ieved\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the internal number of workspace to be retrieved. T
he first workspace is retrieved by index 0.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 user_name\tab - User name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 W
hen accessing user protected resources as databases or workspace
s, a user  must be passed as 0-terminated string, otherwise NULL
.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_name\tab - Work space name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The workspace name is a 0-terminated st
ring with a maximum size of 128 characters, which contains the n
ame of the workspace without the preceeding workspace path for t
he hierarchy of upper workspaces.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 refresh_opt\tab - Refresh option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Sett
ing the refresh option to YES will rebuild the list completely.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w
s_info\tab - Workspace information\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A character array with minimum size
 of 256 characters can be passed that carries additional workspa
ce information when the function has terminated successfully. Ad
ditional nformation is passed as 0-terminated string:\par
\tab \f8\cf8\fs20\b0\i\ul0 ws_name (ID
=ws_number[; User=user_name])\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Ignor permanent write protection}}} 
{#{\footnote\plain{#}{.bv
gov}}} 
{K{\footnote\plain{K}{DatabaseHandle:IgnoreWriteProtect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IgnoreWriteProtect\tab -  Ignor p
ermanent write protection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IgnoreWriteProtect ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fun
ction allows disabling the permanent write protection. After dis
abling permanent write protection instances that have been marke
d as permanent write protected (-> SetWProtect()) can be updated
 for this database handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The valu
e is YES if the function returns an error. In case of normal ter
mination the value is NO. When the function returns YES more det
ailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Initia
lise DataArea}}} 
{#{\footnote\plain{#}{.bvgow}}} 
{K{\footnote\plain{K}{DatabaseHandle:InitDataArea}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 InitDataArea\tab -  Ini
tialise DataArea\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical InitDataArea (int16 mbnumber, int16 sbn
umber, int16 danumber, char *filename, int32 dasize=0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The func
tion allows initializing a new data area. Data areas must be cre
ated consecutive order. A data area 0 is created automatically, 
when creating the upper sub-base, i.e. the next data area to be 
crreated would be data area 1 etc.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of no
rmal termination the value is NO. When the function returns YES 
more detailed error information are available in the error objec
t.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mbnumber\tab - Main base number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Mainbase numbers from 0 to
 252 (for small databases) and 0 to 32767 (for large databases) 
are valid.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sbnumber\tab - Sub-base number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Sub-bases for a main base are
 numbered contineously. The highest sub-base number is 255.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 danum
ber\tab - Data area number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Data areas for a sub-base are numbered cont
ineously. The highest data area number is 255.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 filename\tab - File nam
e for DataArea file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The file name is passed as 0-terminated strin
g with a maximum length of 80 characters. The path may contain s
ymbolic parameters, which are replaced by the value of a corresp
onding system variable or variable set in the INI-file (e.g.in c
ase of "%ROOT%.rot" - %ROOT% is replaced by the value of the ROO
T system or INI file variable). The replacement is done only for
 utility applications, i.e. a utility control block must have be
en created (see ).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dasize\tab - Size for data area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data area size a
llows limiting the area for the data area. When no data area is 
passed (UNDEF), the data area expands whenever more space is nee
ded.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Initialize main base}}} 
{#{\footnote\plain{#}{.bvgox}}} 
{K{\footnote\plain{K}{DatabaseHandle:InitMainBase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 InitMai
nBase\tab -  Initialize main base\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical InitMainBase (int16 mbnumbe
r, char *filename, int16 lowEBN, int16 highEBN, int32 dasize=0, 
logical largedb=NO, logical pindep=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows init
ializing a new main base. Main bases must be created in consecut
ive order. The first main base to be crreated would be main base
 0, the next main base 1 etc. A main base 0 is created automatic
ally, when creating a single resource database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Creating a mainb
ase automatically creates a sub-base 0 and a data area 0. Data a
rea size (dasize) and file name refer to data area 0. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Main bases
 are generating local identities. The size for local identities 
depends on the database type and is 64 bit for large databases a
nd 32 bit for small databases:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   large DB:  0xSSRRRRNNNNNNNNNN\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   s
mall DB: 0xRRNNNNNN\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 'SS' is used internally for the system. RR or
 RRRR is the part of the identity that is described by the range
 of identities for the main base, i.e. a mainbase generates iden
tities with range values according to the low and high value pas
sed (lowEBN, highEBN). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually a database has certain limitation
s to 2 or 4 giga byte (31 bit). This is sufficiant in many cases
 but some sutuations require more space. Allocating a large data
base (YES) will change the following limitations:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   Data area siz
e: 2 GB to 262144 GB\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   number of identities: ca 4 Giga to more th
an 16,000,000 Giga\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   number of mainbases: 252 to 32760\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Large datab
ases do not support, however, main bases splitted in different s
ub bases and data areas. This feature has been introduced to ove
rcome database limitations for small databases and is not necess
ary for large databases. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Because of different interger presentat
ions on different platforms databases are platform dependent and
 must be converted when changing the platform. It is, however, a
lso possible to store data in platform independent format when p
assing YES forte pindep parameter.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of no
rmal termination the value is NO. When the function returns YES 
more detailed error information are available in the error objec
t.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mbnumber\tab - Main base number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Mainbase numbers from 0 to
 252 (for small databases) and 0 to 32767 (for large databases) 
are valid.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 filename\tab - File name for DataArea file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The file name is 
passed as 0-terminated string with a maximum length of 80 charac
ters. The path may contain symbolic parameters, which are replac
ed by the value of a corresponding system variable or variable s
et in the INI-file (e.g.in case of "%ROOT%.rot" - %ROOT% is repl
aced by the value of the ROOT system or INI file variable). The 
replacement is done only for utility applications, i.e. a utilit
y control block must have been created (see ).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 lowEBN\tab - First entr
y number in database\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Low range number for the mainbase. Depending
 on the database (small or large) the range number is between 0 
and 252 (small DB) or 0 and 32767 (0x7fff) for large databases.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 h
ighEBN\tab - Last entry number in database\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 High range number for the m
ainbase. Depending on the database type the range number is betw
een 0 and 252 (small DB) or 0 and 32767 (0x7fff) for large datab
ases.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dasize\tab - Size for data area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data area size allows limitin
g the area for the data area. When no data area is passed (UNDEF
), the data area expands whenever more space is needed.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 largedb\tab - 
Large database option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The large database option idicates that a l
arge database is to be defined. This information is stored in th
e database header after creating the database.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pindep\tab - Platform i
ndependance option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The plattform independance option idicates tha
t integer numbers are to be stored in platform independent forma
t. This information is stored in the database header after creat
ing the database.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Initialise recovery file}}} 
{#{\footnote\plain{#}{.bvgoy}}} 
{K{\footnote\plain{K}{DatabaseHandle:In
itRecovery}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 InitRecovery\tab -  Initialise recovery file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical InitRe
covery (char *recpath, uint16 recnum=0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function initialize
s a new recovery file.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is
 YES if the function returns an error. In case of normal termina
tion the value is NO. When the function returns YES more detaile
d error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 recpath\tab - Recovery path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The recovery path points to a folder that 
contains the recovery files. The folder path is passed as 0-term
inated string. The folder has been defined when creating the rec
overy file.  (.r DatabaseHandle.InitRecovery*** ERROR : Chapter 
not found ***()).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 recnum\tab - Numer of recovery file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Recovery files ha
ve an internal number that is generated when creating the recove
ry file (.r DatabaseHandle.InitRecovery*** ERROR : Chapter not f
ound ***()).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Initialise sub-base}}} 
{#{\footnote\plain{#}{.bvgoz}}} 
{K{\footnote\plain{K}{DatabaseHandle:InitSubBase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 I
nitSubBase\tab -  Initialise sub-base\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical InitSubBase (int16 mbnu
mber, int16 sbnumber, char *filename, int32 dasize=0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion allows initializing a new sub-base. Sub-bases must be create
d in consecutive order. A sub-base 0 is created automatically, w
hen creating the upper main base, i.e. the next sub-base to be c
rreated would be sub-base 1 etc.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Data area size (dasize) and File
 name refer to data area 0, which is automatically allocated wit
h the sub-base.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if
 the function returns an error. In case of normal termination th
e value is NO. When the function returns YES more detailed error
 information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mbnumbe
r\tab - Main base number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Mainbase numbers from 0 to 252 (for small dat
abases) and 0 to 32767 (for large databases) are valid.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sbnumber\tab -
 Sub-base number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Sub-bases for a main base are numbered contineou
sly. The highest sub-base number is 255.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 filename\tab - File name for 
DataArea file\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The file name is passed as 0-terminated string with
 a maximum length of 80 characters. The path may contain symboli
c parameters, which are replaced by the value of a corresponding
 system variable or variable set in the INI-file (e.g.in case of
 "%ROOT%.rot" - %ROOT% is replaced by the value of the ROOT syst
em or INI file variable). The replacement is done only for utili
ty applications, i.e. a utility control block must have been cre
ated (see ).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dasize\tab - Size for data area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data area size allows 
limiting the area for the data area. When no data area is passed
 (UNDEF), the data area expands whenever more space is needed.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is
 database licensed}}} 
{#{\footnote\plain{#}{ID_7gjn85}}} 
{K{\footnote\plain{K}{DatabaseHandle:IsLicenced}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsLicenced\tab - 
 Is database licensed\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsLicenced ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function return
s whether the database has been licensed successfully. Usually t
he database will not be opened when a license is required and th
e database is not licensed. When running with disabled license s
ervices this function can be used to check the license after ope
ning the database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns
 YES when the question was answered positivly. Otherwise it retu
rns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is database shared by several users}}} 
{#{\footnote\plain{#}{.bvgq1}}} 
{K{\footnote\plain{K}{DatabaseHandle:I
sShared}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsShared\tab -  Is database shared by several users\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Is
Shared ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the database has been o
pened in net mode on a local machine or when running in a client
/server environment.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is Y
ES if the function returns an error. In case of normal terminati
on the value is NO. When the function returns YES more detailed 
error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Locate an ex
isting Workspace}}} 
{#{\footnote\plain{#}{.bvgps}}} 
{K{\footnote\plain{K}{DatabaseHandle:LocateWorkspace}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 LocateWorksp
ace\tab -  Locate an existing Workspace\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical LocateWorkspace (char
 *ws_names );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether the worspace with the p
assed name exists relatively to the current workspace.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was a
nswered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_names\tab - W
orkspace name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The workspace name is the extension of the current 
workspace or database. The database can be considered as the roo
t for all workspaces. The workspace name may address a workspace
 on top of the current one (simple workspace name) or a workspac
e on any higher level by passing a sequence of workspace names s
eparated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Opening a database handle}}} 
{#{\footnote\plain{#}{.bvgpt}}} 
{K{\footnote\plain{K}{DatabaseHandle:Op
en}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Open\tab -  Opening a database handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Open (DictionaryHandl
e &dict_handle, char *cpath, PIACC accopt, logical w_netopt, log
ical online_version=NO, uint16 version_nr=CUR_VERSION, ResourceT
ypes local_ressources=RES_automatic, char sysenv=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical O
pen (char *cpath, int16 lowEBN, int16 highEBN, int32 dasize=0, l
ogical largedb=NO, logical pindep=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (Dictionary
Handle &dict_handle, PIACC accopt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows opening 
a database handle. When the database handle is already opened it
 will be closed before re-opening it.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A database can be opened in
 local, in client/server mode or in file server mode. Local mode
 usually implies exclusive access. When running several applicat
ions on a local machine the database should be opened in file se
rvermode to provide concurrent access to the database. Client/se
rver mode is suggested when running the database from different 
clients on a central server.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The va
lue is YES if the function returns an error. In case of normal t
ermination the value is NO. When the function returns YES more d
etailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Para
meters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dict_handle\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dictionary handle usuall
y refers to an opened dictionary. To check whether a dictionary 
is opened you can use the !-operator.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpath\tab - Complete path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete path is pa
ssed as 0-terminated string with a maximum length of 255 charact
ers.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines the way insta
nces in a property handle are to be accessed (read, update, writ
e).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_netopt\tab - Multi-user option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 YES indicates that multi-user acce
ss is requested. NO indicates exclusive use of database. Accessi
ng a database in update or write mode, NO guarantees absolute ex
clusive access.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 online_version\tab - Online versioning option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this
 option is set the database will be enabled vor online versionin
g. When the option is set to NO the system variable ONLINE_VERSI
ON is checked instead.\par
Default: NO\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal version nu
mber\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created internally for each Active Objec
t when creating a new version for the Database Object. Each vers
ion number is associated with a time stamp that defines the end 
of this version.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 local_ressources\tab - Resource t
ype\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Depending on the resource type the database or dictionary is 
opened on the client or server side. \par
\f4\cf4\fs20\b\i0\ul0 RES_automatic\f2\cf2\fs20\b0\i0\ul0 \par
When a connect
ion is opened to the server the dictionary is opened on the serv
er side when passing a symbolic database path (like %DB_PATH%). 
When passing a dictionary path the dictionary is opened on the c
lient side. When no connection is opened the dictionary or datab
ase will be opened on the client side. \par
\f4\cf4\fs20\b\i0\ul0 RES_local\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary o
r database will be opened on the client machine in any case. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 RES
_server\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary or database will be opened on the server m
achine side in any case.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sysenv\tab - System application\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option in
dicates that the application is running as system application. I
n this case context functions are disabled and will not be execu
ted. This option should never be set in normal applications beca
use this may lead to logical inconsistence of the database.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 lowEB
N\tab - First entry number in database\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Low range number for the mainba
se. Depending on the database (small or large) the range number 
is between 0 and 252 (small DB) or 0 and 32767 (0x7fff) for larg
e databases.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 highEBN\tab - Last entry number in database\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 High range num
ber for the mainbase. Depending on the database type the range n
umber is between 0 and 252 (small DB) or 0 and 32767 (0x7fff) fo
r large databases.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dasize\tab - Size for data area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data area size a
llows limiting the area for the data area. When no data area is 
passed (UNDEF), the data area expands whenever more space is nee
ded.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 largedb\tab - Large database option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The large database option idic
ates that a large database is to be defined. This information is
 stored in the database header after creating the database.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pinde
p\tab - Platform independance option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The plattform independance option
 idicates that integer numbers are to be stored in platform inde
pendent format. This information is stored in the database heade
r after creating the database.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Open recovery file}}} 
{#{\footnote\plain{#}{.bvgpu}}} 
{K{\footnote\plain{K}{DatabaseHa
ndle:OpenRecovery}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenRecovery\tab -  Open recovery file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical OpenR
ecovery (char *userinfo=NULL, int16 uilen=0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function opens
 the recovery file. Usually this is done automatically when open
ing the database and should not be opened explicitely by the use
r.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function
 returns an error. In case of normal termination the value is NO
. When the function returns YES more detailed error information 
are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 userinfo\tab - Area for a
pplication recovery information\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This area can be provided by the 
application program and is expected to contain application data.
 When writing an entry to the recovery file the information is c
opied to the recovery entrie's user area. The application may ch
ange the conten of the area but not the location as long as the 
recovery file is opened.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 uilen\tab - Length of application data area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e lenght describes the length of the application data area provi
ded as \f4\cf4\fs20\b\i0\ul0 userinfo\f2\cf2\fs20\b0\i0\ul0 .\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Open Workspace}}} 
{#{\footnote\plain{#}{.bvgpv}}} 
{K{\footnote\plain{K}{DatabaseHandle:OpenWorkspace
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenWorkspace\tab -  Open Workspace\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical OpenWorkspace (char *ws_n
ames, char *user_name, logical exclusive, char *ws_path=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he function creates or opens an existing workspace. After openin
g the workspace all updates are stored in the opened workspace. 
When the workspace is used the first time it is created automati
cally. When it does already exist the existing workspace is open
ed. You can check whether a workspace exists using the LocateWor
kspace() function, which returns true when the workspace has alr
eady been created.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually the workspace file is created in the s
ame folder as the database. You may, however, pass an explicit l
ocation for the workspace via the ws_path parameter.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value
\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an er
ror. In case of normal termination the value is NO. When the fun
ction returns YES more detailed error information are available 
in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_names\tab - Workspace name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The worksp
ace name is the extension of the current workspace or database. 
The database can be considered as the root for all workspaces. T
he workspace name may address a workspace on top of the current 
one (simple workspace name) or a workspace on any higher level b
y passing a sequence of workspace names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 user_na
me\tab - User name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When accessing user protected resources as database
s or workspaces, a user  must be passed as 0-terminated string, 
otherwise NULL.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 exclusive\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ws_path\tab - Physical location for the wor
kspace\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The physical location must be accessible from the server, 
not from the client. When running in a client/server environment
 the client application should not path locations directly but r
ather via symboloc file names (file catalogue).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Recreate Index fo
r an extent}}} 
{#{\footnote\plain{#}{.bvgpw}}} 
{K{\footnote\plain{K}{DatabaseHandle:RecreateExtent}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 RecreateExtent\tab -  R
ecreate Index for an extent\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical RecreateExtent (char *extnam
es );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function repairs the indexes for a corrupted extent ind
ex. The function deletes all indexes for the extent and parses t
he database for instances with the type of the extent. The funct
ion works correct only, when all instances in the database belon
g to the extent.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES i
f the function returns an error. In case of normal termination t
he value is NO. When the function returns YES more detailed erro
r information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnam
es\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string 
or as buffer with trailing blanks and a maximum length of 40 cha
racters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Database handle opened?}}} 
{#{\footnote\plain{#}{.bvgpz}}} 
{K{\footnote\plain{K}{DatabaseHandle:operator boo
l}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator bool\tab -  Database handle opened?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  NOTYPE operator bool ( 
) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES (true) when the database jandle
 is opened and NO (false) when the databse is not opened or when
 an error had occured while constructing the database handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Ret
urn value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare database handles}}} 
{#{\footnote\plain{#}{ID_7gjn95}}} 
{K{\footnote\plain{K}{DatabaseHandle:opera
tor!=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator!=\tab -  Compare database handles\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator!= (D
atabaseHandle &dbhandle_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator!= (DBObjectHandl
e &obhandle_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns true (YES) when the datab
ase handles refer to different database access blocks and false 
(NO) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YE
S when the question was answered positivly. Otherwise it returns
 NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle_ref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle_ref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Assignment operator}}} 
{#{\footnote\plain{#}{.bv
gqs}}} 
{K{\footnote\plain{K}{DatabaseHandle:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  Assignment operator\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Datab
aseHandle &operator= (const DatabaseHandle &dbhandle_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Dat
abaseHandle &operator= (ACObject *acobject );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator assign
s the database access block of the passed database handle to the
 current database handle. Before the current database handle is 
closed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer t
o an opened database handle. The database handle can be an opene
d database handle DatabaseHandle as well as an opened dictionary
 handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Datab
aseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is p
ointer to an opened database handle. The database handle can be 
an opened database handle DatabaseHandle as well as an opened di
ctionary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for
:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 acobject\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Destructur}}} 
{#{\footnote\plain{#}{.bvgqt}}} 
{K{\footnote\plain{K}{DatabaseHandle:~Datab
aseHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~DatabaseHandle\tab -  Destructur\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~D
atabaseHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The destructor closes the database handle. Clo
sing the database handle will reduce the use count. The internal
 resources, the database access block is removed, when the use c
ount becomes 0, i.e. when the last database handle referring to 
this resource is closed or destroyed.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvgqv}}} 
{K{\footnote\plain{K}{DatabaseHandle:DBObje
ctHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DBObjectHandle\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjec
tHandle\strike0\ul0 \par\pard\par
{${\footnote\plain{$}{Database Handle}}} 
{#{\footnote\plain{#}{.bvgqw}}} 
{K{\footnote\plain{K}{DatabaseHandle:DatabaseHdl}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DatabaseHd
l\tab -  Database Handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dictionary handle}}} 
{#{\footnote\plain{#}{.bvgqu}}} 
{K{\footnote\plain{K}{DatabaseHandle:diction
ary}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dictionary\tab -  Dictionary handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for: 
 DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dictionary Handle}}} 
{#{\footnote\plain{#}{.bvgru}}} 
{K{\footnote\plain{K}{DictionaryHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 Dictiona
ryHandle\tab -  Dictionary Handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The dictionary handle is used for pr
oviding schema definitions from the dictionary. The dictionary c
reates internal images from the externally stored schema definit
ions. These internal images () can be provided by means of dicti
onary functions.  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Because the dictionary is a database handle  y
ou can access schema information also directly via PI functions.
\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DatabaseHandle\strike0\ul0 \tab - \par
DictionaryHdl\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Function
s\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 BaseType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Returns internal number for elementary types\par
\f2\cf2\fs20\b0\i0 CheckExpr
ession\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check expression syntax\par
\f2\cf2\fs20\b0\i0 CopyCodeset\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy enumeration\par
\f2\cf2\fs20\b0\i0 Copy
ExtentDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy extent definition\par
\f2\cf2\fs20\b0\i0 CopyStructure\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy structure d
efinition\par
\f2\cf2\fs20\b0\i0 CopyType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy type definition\par
\f2\cf2\fs20\b0\i0 CreateEnum\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create new en
umeration\par
\f2\cf2\fs20\b0\i0 CreateTempExtent\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create temporary extent\par
\f2\cf2\fs20\b0\i0 DeleteEnum\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 De
lete enumeration definition\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 DictionaryHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create dictionary h
andle\par
\f2\cf2\fs20\b0\i0 GetExtentDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get extent definition\par
\f2\cf2\fs20\b0\i0 GetID_SIZE\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Size for ide
ntifying names in ODABA\par
\f2\cf2\fs20\b0\i0 GetTempName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get unique name for temporar
y resource\par
\f2\cf2\fs20\b0\i0 IsBasicType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is type an elementary type?\par
\f2\cf2\fs20\b0\i0 ProvideExtentD
ef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide extent definition\par
\f2\cf2\fs20\b0\i0 ProvideStructureDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide struct
ure definition from internal or external dictionary\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator bool
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Dictionary opened\par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator==\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare dictionary han
dles\par
\f2\cf2\fs20\b0\i0 ~DictionaryHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Returns internal number for ele
mentary types}}} 
{#{\footnote\plain{#}{.bvgrv}}} 
{K{\footnote\plain{K}{DictionaryHandle:BaseType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BaseType\tab -  Returns i
nternal number for elementary types\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 BaseType (char *strnam
es );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the internal number for elementary typ
es (STRING, CHAR, INT,...). If the type name (strnames) passed i
s not a supported basic type the function returns UNDEF.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return v
alue\tab - Internal structure number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 For user-defined types (structure
s or enumerations) the internal type identification (number) is 
returned. If the type is unknown the function returns UNDEF (0).
 For elementary types (basic types -> ) the value is negative.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure name is passed as 
0-terminated string or as buffer with a maximum size of 40 chara
cters and trailing blanks.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Check expression syntax}}} 
{#{\footnote\plain{#}{.bvgrw}}} 
{K{\footnote\plain{K}{Dictionar
yHandle:CheckExpression}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CheckExpression\tab -  Check expression syntax
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CheckExpression (char *expression, DBObjectHandle &dbob
j_handle, char *clsnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function terurns YES when the exp
ression is invalid or no valid object handle has been passed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Ret
urn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function retu
rns an error. In case of normal termination the value is NO. Whe
n the function returns YES more detailed error information are a
vailable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 expression\tab - OQL expressio
n\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An OQL expression defines a condition according to the OQL synt
ax. OQL expressions must always terminate with ';'. The OQL-Expr
ession is passed as 0-terminated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbobj_handle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 clsnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Copy enumeration}}} 
{#{\footnote\plain{#}{.b
vgrx}}} 
{K{\footnote\plain{K}{DictionaryHandle:CopyCodeset}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyCodeset\tab -  Copy enumeration\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  l
ogical CopyCodeset (DictionaryHandle &srce_dicthandle, char *str
name, char *newnames=NULL, PIREPL db_replace=REPL_none, logical 
retainSID=NO, logical retain_schemav=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function copies an
 enumeration (Codeset) from one dictionary to another.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an 
error. In case of normal termination the value is NO. When the f
unction returns YES more detailed error information are availabl
e in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srce_dicthandle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class 
definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strname\tab - Type name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type name
 is passed as 0-terminated string or as buffer with maximum 40 c
haracters filled with trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newnames\tab - New name for an 
extent or type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The new name must be passed only if the type is to
 be renamed. The name is passed as 0-terminated string or as buf
fer with trailing blanks and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 d
b_replace\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retainSID\tab - Reta
in internal type numbers\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 If this option is set to YES the functio
n trys to re-use the internal type number from the source dictio
nary. If this is not possible the type gets a new number in the 
target dictionary. This option is used normally only when copyin
g a complete dictionary.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retain_schemav\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Copy extent definition}}} 
{#{\footnote\plain{#}{.b
vgry}}} 
{K{\footnote\plain{K}{DictionaryHandle:CopyExtentDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyExtentDef\tab -  Copy extent de
finition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CopyExtentDef (DictionaryHandle &srce_dicthandl
e, char *extentname, char *newnames=NULL, char *targ_struct=NULL
, logical transaction=NO, logical retain_schemav=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on copies an extent definition from one dictionary to another.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function ret
urns an error. In case of normal termination the value is NO. Wh
en the function returns YES more detailed error information are 
available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srce_dicthandle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See als
o class definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extentname\tab - Extent name
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name is passed as 0-terminated string or as buffer with trai
ling blanks and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newnames\tab - New 
name for an extent or type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The new name must be passed only if th
e type is to be renamed. The name is passed as 0-terminated stri
ng or as buffer with trailing blanks and a maximum length of 40 
characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 targ_struct\tab - Target type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The target type must be passe
d when the type name for the extent has been changed (e.g. becau
se of a copy/rename operation). The name is passed as 0-terminat
ed string or as buffer with trailing blanks and a maximum length
 of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 transaction\tab - Transaction option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When passing YE
S the function creates a transaction while copying the extent de
finition.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retain_schemav\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Copy structure definition}}} 
{#{\footnote\plain{#}{.bvgrz}}} 
{K{\footnote\plain{K}{Dictiona
ryHandle:CopyStructure}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyStructure\tab -  Copy structure definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
logical CopyStructure (DictionaryHandle &srce_dicthandle, char *
strname, char *newnames=NULL, char *topname=NULL, PIREPL db_repl
ace=REPL_none, logical retainSID=NO, logical retain_schemav=NO )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function copies a structure definition from one dictionary 
to another.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the
 function returns an error. In case of normal termination the va
lue is NO. When the function returns YES more detailed error inf
ormation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srce_dictha
ndle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strname\tab - T
ype name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type name is passed as 0-terminated string or as buf
fer with maximum 40 characters filled with trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newna
mes\tab - New name for an extent or type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The new name must be passed o
nly if the type is to be renamed. The name is passed as 0-termin
ated string or as buffer with trailing blanks and a maximum leng
th of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 topname\tab - Name of top-type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When calling the fu
nction this field should contain the name of the type to be copi
ed. When processing recursive copy operations the name is used t
o avoid recursion while copying.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 db_replace\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defin
ition for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retainSID\tab - Retain internal type numbers\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 If this
 option is set to YES the function trys to re-use the internal t
ype number from the source dictionary. If this is not possible t
he type gets a new number in the target dictionary. This option 
is used normally only when copying a complete dictionary.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retain_
schemav\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Copy type definition}}} 
{#{\footnote\plain{#}{H2zl7t1}}} 
{K{\footnote\plain{K}{DictionaryHandle:CopyType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Cop
yType\tab -  Copy type definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CopyType (DictionaryHandle 
&srce_dicthandle, char *strnames, char *newnames=NULL, char *top
name=NULL, PIREPL db_replace=REPL_none, logical retainSID=NO, lo
gical transaction=NO, logical retain_schemav=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function c
opies a type definition from one dictionary to another.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an
 error. In case of normal termination the value is NO. When the 
function returns YES more detailed error information are availab
le in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srce_dicthandle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class
 definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The st
ructure name is passed as 0-terminated string or as buffer with 
a maximum size of 40 characters and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newnames\tab - Ne
w name for an extent or type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The new name must be passed only if 
the type is to be renamed. The name is passed as 0-terminated st
ring or as buffer with trailing blanks and a maximum length of 4
0 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 topname\tab - Name of top-type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When calling the function 
this field should contain the name of the type to be copied. Whe
n processing recursive copy operations the name is used to avoid
 recursion while copying.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 db_replace\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retainSID\tab - Retain internal type numbers\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 If this option
 is set to YES the function trys to re-use the internal type num
ber from the source dictionary. If this is not possible the type
 gets a new number in the target dictionary. This option is used
 normally only when copying a complete dictionary.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 transaction\tab - T
ransaction option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When passing YES the function creates a transac
tion while copying the extent definition.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 retain_schemav\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create 
new enumeration}}} 
{#{\footnote\plain{#}{.bvgt1}}} 
{K{\footnote\plain{K}{DictionaryHandle:CreateEnum}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CreateEnum\tab -  Cre
ate new enumeration\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CreateEnum (char *enum_name, char *b
asetype );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 he function creates a new enumeration. The dictionary 
must be opened in write mode.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When defining a new enumeration in 
a dictionary it has to be created before it can be opened for ad
ding the enumeration items.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The val
ue is YES if the function returns an error. In case of normal te
rmination the value is NO. When the function returns YES more de
tailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 enum_name\tab - Enumeration name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The enumeration name is passed a
s 0-terminated string or as buffer with trailing blanks and a ma
ximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 basetype\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create temporary extent}}} 
{#{\footnote\plain{#}{.
bvgss}}} 
{K{\footnote\plain{K}{DictionaryHandle:CreateTempExtent}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CreateTempExtent\tab -  Create 
temporary extent\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *CreateTempExtent (char *strnames, char *e
xtnames_w=NULL, char *key_name_w=NULL, char *baseexts_w=NULL, lo
gical weak_opt_w=NO, logical own_opt_w=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  char *CreateTempExt
ent (DBFieldDef *field_def, char *extnames_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A temporary 
extent can be created for storing results of a qeuery (e.g. a se
lection) within an application. Temporary extents are created in
 main storage or in a temporary database and are available as lo
ng as the database handle is opened. They will be removed automa
tically when closing the database handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a temporary extent
 has been created once, you can open any number of property hand
les for accessing the extent.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can define an extent for a stru
cture definition defined in the external dictionary by referring
 to the tsructure name) or by an internal structure definition t
hat has been created by the application and is referenced by the
 field definition passed to the function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Extent na
me\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string or as buffer 
with trailing blanks and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure name is passed as 0-t
erminated string or as buffer with a maximum size of 40 characte
rs and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames_w\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is
 passed as 0-terminated string or as buffer with trailing blanks
 and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_name_w\tab - Key name for 
conversion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-terminated string or as bu
ffer with a maximum size of 40 characters and trailing blanks. I
f no key name is passed (NULL) the sort key according to the sel
ected sort order is used instead,\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 baseexts_w\tab - Name for base exten
t\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A base extent or base collection can be passed that defines a s
uperset for the temporary extent. The extent name is passed as 0
-terminated string with maximum 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 weak_opt_w\tab - Weak-t
yped option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option must be true (YES) when a collection may 
refer to instances of differet types, wich are based on the same
 base structure.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 own_opt_w\tab - Owning collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option must be 
set to true (YES) if the collection owns the instances it is ref
erring to. In this case the collection may not refer to instance
s from other collections. Removing instances from an owning coll
ection will result in deleting the instance completely.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 field_def
\tab - Property definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property defintion contains the metadat
a for the referenced property instance..\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definitio
n for:  DBFieldDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Delete enumeration definition}}} 
{#{\footnote\plain{#}{.bvgst}}} 
{K{\footnote\plain{K}{DictionaryH
andle:DeleteEnum}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DeleteEnum\tab -  Delete enumeration definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logic
al DeleteEnum (char *enum_name );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function deletes an enumer
ation definition from the external dictionary.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Term
ination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. I
n case of normal termination the value is NO. When the function 
returns YES more detailed error information are available in the
 error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 enum_name\tab - Enumeration name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The enumerati
on name is passed as 0-terminated string or as buffer with trail
ing blanks and a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create dictiona
ry handle}}} 
{#{\footnote\plain{#}{.bvgsu}}} 
{K{\footnote\plain{K}{DictionaryHandle:DictionaryHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DictionaryHandle
\tab -  Create dictionary handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          DictionaryHa
ndle (ODABAClient &odaba_client, char *cpath, PIACC accopt, logi
cal w_netopt, uint16 version_nr=CUR_VERSION, ResourceTypes local
_ressources=RES_automatic, char sysenv=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                     
     DictionaryHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          DictionaryHan
dle (Dictionary *_dictionary );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          Dictiona
ryHandle (const DictionaryHandle &dictionary_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0             
             DictionaryHandle (DatabaseHandle &db_handle );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usual
ly the dictionary is created as local dictionary, i.e. the exter
nal dictionary must be provided in the local environment. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When t
he application wants to refer to databases on a server the dicti
onary has to be opened as server dictionary as well using the ex
ternal dictionary on the server. In this case an ODABAClient wit
h an opened connection has to be passed. When the connection is 
not opened the system tries to open the dictionary as local dict
ionary.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 odaba_client\tab - ODABA Client Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ODABA clie
nt handle can be passes as connectet or ea empty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also
 class definition for:  ODABAClient\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpath\tab - Complete path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The compl
ete path is passed as 0-terminated string with a maximum length 
of 255 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines
 the way instances in a property handle are to be accessed (read
, update, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_netopt\tab - Multi-user option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 YES indicates that m
ulti-user access is requested. NO indicates exclusive use of dat
abase. Accessing a database in update or write mode, NO guarante
es absolute exclusive access.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal version number
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created internally for each Active Object wh
en creating a new version for the Database Object. Each version 
number is associated with a time stamp that defines the end of t
his version.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 local_ressources\tab - Resource type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 D
epending on the resource type the database or dictionary is open
ed on the client or server side. \par
\f4\cf4\fs20\b\i0\ul0 RES_automatic\f2\cf2\fs20\b0\i0\ul0 \par
When a connection 
is opened to the server the dictionary is opened on the server s
ide when passing a symbolic database path (like %DB_PATH%). When
 passing a dictionary path the dictionary is opened on the clien
t side. When no connection is opened the dictionary or database 
will be opened on the client side. \par
\f4\cf4\fs20\b\i0\ul0 RES_local\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary or da
tabase will be opened on the client machine in any case. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 RES_ser
ver\f2\cf2\fs20\b0\i0\ul0 \par
The dictionary or database will be opened on the server machi
ne side in any case.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sysenv\tab - System application\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option indica
tes that the application is running as system application. In th
is case context functions are disabled and will not be executed.
 This option should never be set in normal applications because 
this may lead to logical inconsistence of the database.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 _dictiona
ry\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dicthdl\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 db_handle\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointe
r to an opened database handle. The database handle can be an op
ened database handle DatabaseHandle as well as an opened diction
ary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Da
tabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get extent definition}}} 
{#{\footnote\plain{#}{.bvgsv}}} 
{K{\footnote\plain{K}{DictionaryHandle:GetExten
tDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetExtentDef\tab -  Get extent definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBExtend *GetExtentDef 
(char *extname );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the extend definition for 
the passed extent name from the internal dictionary. When the ex
tent definition has not been found in the internal dictionary th
e function will not read the extent definition from the external
 dictionary (see ProvideExtendDef()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Internal exte
nt definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extname\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is pa
ssed as 0-terminated string or as buffer with trailing blanks an
d a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Size for identifying names i
n ODABA}}} 
{#{\footnote\plain{#}{.bvgsw}}} 
{K{\footnote\plain{K}{DictionaryHandle:GetID_SIZE}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetID_SIZE\tab -  Size for id
entifying names in ODABA\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 GetID_SIZE ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 ODABA has a unique
 size for identifying names. Since the identifier size may chang
e between different ODABA versions this function returns the ide
ntifier size for the current version.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of t
he instance or property area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get unique name for temporary resou
rce}}} 
{#{\footnote\plain{#}{.bvgsz}}} 
{K{\footnote\plain{K}{DictionaryHandle:GetTempName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetTempName\tab -  Get unique na
me for temporary resource\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetTempName (char *extnames_w=NU
LL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function provides a unique internal name that can be us
ed for creating temporary extents or other resources.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return valu
e\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string o
r as buffer with trailing blanks and a maximum length of 40 char
acters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames_w\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passe
d as 0-terminated string or as buffer with trailing blanks and a
 maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is type an elementary type?}}} 
{#{\footnote\plain{#}{ID_7
gjn.5}}} 
{K{\footnote\plain{K}{DictionaryHandle:IsBasicType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsBasicType\tab -  Is type an elemen
tary type?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsBasicType (char *typenames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function r
eturns YES when the passed type is one of the elementary ODABA d
ata types.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the 
function returns an error. In case of normal termination the val
ue is NO. When the function returns YES more detailed error info
rmation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 typenames\tab - T
ype name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type name is passed as 0-terminated string or as buf
fer with trailing blanks and a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{P
rovide extent definition}}} 
{#{\footnote\plain{#}{.bvgtt}}} 
{K{\footnote\plain{K}{DictionaryHandle:ProvideExtentDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 P
rovideExtentDef\tab -  Provide extent definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBExtend *ProvideExt
entDef (char *extnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the extend definit
ion for the passed extent name from the internal dictionary. Whe
n the extent definition has not been found in the internal dicti
onary the function will provide the extent definition in the int
ernal dictionary by reading it from the external dictionary.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Internal extent definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames\tab - Extent n
ame\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string or as buffer
 with trailing blanks and a maximum length of 40 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Prov
ide structure definition from internal or external dictionary}}} 
{#{\footnote\plain{#}{.bv
gtu}}} 
{K{\footnote\plain{K}{DictionaryHandle:ProvideStructureDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvideStructureDef\tab -  Pro
vide structure definition from internal or external dictionary\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  D
BStructDef *ProvideStructureDef (char *strnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function r
eturns the structure definition for the passed structure name fr
om the internal dictionary. When the structure definition has no
t been found in the internal dictionary the function will provid
e the extent definition in the internal dictionary by reading it
 from the external dictionary.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Structure definition
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure definition is provided in the internal format as p
ointer to a DBStructDef object.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  D
BStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure name i
s passed as 0-terminated string or as buffer with a maximum size
 of 40 characters and trailing blanks.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Dictionary opened}}} 
{#{\footnote\plain{#}{.bvgty}}} 
{K{\footnote\plain{K}{Dic
tionaryHandle:operator bool}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator bool\tab -  Dictionary opened\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  NOT
YPE operator bool ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES (true) when
 the dictionary handle is opened and NO (false) when the diction
ary is not opened or when an error had occured while constructin
g the dictionary handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{ID_7gjn_5}}} 
{K{\footnote\plain{K}{DictionaryHandle:
operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DictionaryHandle &operator= (const Diction
aryHandle &dictionary_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dicthandle\tab -
 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Compare dictionary handles}}} 
{#{\footnote\plain{#}{.bvgv1}}} 
{K{\footnote\plain{K}{DictionaryHandle:operator==}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 oper
ator==\tab -  Compare dictionary handles\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator== (const Di
ctionaryHandle &dictionary_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES (true
) when the dictionary handles compared are identical.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return valu
e\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was an
swered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dict_handle\tab -
 Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dictionary handle usually refers to an ope
ned dictionary. To check whether a dictionary is opened you can 
use the !-operator.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryHan
dle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bvgus}}} 
{K{\footnote\plain{K}{DictionaryHandle:~DictionaryHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~Dictionary
Handle\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~DictionaryHandle ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bvgut}}} 
{K{\footnote\plain{K}{DictionaryHandle:DatabaseHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DatabaseHandle\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also
 class definition for:  DatabaseHandle\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bvguu}}} 
{K{\footnote\plain{K}{DictionaryHandle:Dic
tionaryHdl}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DictionaryHdl\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmhmz}}} 
{K{\footnote\plain{K}{EXC_Allocation}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 EXC_Allocation\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 P
roperties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8psa6u}}} 
{K{\footnote\plain{K}{EXC_Exchange}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 EXC_Exchange\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties
\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmho1}}} 
{K{\footnote\plain{K}{EXC_ExtRel}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 EXC_ExtRel\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmhns}}} 
{K{\footnote\plain{K}{E
XC_StructAlloc}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 EXC_StructAlloc\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmhnt}}} 
{K{\footnote\plain{K}{EXC_Str
ucture}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 EXC_Structure\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{General Error object}}} 
{#{\footnote\plain{#}{.bm
hnx}}} 
{K{\footnote\plain{K}{Error}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 Error\tab -  General Error object\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The error object is used to 
store and pass error information to the application. Errors are 
identified by error class and eror number. In addition the class
 and function name detecting the problem and a short error expla
nation can be provided. Moreover, an error may include upto 6 co
ntext depending error variables that can be displayed in the err
or message. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Usually error messages are written to a log file (er
ror.lst) which is stored in a folder addressed by the TRACE envi
ronment or ini-file variable. It is, however, also possible to d
isplay errors on the terminal. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Usually errors should be reset in
 all functions that may signal an error. Otherwise the calling f
unction may not be able to determine whether the error signaled 
is an old error or has just been signaled in the called function
. This strategy requires, on the other hand, that signaled error
s have to be saved when other functions are called in the error 
handling thet might generate errors again, since those functions
 will reset the error. You can use the Copy() function to save t
he error. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The way errors are presented in the application depend
s on the error handler installed (ErroerHandle). Usually errors 
are written to the console output for console applications and s
hown in a message box for windows applications.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functio
ns\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CheckError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check error state\par
\f2\cf2\fs20\b0\i0 Copy\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy error\par
\f2\cf2\fs20\b0\i0 CreateExceptions\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Throw exception\par
\f2\cf2\fs20\b0\i0 DisplayMessage\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Dispaly message\par
\f2\cf2\fs20\b0\i0 Error\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructo
r\par
\f2\cf2\fs20\b0\i0 GetDecision\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Ask for user decision\par
\f2\cf2\fs20\b0\i0 GetErrorHelpID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get help cont
ext id\par
\f2\cf2\fs20\b0\i0 GetErrorText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Error text\par
\f2\cf2\fs20\b0\i0 GetText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get error text\par
\f2\cf2\fs20\b0\i0 GetTitl
e\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get title\par
\f2\cf2\fs20\b0\i0 Initialize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initialize error\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 InsertStatField\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Insert 
status line field\par
\f2\cf2\fs20\b0\i0 RemoveStatField\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Remove user field from the sta
tus line\par
\f2\cf2\fs20\b0\i0 Reset\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset error text\par
\f2\cf2\fs20\b0\i0 ResetAllErrors\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset all errors\par
\f2\cf2\fs20\b0\i0 R
esetError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset error object\par
\f2\cf2\fs20\b0\i0 SetError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Signal error\par
\f2\cf2\fs20\b0\i0 SetErrorVaria
ble\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set error variable\par
\f2\cf2\fs20\b0\i0 SetHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set error handle\par
\f2\cf2\fs20\b0\i0 SetLanguage\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 S
elect language for error messages\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetSource\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set error resource\par
\f2\cf2\fs20\b0\i0 Se
tStatField\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set value in status line\par
\f2\cf2\fs20\b0\i0 SetStatText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set status line
 text\par
\f2\cf2\fs20\b0\i0 SetText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set text\par
\f2\cf2\fs20\b0\i0 SetTitle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set error object title\par
\f2\cf2\fs20\b0\i0 SetTracePa
th\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set path for error-log file\par
\f2\cf2\fs20\b0\i0 SetType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set eror type\par
\f2\cf2\fs20\b0\i0 SetupErrTex
t\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Setup error text\par
\f2\cf2\fs20\b0\i0 TraceMessage\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Write message to log-file\par
\f2\cf2\fs20\b0\i0 operat
or=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Assign error object\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ~Error\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check error state}}} 
{#{\footnote\plain{#}{.bmhn
y}}} 
{K{\footnote\plain{K}{Error:CheckError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CheckError\tab -  Check error state\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 CheckError
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether an error is set in the error ob
ject and returns the error number, if so.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Copy erro
r}}} 
{#{\footnote\plain{#}{.bmhnz}}} 
{K{\footnote\plain{K}{Error:Copy}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Copy\tab -  Copy error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Copy (Error &err_obj );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he function copies the error object to save relevant error infor
mation. You can use the function to save error information that 
might be destroyed when calling other functions.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_ob
j\tab - Error object\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error object contains information about the l
ast error detected.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Error\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Throw ex
ception}}} 
{#{\footnote\plain{#}{con8psa7u}}} 
{K{\footnote\plain{K}{Error:CreateExceptions}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CreateExceptions\tab -  Throw e
xception\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void CreateExceptions (logical exceptions=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fun
ction enables exception throwing, i.e. an exception is thrown, w
hen an error is signaled. Usully, no exception is thrown.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Paramet
ers\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 exceptions\tab - Trow exception\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When the option is set to YES (true
) exceptions are trown.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Dispaly message}}} 
{#{\footnote\plain{#}{.bmhp1}}} 
{K{\footnote\plain{K}{Error:DisplayMessage
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisplayMessage\tab -  Dispaly message\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical DisplayMessage (const i
nt16 err_code, char *errvar1=NULL, char *errvar2=NULL, char *err
var3=NULL, char *errvar4=NULL, char *errvar5=NULL, char *errvar6
=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical DisplayMessage ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical DisplayMessage (voi
d *error_source, const int16 err_code, char *errvar1=NULL, char 
*errvar2=NULL, char *errvar3=NULL, char *errvar4=NULL, char *err
var5=NULL, char *errvar6=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical DisplayMessage (void *e
rror_source );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows displaying a message for a sig
naled or passed error code. Depending on the error heandle set f
or the error the error is written to the console or displayed on
 the terminal.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if 
the function returns an error. In case of normal termination the
 value is NO. When the function returns YES more detailed error 
information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_code
\tab - Error code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error code passed must be a defined error code.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 e
rrvar1\tab - First error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the first error variabl
e will replace the place holder %1 or the first occurence of %s 
in the error message. The error variable is passed as 0-terminat
ed string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar2\tab - Second error vari
able\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the second error variable will replace the plac
e holder %2 or the seond occurence of %s in the error message. T
he error variable is passed as 0-terminated string with a maximu
m length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar3\tab - Third error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the thi
rd error variable will replace the place holder %3 or the third 
occurence of %s in the error message. The error variable is pass
ed as 0-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar4\tab - F
ourth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the fourth error variable will 
replace the place holder %4 or the fourth occurence of %s in the
 error message. The error variable is passed as 0-terminated str
ing with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar5\tab - Fifth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 text for the fifth error variable will replace the place holder
 %5 or the fifth occurence of %s in the error message. The error
 variable is passed as 0-terminated string with a maximum length
 of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar6\tab - Sixth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the sixth error
 variable will replace the place holder %6 or the sixth occurenc
e of %s in the error message. The error variable is passed as 0-
terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_source\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Cons
tructor}}} 
{#{\footnote\plain{#}{.bmhos}}} 
{K{\footnote\plain{K}{Error:Error}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Error\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                      
    Error (int16 metacode, char *pid, char *errclass, char *ttex
t=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          Error ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                     
     Error (Error &err_obj );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function constructs an error ob
ject. The function does not set an error handle. This must be do
ne explicitly by the application, which can set an application s
pecific error handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 metacode\tab - Meta code for the error
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When using errors in an hirarchical application the meta error i
ndicates which system has caused an error. Thus, e.g. a database
 error is passed to the application error with a default error c
ode for indicating a "database error". In this case more detaile
d information can be retrieved from the last set database error,
 which is displayed than instead of the more general database er
ror. Usually application errors will not define a meta-code. Onl
y when creating a subsystem with a separate error object a meta 
code has to be assigned for errors in this sub-system and handle
s by the error handle of the sub system.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pid\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errclass\tab - Error cla
ss\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Errors are grouped in error classes. An error class is defined
 for each subsystem or application. In database applications the
 error class defines the extent that contains the error descript
ions for all errors of the application or subsystem.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ttext\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_o
bj\tab - Error object\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error object contains information about the 
last error detected.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Error\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ask for
 user decision}}} 
{#{\footnote\plain{#}{.bmhot}}} 
{K{\footnote\plain{K}{Error:GetDecision}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDecision\tab -  Ask for user 
decision\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical GetDecision (const int16 err_code, char *errvar
1=NULL, char *errvar2=NULL, char *errvar3=NULL, char *errvar4=NU
LL, char *errvar5=NULL, char *errvar6=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical GetDecisio
n ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical GetDecision (void *error_source, const int16 err_
code, char *errvar1=NULL, char *errvar2=NULL, char *errvar3=NULL
, char *errvar4=NULL, char *errvar5=NULL, char *errvar6=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  
logical GetDecision (void *error_source );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a
n message from the error code and the passed error variables and
 generates a decision that is displayed in the specific applicat
ion context (console message for console applications and decisi
on box for windows applications. To execute the function success
fully an error handle should be set. If not, a simple error hand
le will be constructed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameter
s\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_code\tab - Error code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error code passed must be a defined err
or code.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar1\tab - First error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the first erro
r variable will replace the place holder %1 or the first occuren
ce of %s in the error message. The error variable is passed as 0
-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar2\tab - Second e
rror variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the second error variable will replace
 the place holder %2 or the seond occurence of %s in the error m
essage. The error variable is passed as 0-terminated string with
 a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar3\tab - Third error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text fo
r the third error variable will replace the place holder %3 or t
he third occurence of %s in the error message. The error variabl
e is passed as 0-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 e
rrvar4\tab - Fourth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the fourth error varia
ble will replace the place holder %4 or the fourth occurence of 
%s in the error message. The error variable is passed as 0-termi
nated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar5\tab - Fifth error va
riable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the fifth error variable will replace the pla
ce holder %5 or the fifth occurence of %s in the error message. 
The error variable is passed as 0-terminated string with a maxim
um length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar6\tab - Sixth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the si
xth error variable will replace the place holder %6 or the sixth
 occurence of %s in the error message. The error variable is pas
sed as 0-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_sou
rce\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get help context id}}} 
{#{\footnote\plain{#}{.bmhou}}} 
{K{\footnote\plain{K}{Error:GetErrorHelpID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetErrorHelpID
\tab -  Get help context id\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetErrorHelpID ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ret
urns a help context id that can be used to call an online help t
opic associated with the error.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Error text}}} 
{#{\footnote\plain{#}{.bmho
v}}} 
{K{\footnote\plain{K}{Error:GetErrorText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetErrorText\tab -  Get Error text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetErrorT
ext (void *error_source, const int16 err_code, char *errvar1=NUL
L, char *errvar2=NULL, char *errvar3=NULL, char *errvar4=NULL, c
har *errvar5=NULL, char *errvar6=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates an 
error message from the error definition read from the passed err
or source replacing the place holders by the passed error variab
les.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Error text\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error text is passed as 0-termin
ated string with a maximum length of 500 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 er
ror_source\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_code\tab - Error code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error code passed must be a 
defined error code.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar1\tab - First error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the
 first error variable will replace the place holder %1 or the fi
rst occurence of %s in the error message. The error variable is 
passed as 0-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar
2\tab - Second error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the second error variable w
ill replace the place holder %2 or the seond occurence of %s in 
the error message. The error variable is passed as 0-terminated 
string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar3\tab - Third error variable
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the third error variable will replace the place hol
der %3 or the third occurence of %s in the error message. The er
ror variable is passed as 0-terminated string with a maximum len
gth of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar4\tab - Fourth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the fourth 
error variable will replace the place holder %4 or the fourth oc
curence of %s in the error message. The error variable is passed
 as 0-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar5\tab - Fif
th error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the fifth error variable will repl
ace the place holder %5 or the fifth occurence of %s in the erro
r message. The error variable is passed as 0-terminated string w
ith a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar6\tab - Sixth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text
 for the sixth error variable will replace the place holder %6 o
r the sixth occurence of %s in the error message. The error vari
able is passed as 0-terminated string with a maximum length of 8
0.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get error text}}} 
{#{\footnote\plain{#}{.bmhow}}} 
{K{\footnote\plain{K}{Error:GetText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetText\tab -  Get error text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char
 *GetText ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the error text currently set 
in the error objkect.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get title}}} 
{#{\footnote\plain{#}{.bmhox}}} 
{K{\footnote\plain{K}{Error:GetTitle
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetTitle\tab -  Get title\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetTitle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the
 eror title for the error class.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Initialize error}}} 
{#{\footnote\plain{#}{.b
mhoy}}} 
{K{\footnote\plain{K}{Error:Initialize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Initialize\tab -  Initialize error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Initializ
e ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  void Initialize (int16 metacode, char *pid, char *errclas
s, char *ttext=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function initializes an error object.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 m
etacode\tab - Meta code for the error\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When using errors in an hirarchi
cal application the meta error indicates which system has caused
 an error. Thus, e.g. a database error is passed to the applicat
ion error with a default error code for indicating a "database e
rror". In this case more detailed information can be retrieved f
rom the last set database error, which is displayed than instead
 of the more general database error. Usually application errors 
will not define a meta-code. Only when creating a subsystem with
 a separate error object a meta code has to be assigned for erro
rs in this sub-system and handles by the error handle of the sub
 system.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pid\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errclass\tab - Error class\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Errors are grouped in error cl
asses. An error class is defined for each subsystem or applicati
on. In database applications the error class defines the extent 
that contains the error descriptions for all errors of the appli
cation or subsystem.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ttext\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Insert status line field}}} 
{#{\footnote\plain{#}{.bmhoz}}} 
{K{\footnote\plain{K}{Error:I
nsertStatField}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 InsertStatField\tab -  Insert status line field\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void In
sertStatField ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a field in the status lin
e for displaying information from the error object in the status
 line. The behaviour of the statusline depends on the handling i
n the error handle. The default error handle does not support st
aus line information.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Remove user field from the status line}}} 
{#{\footnote\plain{#}{con8p
sa8u}}} 
{K{\footnote\plain{K}{Error:RemoveStatField}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 RemoveStatField\tab -  Remove user field fro
m the status line\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void RemoveStatField ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function removes 
a statusline field that had been inserted before using InserStat
Field().\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset error text}}} 
{#{\footnote\plain{#}{.bmhq1}}} 
{K{\footnote\plain{K}{Error:Reset}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Reset\tab -  Reset error tex
t\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Reset ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function resets the error text and the erro
r type, but not the error code. For resetting the error object c
all ResetError().\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset all errors}}} 
{#{\footnote\plain{#}{.bmhps}}} 
{K{\footnote\plain{K}{Error:ResetAllErrors}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Reset
AllErrors\tab -  Reset all errors\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void ResetAllErrors ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n resets the erors for all subsystems for the given thread.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset
 error object}}} 
{#{\footnote\plain{#}{.bmhpt}}} 
{K{\footnote\plain{K}{Error:ResetError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ResetError\tab -  Reset error obje
ct\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void ResetError ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function resets the current error set
tings. This function should be called in any function that might
 set an error.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Signal error}}} 
{#{\footnote\plain{#}{.bmhpu}}} 
{K{\footnote\plain{K}{Error:SetError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetError\tab -  Signal 
error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetError (const int16 err_code, char *obj, char *mod 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function signals an error for the error object. Usually th
e error is recorded in a log file (error.lst).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_code
\tab - Error code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error code passed must be a defined error code.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 o
bj\tab - Object or class name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The class name of the function that has 
detected the error is passed as 0-terminated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mod\tab - Module 
or function\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The module or function name where the error was detec
ted is passed as 0-terminated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set error variable}}} 
{#{\footnote\plain{#}{.bmhpv}}} 
{K{\footnote\plain{K}{Err
or:SetErrorVariable}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetErrorVariable\tab -  Set error variable\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Se
tErrorVariable (int8 varnum, char *vartext=NULL, int16 varlen=0 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function is used to set an error variable before signaling
 an error (-> SetError()). The value of this error variable will
 replace the place holder according to the variable number in th
e error description text (e.g. setting error variable 2 will rep
lace the place holder %2 or the second occurence of %s in the er
ror text).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 varnum\tab - Variable number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Number of the error v
ariable to be set.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 vartext\tab - Variable text\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the variabl
e is passed as 0-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 v
arlen\tab - Variable length\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When the variable text is not passed as 0-
terminated string the length defines the length for the string p
assed.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set error handle}}} 
{#{\footnote\plain{#}{.bmhpw}}} 
{K{\footnote\plain{K}{Error:SetHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetHandle\tab -  Set error
 handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetHandle (ErrorHandle *error_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function al
lows setting an application specific error handle for the error 
object.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_hdl\tab - Error handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An error handle is usual
ly passed as application specific error handle that provides app
lication or subsystem specific functions for displaying errors.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{S
elect language for error messages}}} 
{#{\footnote\plain{#}{.bmhpx}}} 
{K{\footnote\plain{K}{Error:SetLanguage}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetLangu
age\tab -  Select language for error messages\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetLanguage (char 
*err_lang );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows setting a language for displayin
g errors when the associated error handle supports multilingual 
error messages. The exact language definitions are specific for 
the associated handler, however, the English language name is us
ed in most cases.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_lang\tab - Error language\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The language 
is passed as 0-terminated string. The exact language definitions
 are specific for the associated handler, however, the English l
anguage name is used in most cases.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set error resource}}} 
{#{\footnote\plain{#}{.bmhpy}}} 
{K{\footnote\plain{K}{Error
:SetSource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetSource\tab -  Set error resource\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetSource (void *e
rror_source );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When supporting an error resource that contains th
e error definitions this can be associated with the error using 
this function. The type of the error resource depends on the ero
r handle associated with the error. Usually, database applicatio
ns pass a database handle  for a database that contains an exten
t with the error class name that stores the error definitions.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_source\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set value in status line}}} 
{#{\footnote\plain{#}{.bmhpz}}} 
{K{\footnote\plain{K}{Error:SetSta
tField}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetStatField\tab -  Set value in status line\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetStatField 
(char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a status field has been inserted in the sta
tus line of the application (-> InsertStatField()), the function
 will send the passed string value to the status line by means o
f the error handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0
-terminated string area.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set status line text}}} 
{#{\footnote\plain{#}{con8psa9u}}} 
{K{\footnote\plain{K}{Error:SetSt
atText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetStatText\tab -  Set status line text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetStatText (char 
*string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will send the passed string value to the 
default text field of the status line by means of the error hand
le. This function does not require a application defined field i
n the status line as provided with InsertStatField().\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 s
tring\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set te
xt}}} 
{#{\footnote\plain{#}{.bmhr1}}} 
{K{\footnote\plain{K}{Error:SetText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetText\tab -  Set text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetText (char *err_
text );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function sets the text with an error message in the e
rror object text field.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_text\tab - Error text\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error t
ext is passed as 0-terminated string with a maximum length of 50
0 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set error object title}}} 
{#{\footnote\plain{#}{.bmhqs}}} 
{K{\footnote\plain{K}{Error:SetTitle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTitle\tab -
  Set error object title\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetTitle (char *ttext=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The f
unction changes the title for the error object class.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 t
text\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set path for error-log file}}} 
{#{\footnote\plain{#}{.bmhqt}}} 
{K{\footnote\plain{K}{Error:SetTracePath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTrac
ePath\tab -  Set path for error-log file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetTracePath (char *cpa
th );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function changes the path for the current error log-fil
e. The default ErrorHandle records all errors in a file error.ls
t which is located in a folder addressed by the path defined in 
the environment or system variable TRACE. The function will chan
ge the settings of this system variable.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpath\tab - Complet
e path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete path is passed as 0-terminated string with a 
maximum length of 255 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set eror type}}} 
{#{\footnote\plain{#}{.bmhqu}}} 
{K{\footnote\plain{K}{Error:SetTyp
e}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetType\tab -  Set eror type\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetType (char err_type );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion sets the passed error type. The error type is evaluated by t
he associated error handle for displaying error messages in an a
ppropriate way.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_type\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Setup error text}}} 
{#{\footnote\plain{#}{.bmhqv}}} 
{K{\footnote\plain{K}{Error:S
etupErrText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetupErrText\tab -  Setup error text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetupErrText (vo
id *error_source );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function replaces the place holders in th
e eror text with the error variables set in the error object.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 error_source\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Write message to log-file}}} 
{#{\footnote\plain{#}{.bmhqy}}} 
{K{\footnote\plain{K}{Error:TraceM
essage}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 TraceMessage\tab -  Write message to log-file\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void TraceMessage
 (char *errvar1=NULL, char *errvar2=NULL, char *errvar3=NULL, ch
ar *errvar4=NULL, char *errvar5=NULL, char *errvar6=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The f
unction allows writing a message to the log file without signali
ng an error. The error variables passed are replaced in the mess
age befor writing the message to the log-file.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar1\tab -
 First error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the first error variable will 
replace the place holder %1 or the first occurence of %s in the 
error message. The error variable is passed as 0-terminated stri
ng with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar2\tab - Second error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 text for the second error variable will replace the place holde
r %2 or the seond occurence of %s in the error message. The erro
r variable is passed as 0-terminated string with a maximum lengt
h of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar3\tab - Third error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the third erro
r variable will replace the place holder %3 or the third occuren
ce of %s in the error message. The error variable is passed as 0
-terminated string with a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar4\tab - Fourth e
rror variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the fourth error variable will replace
 the place holder %4 or the fourth occurence of %s in the error 
message. The error variable is passed as 0-terminated string wit
h a maximum length of 80.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar5\tab - Fifth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text f
or the fifth error variable will replace the place holder %5 or 
the fifth occurence of %s in the error message. The error variab
le is passed as 0-terminated string with a maximum length of 80.
\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 errvar6\tab - Sixth error variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The text for the sixth error variab
le will replace the place holder %6 or the sixth occurence of %s
 in the error message. The error variable is passed as 0-termina
ted string with a maximum length of 80.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Assign error object}}} 
{#{\footnote\plain{#}{con8ps
a0u}}} 
{K{\footnote\plain{K}{Error:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  Assign error object\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Error &operato
r= (Error &err_obj );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function assigns all attributes of the 
error object passed to the current error object. It can be used 
instaed of the Copy() function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Reference to an err
or object\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error object contains information about the last er
ror detected.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Error\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 err_
obj\tab - Error object\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The error object contains information about the
 last error detected.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Error\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destru
ctor}}} 
{#{\footnote\plain{#}{.bmhs1}}} 
{K{\footnote\plain{K}{Error:~Error}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~Error\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                        
  ~Error ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function destroys the error object.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Event Handle
r Class}}} 
{#{\footnote\plain{#}{.bmhsw}}} 
{K{\footnote\plain{K}{EventHandler}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 EventHandler\tab -  Event Handler Class\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The E
vent Handler Class is a base class for supporting writing event 
handlers. It provides some basic functionality for setting and c
alling event handlers for handling server events. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 You may derive
 your own handler classes from EventHandler to provide handler f
unctions for server events. You may overload the handler functio
ns InstanceEventHandler() and PropertyEventHandler() for providi
ng your application specific event handling.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The event handler al
lows handling instance, property (collection) or local events. I
nstance and property events are client server events that are ge
nerated, when an instance or collection changes. Local events ar
e those events, which are usually handled in the instance or pro
perty context. You may, however, set event handler for local eve
nts for a specific property handle, which allows overwriting or 
expanding context functions.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ActivateProcessEv
entHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Activate process event handlers\par
\f2\cf2\fs20\b0\i0 ActivateServerEventHa
ndler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Activate server event handlers\par
\f2\cf2\fs20\b0\i0 EventHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Konstruktor\par
\f2\cf2\fs20\b0\i0 In
stanceEventHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Instance event handler\par
\f2\cf2\fs20\b0\i0 ProcessInstanceHandler
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Process Instance Event Handler\par
\f2\cf2\fs20\b0\i0 ProcessPropertyHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Process 
Property Event Handler\par
\f2\cf2\fs20\b0\i0 PropertyEventHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Property event handl
er\par
\f2\cf2\fs20\b0\i0 ~EventHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Activate process event handlers}}} 
{#{\footnote\plain{#}{.bmhsy
}}} 
{K{\footnote\plain{K}{EventHandler:ActivateProcessEventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ActivateProcessEventHand
ler\tab -  Activate process event handlers\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void ActivateProcessEventH
andler ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function activates the event handlers for process
 events. When not activating process event handling process even
ts will not passed to the application.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Activate server event hand
lers}}} 
{#{\footnote\plain{#}{.bmhsz}}} 
{K{\footnote\plain{K}{EventHandler:ActivateServerEventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ActivateServerE
ventHandler\tab -  Activate server event handlers\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void ActivateServer
EventHandler ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function activates the event handlers for s
erver events. When not activating server event handling process 
events will not passed to the application.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Konstruktor}}} 
{#{\footnote\plain{#}{.bmhu1}}} 
{K{\footnote\plain{K}{Event
Handler:EventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 EventHandler\tab -  Konstruktor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                   
       EventHandler (PropertyHandle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Constructing an 
event handler class instance for the property handle passed to t
he function. The constructor sets the property event handler as 
well as the instance event handler. The property handle is regis
tered for receiving server events (-> RegisterHandle()).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Paramete
rs\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened
 property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{I
nstance event handler}}} 
{#{\footnote\plain{#}{.bmhtu}}} 
{K{\footnote\plain{K}{EventHandler:InstanceEventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Inst
anceEventHandler\tab -  Instance event handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical Instanc
eEventHandler (CSA_Events event_id, int32 objid );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The instance e
vent handler has to be overloaded when specific handling for ins
tance events as updated or deleted has to be provided. The type 
of event is passed via the event_id. The objid refers to the ins
tance identity of the updated instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a notification handl
er is implemented in the context class, it will be called after 
calling the event handler set for the ptoperty handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Continuation\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this value is true the function will contin
ue, otherwise the processing terminates.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 event_id\tab - Iven
d type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The event type defines the type of the passed event.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 objid\tab -
 Local object identity (LOID)\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The local object identity is a 31-b
it number that identifies an object instance uniquely in a datab
ase. LOIDs are available only for independently stored instances
 but not for instances of imbedded structures.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Process Instance E
vent Handler}}} 
{#{\footnote\plain{#}{.bmhtv}}} 
{K{\footnote\plain{K}{EventHandler:ProcessInstanceHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProcessInst
anceHandler\tab -  Process Instance Event Handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical Proc
essInstanceHandler (DB_Event intevent );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The process event handle
r has to be overloaded when specific handling for process events
 (as update or delete instance) has to be provided. The type of 
event is passed via the intevent parameter. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function should 
return true (YES) to pre-process handlers to abort the process.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Continuation\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this value is true the function wi
ll continue, otherwise the processing terminates.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 intev
ent\tab - Event identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The event identifier is an internal number 
that is defined for typical events.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for
:  DB_Event\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Process Property Event Handler}}} 
{#{\footnote\plain{#}{.bmhtw}}} 
{K{\footnote\plain{K}{EventHandler:Proc
essPropertyHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProcessPropertyHandler\tab -  Process Property Even
t Handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical ProcessPropertyHandler (DB_Event inteve
nt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The process event handler has to be overloaded when specifi
c handling for process events (as read or change selection) has 
to be provided. The type of event is passed via the intevent par
ameter. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function should return true (YES) to pre-process han
dlers to abort the process.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Continuation\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this v
alue is true the function will continue, otherwise the processin
g terminates.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 intevent\tab - Event identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The event ident
ifier is an internal number that is defined for typical events.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  DB_Event\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Property event handler}}} 
{#{\footnote\plain{#}{.bm
htz}}} 
{K{\footnote\plain{K}{EventHandler:PropertyEventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 PropertyEventHandler\tab -  Prope
rty event handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 virtual logical PropertyEventHandler (CSA_Event
s event_id, int32 objid );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The property event handler has to be o
verloaded when specific handling for property (collection) event
s as updated or deleted has to be provided. The type of event is
 passed via the event_id. The objid refers to the index identity
 of the updated collection.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a notification handler is implem
ented in the context class, it will be called after calling the 
event handler set for the ptoperty handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Continua
tion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When this value is true the function will continue, otherwis
e the processing terminates.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 event_id\tab - Ivend type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ev
ent type defines the type of the passed event.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 objid\tab - Local objec
t identity (LOID)\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The local object identity is a 31-bit number th
at identifies an object instance uniquely in a database. LOIDs a
re available only for independently stored instances but not for
 instances of imbedded structures.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{con8psa_u}}} 
{K{\footnote\plain{K}{EventHandle
r:~EventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~EventHandler\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                        
  ~EventHandler ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Destructing the class will reset the handler
 in the property handle. The property handle is unregistered fro
m receiving server events (-> UnregisterHandle()).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Event Link}}} 
{#{\footnote\plain{#}{.bmh
v1}}} 
{K{\footnote\plain{K}{EventLink}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 EventLink\tab -  Event Link\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 This is a function link object 
for handling events. The function link stores a pointer to the h
andler class instance and the function to be called.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The followin
g status indicators are used:\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 stsini - handler is active and will
 be executed\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 EventLink\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 IsActive\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ~
EventLink\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destruktor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{.bmhuv}}} 
{K{\footnote\plain{K}{EventLink:EventLink}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 EventLi
nk\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          EventLink (vcls *vclspt
r, EVTP evtptri );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          EventLink ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0        
                  EventLink (vcls *vclsptr, EVTPL evtptril );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The
 constructor creates an event link that defines a link to an eve
nt handler.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 vclsptr\tab - Virtual class pointer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The virtual c
lass pointer refers to any type of class derived from the virtua
l class.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 evtptri\tab - Event handler pointer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The event handler pointer 
is a function pointer as:\par
  logical vcls::EVTP(CSA_Events, long, 
PropertyHandle &).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 evtptril\tab - Event handler pointer for local even
ts\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The event handler pointer is a function pointer as:\par
  logical v
cls::EVTPL(DB_Events, PropertyHandle &).\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bmhuw}}} 
{K{\footnote\plain{K}{EventLink:IsActive
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsActive\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsActive ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The f
unction returns YES when the question was answered positivly. Ot
herwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destruktor}}} 
{#{\footnote\plain{#}{.bmhux}}} 
{K{\footnote\plain{K}{EventLink:~EventLink}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~Event
Link\tab -  Destruktor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~EventLink ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data Ex
change}}} 
{#{\footnote\plain{#}{IDH1zuh13}}} 
{K{\footnote\plain{K}{ExecExchange}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecExchange\tab -  Data Exchange\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Propertie
s\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ExecExchange\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constuctor\par
\f2\cf2\fs20\b0\i0 Execute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute data exchange
\par
\f2\cf2\fs20\b0\i0 GetExtExtentName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetIntExtentName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ~ExecExchange\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Con
stuctor}}} 
{#{\footnote\plain{#}{Ind2.mmta}}} 
{K{\footnote\plain{K}{ExecExchange:ExecExchange}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecExchange\tab -  Constuct
or\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ExecExchange (char *excnames, logical
 exp_opt, const DBObjectHandle &w_obhandle_c=DBObjectHandle(), c
onst DatabaseHandle &w_resdb_c=DatabaseHandle() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0               
           ExecExchange (char *excnames, logical exp_opt, Proper
tyHandle &pi_handle, const DatabaseHandle &w_resdb_c=DatabaseHan
dle() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 excnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 exp_opt\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_obhandle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_resdb\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pi_han
dle\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Execute data exchange}}} 
{#{\footnote\plain{#}{Ind2.mmt8}}} 
{K{\footnote\plain{K}{ExecExchange:Execute}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Execute\tab - 
 Execute data exchange\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Execute ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termina
tion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In c
ase of normal termination the value is NO. When the function ret
urns YES more detailed error information are available in the er
ror object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.mmt9}}} 
{K{\footnote\plain{K}{ExecExchange:GetExtExtentName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetExtExtentNam
e\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetExtExtentName (int32 indx0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Extent 
name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string or as buffe
r with trailing blanks and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the collecti
on addresses the first instance in the collection with 0. AUTO (
-1) refers to an undefined position.\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.mmt0}}} 
{K{\footnote\plain{K}{ExecExchange:GetInt
ExtentName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetIntExtentName\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetIntExtentName (int32 indx
0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-term
inated string or as buffer with trailing blanks and a maximum le
ngth of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 position in the collection addresses the first instance in the 
collection with 0. AUTO (-1) refers to an undefined position.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Des
tructor}}} 
{#{\footnote\plain{#}{C_de35_}}} 
{K{\footnote\plain{K}{ExecExchange:~ExecExchange}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~ExecExchange\tab -  Destruct
or\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~ExecExchange ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance Handle}}} 
{#{\footnote\plain{#}{Ind2
.mmn.}}} 
{K{\footnote\plain{K}{Instance}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 Instance\tab -  Instance Handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Instance handles are used
 to pass and return structured database instances. Instead of an
 instance handle a (void *) area can be passed, that is automati
cally converted into an instance handle. The instance area is al
located and freed by the application.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Key Hand
le}}} 
{#{\footnote\plain{#}{Ind2.mmp8}}} 
{K{\footnote\plain{K}{Key}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 Key\tab -  Key Handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Key handles are used to pass and r
eturn keys. Instead of a key handle a (char *) area can be passe
d, that is automatically converted into a key. The key area is a
llocated and freed by the application.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetData
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide key area\par
\f2\cf2\fs20\b0\i0 Key\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Konstruktor\par
\f2\cf2\fs20\b0\i0 SetData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set key area\par
\f2\cf2\fs20\b0\i0 operator 
char*\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Type conversion\par
\f2\cf2\fs20\b0\i0 operator&\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Adress operator\par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Assig
nment operator\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide key area}}} 
{#{\footnote\plain{#}{Ind2.mmp9}}} 
{K{\footnote\plain{K}{Key:GetData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetData\tab -  Prov
ide key area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the key inst
ance area as (char *) pointer.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Key area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key area
 is structured according to the key definition (key smcb).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Konstr
uktor}}} 
{#{\footnote\plain{#}{Ind2.mmp0}}} 
{K{\footnote\plain{K}{Key:Key}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Key\tab -  Konstruktor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          K
ey (char *keyarea );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          Key ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A key handl
e is contructed with the key area passed to the handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameter
s\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keyarea\tab - Key area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key area is structured according to the ke
y definition (key smcb).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set key area}}} 
{#{\footnote\plain{#}{IDg.60zn}}} 
{K{\footnote\plain{K}{Key:SetData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetData\tab - 
 Set key area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *SetData (char *keyarea );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows
 assigning a new key area to the key handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Key ar
ea\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key area is structured according to the key definition (ke
y smcb).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keyarea\tab - Key area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key area is structured ac
cording to the key definition (key smcb).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Type conversion}}} 
{#{\footnote\plain{#}{Ind2.mmp
.}}} 
{K{\footnote\plain{K}{Key:operator char*}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator char*\tab -  Type conversion\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  NOTYPE opera
tor char* ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator supports implicite type conversion fr
om (char *) pointers into key handles.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Adress opera
tor}}} 
{#{\footnote\plain{#}{Ind2.mmp_}}} 
{K{\footnote\plain{K}{Key:operator&}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator&\tab -  Adress operator\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *opera
tor& ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator returns the key area.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Key are
a\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key area is structured according to the key definition (key
 smcb).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Assignment operator}}} 
{#{\footnote\plain{#}{IDg.60zq}}} 
{K{\footnote\plain{K}{Key:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  Assig
nment operator\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Key &operator= (const Key &key_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operato
r allows assigning a new key area from the passed key handle to 
the key handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Kea reference\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to a key han
dle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_ref\tab - Kea re
ference\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to a key handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for: 
 Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{ODABA client}}} 
{#{\footnote\plain{#}{Ind2.mmsa}}} 
{K{\footnote\plain{K}{ODABAClient}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 ODABAClient\tab -  ODABA client\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 To
 run client server applications you must create a ODABA client i
nstance. To support several connections to different servers you
 can create one or more clients within your application.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 When con
necting to different servers you must create one client for each
 server. You can open several clients in an application. The fir
st client, however, is considered to be the main client. The mai
n client should be the last client closed in an application. Aft
er closing the main client you can open another main client. Sin
ce there is no hierarchy defined between clients the system will
 not check \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The main client registers the process and activates t
he error log file. It opens the system database for providing er
ror messages and the data catalogue if one has been specified in
 the system environment (see ODABAClient constructor). These inf
ormation are described in an ini-file, which can be passed to th
e client.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 For initializing and registring the process properly a 
client should be created also for locally running applications.\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 B
ase Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ClientConnection\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Connection to client\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Fu
nctions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ActivateGUIMessages\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Activate GUI-Messages\par
\f2\cf2\fs20\b0\i0 Connect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Connec
t to server\par
\f2\cf2\fs20\b0\i0 Disconnect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Disconnect from server\par
\f2\cf2\fs20\b0\i0 Exist\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check whethe
r a database exists\par
\f2\cf2\fs20\b0\i0 GetDBError\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get last database error\par
\f2\cf2\fs20\b0\i0 GetDataSou
rce\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get data source name\par
\f2\cf2\fs20\b0\i0 GetServerVariable\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get system variable 
from server\par
\f2\cf2\fs20\b0\i0 IsConnected\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is client connected\par
\f2\cf2\fs20\b0\i0 KillClient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Kill clie
nt on the server\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ODABAClient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Konstructor\par
\f2\cf2\fs20\b0\i0 PackDatabase\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Pack datab
ase\par
\f2\cf2\fs20\b0\i0 SendClientMessage\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Send message to one or all clients\par
\f2\cf2\fs20\b0\i0 SetServe
rVariable\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set system variable on server side\par
\f2\cf2\fs20\b0\i0 ShutDown\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Shut down
 client\par
\f2\cf2\fs20\b0\i0 StartPause\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Pause Server\par
\f2\cf2\fs20\b0\i0 StatDisplay\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Display database sta
tistics\par
\f2\cf2\fs20\b0\i0 StopPause\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Stop pausing server\par
\f2\cf2\fs20\b0\i0 SysInfoDisplay\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Display sys
tem information\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator bool\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare clients\par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Assign O
DABA client handle\par
\f2\cf2\fs20\b0\i0 ~ODABAClient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Activate GUI-Messages}}} 
{#{\footnote\plain{#}{I
nd2.mms8}}} 
{K{\footnote\plain{K}{ODABAClient:ActivateGUIMessages}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ActivateGUIMessages\tab -  Act
ivate GUI-Messages\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void ActivateGUIMessages ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For console appl
ications messages will be sent to the console, only. When messag
es should be displayed in GUI message boxes as well you can use 
the Activate GUIMessages() function to enable this feature.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Conne
ct to server}}} 
{#{\footnote\plain{#}{C_de34_}}} 
{K{\footnote\plain{K}{ODABAClient:Connect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Connect\tab -  Connect to serve
r\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Connect (char *server_name, uint32 host_port=6123 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
is function establishs a connection to the server. When not conn
ecting the cleint to a server the client runs in local mode. Whe
n running in local mode all resources are located on th client m
achine. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When being connected to a server you can access ressourc
es located on the server or on the local machine by setting the 
"local_resources"-parameter when constructing dictionary or data
base handles.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When connecting several times for closing the conne
ction you must disconnect as often as you have connected to the 
server. When the client is connected once it cannot be connected
 to another server until the open connection is closed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an
 error. In case of normal termination the value is NO. When the 
function returns YES more detailed error information are availab
le in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 server_name\tab - Server name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ser
ver name consists of the port number and the server identificati
on. Both has been defined when starting up the server (e.g.6123@
MetaServer). \par
If no server string is passed the client expects th
e server name in an environment variable ODABA_SERVER or in an o
daba.ini-File on the ODABA installation folder.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 host_port\tab - Port n
umber\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The port number must be the same the server has been starte
d with (e.g.6123). If no port number is passed the client expect
s the port number being defined in a system variable ODABA_SERVE
R_PORT or in a system environment INI-file on the ODABA installa
tion folder.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Disconnect from server}}} 
{#{\footnote\plain{#}{Ind2.mms.}}} 
{K{\footnote\plain{K}{ODABAClient:Disconnec
t}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Disconnect\tab -  Disconnect from server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Disconnect ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Please 
make shure that all resources are closed before disconnecting th
e client. Disconnecting the client before closing all opened han
dles may cause problems and not all changes are stored.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check whe
ther a database exists}}} 
{#{\footnote\plain{#}{Ind2.mms_}}} 
{K{\footnote\plain{K}{ODABAClient:Exist}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Exist\tab -  Check wh
ether a database exists\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Exist (char *cpath );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n returns YES when a database with the given path exists and has
 been initialized as ODABA database. The database path may refer
 to a database or dictionary. When the referenced file does not 
exist or does not refer to an ODABA database the function return
s NO. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Da die Datenbank zum Pr\'fcfen er\'f6ffnet wird, kann es im Fehl
erfall geschehen, da\'df eine ung\'fcltige Datei angelegt wird.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question wa
s answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpath\tab - C
omplete path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete path is passed as 0-terminated string w
ith a maximum length of 255 characters.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get last database error}}} 
{#{\footnote\plain{#}{C_
de34a}}} 
{K{\footnote\plain{K}{ODABAClient:GetDBError}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDBError\tab -  Get last database error\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
Error *GetDBError ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the last database err
or including error number and description. For more details see 
Error class definition.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Database error\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also clas
s definition for:  Error\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get data source name}}} 
{#{\footnote\plain{#}{C_de34b}}} 
{K{\footnote\plain{K}{ODABAClient:G
etDataSource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDataSource\tab -  Get data source name\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetDataSo
urce (int32 indx0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the data source name on
 position indx0. The function returns a value, only, if the appl
ication is working with a data catalogue, i.e. the ini-file must
 contain a valid DATA-CATALOGUE section.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data sourc
e name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source name is passed as 0-terminated string with
 a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in 
collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the collection addresses the first ins
tance in the collection with 0. AUTO (-1) refers to an undefined
 position.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get system variable from server}}} 
{#{\footnote\plain{#}{Ind2.mnt9}}} 
{K{\footnote\plain{K}{ODABAClient:Ge
tServerVariable}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetServerVariable\tab -  Get system variable from serv
er\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetServerVariable (char *var_name );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function return
s the value for a system variable set on the server side.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Value for the system variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value for a system varia
ble must not exceed 255 characters and is provided as 0-terminat
ed string.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 var_name\tab - System variable name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Name of the sy
stem variable on the server or client side. System variable name
s must not exceed 40 characters and are provided as 0-terminated
 strings.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is client connected}}} 
{#{\footnote\plain{#}{IDg.6.3n}}} 
{K{\footnote\plain{K}{ODABAClient:IsConnected}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsCon
nected\tab -  Is client connected\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsConnected ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n checks whether the client is connected or not. When being conn
ected the function returns YES, NO otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Retur
n value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered p
ositivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Kill client on the server}}} 
{#{\footnote\plain{#}{Ind2.
mnt.}}} 
{K{\footnote\plain{K}{ODABAClient:KillClient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 KillClient\tab -  Kill client on the server
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical KillClient (int32 client_id, int32 wait_sec=300, logica
l send_message=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows killing one or all clie
nts on the server. When killing all clients the client sending t
he command is not killed.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Befor killing the client(s) the system 
is waiting wait_sec seconds.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The va
lue is YES if the function returns an error. In case of normal t
ermination the value is NO. When the function returns YES more d
etailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Para
meters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 client_id\tab - Client the message is send to\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The client number 
(client_id) is a number the server has assigned to the client. Y
ou can retrieve client numbers by using the GetClientHandle() fu
nction which returns client information for all active clients.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w
ait_sec\tab - Number of seconds to wait\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The system waits the given num
ber of seconds befor executing the request. Default is 300 secon
ds (5 minutes).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 send_message\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Konstructor}}} 
{#{\footnote\plain{#}{Ind2.mnt_}}} 
{K{\footnote\plain{K}{ODABAClient:ODA
BAClient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ODABAClient\tab -  Konstructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ODABAC
lient (char *inipath, char *application_name=NULL, char *progpat
h=NULL, ApplicationTypes application_type=APT_Console );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0         
                 ODABAClient ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          ODABAC
lient (const ODABAClient &client_refc );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                         
 ODABAClient (CClient *cclient_ptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 To run an application in cl
ient/server mode at least one client must be constructed for an 
application. The first client created is the main client that sh
ould be created at the very beginning of the application and tha
t should be closed at the very end of the application. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 In additi
on a number of other clients can be created to connect to differ
ent servers in one application. When creating a main client an i
ni file can be provided to the constructor. This ini file define
s the application section. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 System and catalogue sections are rea
d from the ODABA2.INI file that is stored in the ODABA2 installa
tion path. It is, however, possible to provide separate system a
nd catalogue definitions for the client with the passed INI-file
. In this case the passed INI-file must contain either the syste
m and catalogue sections or it must refer to an INI-file that co
ntains these sections by defining the path for the system INI-fi
le in the variable SYSTEM_ENVIRONMENT.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The INI-file passed to the
 client must contain a section with the name of the application 
or (when no application name has been passed) a section with the
 name "APPLICATION_DATA".\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 inipath\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 application_name\tab - Al
lication name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of the application is usually also the sec
tion name for the application variables in the ini file.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 progpath
\tab - Programme path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the path that is usually passed as first
 argument to the application.\par
Default: NULL\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 application_type\tab - Run 
as console application\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option indicates that the application
 will run as console application. In this case errors are sent t
o the console (default: YES). If this option is set to NO messag
e boxes are created instead (for Windows, only).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 client_ref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ccli
ent_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Pack database}}} 
{#{\footnote\plain{#}{IDg.6.3s}}} 
{K{\footnote\plain{K}{ODABAClient:PackDatabase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 PackDataba
se\tab -  Pack database\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical PackDatabase (char *cpath, char *temp
_path=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function packs a database. The function packs t
he database by copying it to a new file. If there is not enough 
space on the disk a path refering to temporary directory must be
 passed to the packing function. Otherwise the database is packe
d in the same folder.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the database consists of several main 
or sub-bases each one is copied in its own location or to the te
mporary folder.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if
 the function returns an error. In case of normal termination th
e value is NO. When the function returns YES more detailed error
 information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpath\tab - 
Complete path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete path is passed as 0-terminated string 
with a maximum length of 255 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 temp_path\tab - Temporary pat
h\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The temporary path refers to a folder location for storing temp
orary files. It is passed as 0-terminated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Send message to
 one or all clients}}} 
{#{\footnote\plain{#}{Ind2.mnka}}} 
{K{\footnote\plain{K}{ODABAClient:SendClientMessage}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SendCli
entMessage\tab -  Send message to one or all clients\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SendClie
ntMessage (int32 client_id, char *mtext, char *mtitle=NULL, char
 mtype=0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function sends a message to one or all clients. D
epending on the client type the message is displayed on the cons
ole (console applications) or as message box. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The message is sen
t to the client adressed via the client_id. If no client_id is p
assed (UNDEF) the message is send to all clients except the send
ing one.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the fu
nction returns an error. In case of normal termination the value
 is NO. When the function returns YES more detailed error inform
ation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 client_id\tab - Cli
ent the message is send to\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The client number (client_id) is a num
ber the server has assigned to the client. You can retrieve clie
nt numbers by using the GetClientHandle() function which returns
 client information for all active clients.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mtext\tab - Message text\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e message text may contain up to 500 characters and must be 0-te
rminated.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mtitle\tab - Message title\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When displaying the message in a d
ialogue box the message title will be displayed in the title bar
. The message title should refer in some way to the application 
the message applys on.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mtype\tab - Message Type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 One character indicatin
g the message type can be passed:\par
I - information\par
W - Warning\par
E - E
rror\par
All other message types are considered as errors.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set system 
variable on server side}}} 
{#{\footnote\plain{#}{Ind2.mnk8}}} 
{K{\footnote\plain{K}{ODABAClient:SetServerVariable}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Set
ServerVariable\tab -  Set system variable on server side\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetS
erverVariable (char *var_name, char *var_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Systemvariable
s can be set for the server. This is necessary for controlling f
unctions running on the server side.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Server variables are valid o
n the server only for the connected client.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termina
tion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In c
ase of normal termination the value is NO. When the function ret
urns YES more detailed error information are available in the er
ror object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 var_name\tab - System variable name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Name of the s
ystem variable on the server or client side. System variable nam
es must not exceed 40 characters and are provided as 0-terminate
d strings.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 var_string\tab - Value for the system variable\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value for
 a system variable must not exceed 255 characters and is provide
d as 0-terminated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Shut down client}}} 
{#{\footnote\plain{#}{Ind2.mnk9}}} 
{K{\footnote\plain{K}{ODABAClient:Sh
utDown}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ShutDown\tab -  Shut down client\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ShutDown ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually t
he last ODABAClient handle referring to the client will shut dow
n the client when being destructed. In some cases, e.g. when cre
ating a client with an ini-file and using system services as dat
a catalogue or error logs, some system references are still acti
ve and referring to the main client. To be sure that the main cl
ient is closed properly you should use the ShutDown() function b
efore destructing the client. Make sure that there are no other 
references to the client in your application anymore. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on will delete all resources associated with the client and clos
e the client. When the client is the default or main client, whi
ch has been created automatically, the function will close the m
ain client.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the
 function returns an error. In case of normal termination the va
lue is NO. When the function returns YES more detailed error inf
ormation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Pause Server}}} 
{#{\footnote\plain{#}{Ind2.mnk0
}}} 
{K{\footnote\plain{K}{ODABAClient:StartPause}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 StartPause\tab -  Pause Server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical StartPau
se (int32 wait_sec=300 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When pausing the server no more transac
tions can be committed until pausing the server is stopped (Stop
-Pause()). The server can pause only after finishing all running
 transaction commits. If any commit is still run-ning after five
 minutes or a given number seconds (wait_sec) the server will no
t pause (error 323). When the server cannot pause the function s
tops without pausing the server. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The \'85Pause functions can be use
d for keeping the database in a consistent state while backing u
p the database without closing the server. Pause commands should
 not be used when running long transactions as large imports or 
database reorganizations. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Transactions will not be committed any
more after pausing the server. The timeout interval for committi
ng transactions is 10 minutes. When not being able to start comm
itting the transaction within the timeout interval the transacti
on is cancelled.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Any application may access the database in the
 pause state as long as not writing to the database, i.e. as lon
g as not storing transactions to the database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For allowing stor
ing data to the database again you must use the StopPause() func
tion.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the funct
ion returns an error. In case of normal termination the value is
 NO. When the function returns YES more detailed error informati
on are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 wait_sec\tab - Number 
of seconds to wait\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The system waits the given number of seconds b
efor executing the request. Default is 300 seconds (5 minutes).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{D
isplay database statistics}}} 
{#{\footnote\plain{#}{con8ps96p}}} 
{K{\footnote\plain{K}{ODABAClient:StatDisplay}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 StatDi
splay\tab -  Display database statistics\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical StatDisplay (char *d
bpath, char *ppath );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a database statistic f
or the database passed in the dbpath. The database must be avail
able via a local or a net drive.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e value is YES if the function returns an error. In case of norm
al termination the value is NO. When the function returns YES mo
re detailed error information are available in the error object.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbpath\tab - Complete database path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete database pa
th is passed as 0-terminated string with a maximum length of 255
 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ppath\tab - Protocol path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The protocol path is passed as 0
-terminated string. It must point to a valid folder. The file ne
ed not exist.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Stop pausing server}}} 
{#{\footnote\plain{#}{Ind2.mnk.}}} 
{K{\footnote\plain{K}{ODABAClient:StopPause}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 St
opPause\tab -  Stop pausing server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void StopPause ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This command st
ops pausing the server and allows committing further transaction
s.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Display system information}}} 
{#{\footnote\plain{#}{Ind2.mnk_}}} 
{K{\footnote\plain{K}{ODABAClient:SysInfoDisplay}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 S
ysInfoDisplay\tab -  Display system information\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SysInfoDispla
y (char *dbpath, char *ppath );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates system infor
mation for the database passed in dbpath. The database must be a
vailable via a local or a net drive.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination co
de\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of 
normal termination the value is NO. When the function returns YE
S more detailed error information are available in the error obj
ect.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbpath\tab - Complete database path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete databas
e path is passed as 0-terminated string with a maximum length of
 255 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ppath\tab - Protocol path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The protocol path is passed 
as 0-terminated string. It must point to a valid folder. The fil
e need not exist.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Compare clients}}} 
{#{\footnote\plain{#}{con8ps96s}}} 
{K{\footnote\plain{K}{ODABAClient:operator bo
ol}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator bool\tab -  Compare clients\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  NOTYPE operator bool ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The f
unction compares two ODABA clients and returns true (YES) when t
he clients are the same. Clients are the same when they have bee
n assigned using the =operator. Clients are not the seme when th
e are opened separately.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Assign ODABA client handle
}}} 
{#{\footnote\plain{#}{con8ps96t}}} 
{K{\footnote\plain{K}{ODABAClient:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  Assign ODABA client ha
ndle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  ODABAClient &operator= (ODABAClient &client_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion assigns the odaba client to another client handle. When a cl
ient has been created for the source the client is referenced in
 the target handle as well. Whne no client is opened for the sou
rce handle the target client gandle will be empty as well.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 client_ref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{con8ps96u}}} 
{K{\footnote\plain{K}{ODABAClient:~OD
ABAClient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~ODABAClient\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~ODAB
AClient ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When destructing the client the client disconnects f
rom the server. When disconnecting the main client (the first cl
ient that has been opened in the application) \'b4services as error
 messages and data catalogue are disabled (until another client 
is constructed, which becomes the main client again).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Connection 
to client}}} 
{#{\footnote\plain{#}{Ind2.mnla}}} 
{K{\footnote\plain{K}{ODABAClient:ClientConnection}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ClientConnection\tab - 
 Connection to client\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{ODABA Server}}} 
{#{\footnote\plain{#}{Ind2.mnl8}}} 
{K{\footnote\plain{K}{ODABAServer}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 ODABAServer
\tab -  ODABA Server\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A ODABA server will manage any number of database
s. After creating an ODABA server it can be started and halted u
sing the functions Start() and Stop(). There is no login require
d for connecting to the server, however, for accessing a databas
e you may have to pass login information to the server. Login-In
formation must be passed to the CreateClient function. You can o
verload this function in your application procedure to provide s
pecific login checkings and other services for an application OD
ABA2 server. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 The ODABA-server maintains a list (catalogue) for d
atabase files. This catalogue must be stored under server.ini in
 the ODABA2 installation path. The catalogue section starts with
 [ODABA-CATALOGUE].\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CS_Server\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Server object\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Proper
ties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 client_list\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 List of registered clients\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetCatlgName
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get database name from catalogue\par
\f2\cf2\fs20\b0\i0 ODABAServer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 Start\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Start server\par
\f2\cf2\fs20\b0\i0 Stop\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Stop server\par
\f2\cf2\fs20\b0\i0 ~ODABAServer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get databa
se name from catalogue}}} 
{#{\footnote\plain{#}{Ind2.mnl0}}} 
{K{\footnote\plain{K}{ODABAServer:GetCatlgName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCatlgN
ame\tab -  Get database name from catalogue\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetCatlgName (char 
*sym_nams, char *cpath, int32 maxlen );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the 
database path for a symbolic name in the catalogue (server.ini).
 If no catalogue entry with the given name is found the function
 returns the original name.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sym_nams\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cpa
th\tab - Complete path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The complete path is passed as 0-terminated str
ing with a maximum length of 255 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 maxlen\tab - Size of outp
ut buffer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Specifies the length of the buffer, the information sho
uld be stored into. The information is truncated if it is longer
 than the buffer.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{con8ps97p}}} 
{K{\footnote\plain{K}{ODABAServer:ODABAServer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ODAB
AServer\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ODABAServer (char 
*inipath, char *prog_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates an ODABA server
. The INI-file passed to the server contains information about t
he system databases and the data catalogue. The programme path i
s used for searching actions and should be provided when other i
INI-files or DLLs are to be loaded from this path.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 inip
ath\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prog_path\tab - Programme path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the path that is usually p
assed as first argument to the application.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Start server}}} 
{#{\footnote\plain{#}{con8ps97t
}}} 
{K{\footnote\plain{K}{ODABAServer:Start}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Start\tab -  Start server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Start (int16 wPort
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the functio
n returns an error. In case of normal termination the value is N
O. When the function returns YES more detailed error information
 are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 wPort\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Stop server}}} 
{#{\footnote\plain{#}{c
on8ps97u}}} 
{K{\footnote\plain{K}{ODABAServer:Stop}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Stop\tab -  Stop server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Stop ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When st
opping the server all client connections are closed. You should 
ensure that no client is active anymore.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{Ind2.mnma}}} 
{K{\footnote\plain{K}{ODABA
Server:~ODABAServer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~ODABAServer\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                     
     ~ODABAServer ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When destructing the server it is stopped 
if not done so far. You should ensure that no client is active a
nymore.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Server object}}} 
{#{\footnote\plain{#}{Ind2.mnm9}}} 
{K{\footnote\plain{K}{ODABAServer:CS_Server}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CS_Server\tab -  Se
rver object\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{List of registered clients}}} 
{#{\footnote\plain{#}{Ind2.mnm8}}} 
{K{\footnote\plain{K}{ODABAServer:client
_list}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 client_list\tab -  List of registered clients\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Opreartion Handle}}} 
{#{\footnote\plain{#}{In
d2.mnra}}} 
{K{\footnote\plain{K}{OperationHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 OperationHandle\tab -  Opreartion Handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Operati
on handles can be used for executing operations as expressions o
r function calls. Usually, an operation is associated with a pro
perty handle defining the instance that is passed to the operati
on as calling object.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CheckExpression\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check v
alidity of an expression\par
\f2\cf2\fs20\b0\i0 Execute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute operation\par
\f2\cf2\fs20\b0\i0 GetDimension\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Get dimension of returned value\par
\f2\cf2\fs20\b0\i0 GetResult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get result from the op
eration\par
\f2\cf2\fs20\b0\i0 GetSize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get size of returned value\par
\f2\cf2\fs20\b0\i0 Open\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open operation h
andle\par
\f2\cf2\fs20\b0\i0 OperationHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 ProvideExpression\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create expre
ssion definition\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check validity of an expression}}} 
{#{\footnote\plain{#}{Ind2.mnr8}}} 
{K{\footnote\plain{K}{Operatio
nHandle:CheckExpression}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CheckExpression\tab -  Check validity of an ex
pression\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CheckExpression (Dictionary *dictptr, ACObject 
*obhandle, char *clsnames, char *exprnames, char *impnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  lo
gical CheckExpression (Dictionary *dictptr, char *expression, AC
Object *obhandle, char *clsnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether t
he expression passed to the function is syntactically correct (N
O) or not (YES, error).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameter
s\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is passed
.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle\tab - Datab
ase Object Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the database object handle or the datab
ase handle when referring to the root object or the dictionary h
andle when referring to the root object of the dictionary databa
se.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 clsnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 exprn
ames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 impnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 expression\tab - OQL expression\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An OQL expression defi
nes a condition according to the OQL syntax. OQL expressions mus
t always terminate with ';'. The OQL-Expression is passed as 0-t
erminated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Execute operation}}} 
{#{\footnote\plain{#}{Ind2.mnr9}}} 
{K{\footnote\plain{K}{OperationHandle:Execu
te}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Execute\tab -  Execute operation\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Execute (ParmList *paramet
ers );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Execute (PropertyHandle &call_object, ParmList *p
arameters );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function executes a predefined opoeration. The r
esult is returned as property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 It is possible to pass a p
roperty handle as calling object. If no property handle is passe
d the one that was used for creating the operation is used as ca
lling object. When using amother property handle than the origin
ating one the type of the properties must be identical.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The resul
t of the operation can be provided with the GetResult() function
.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function 
returns an error. In case of normal termination the value is NO.
 When the function returns YES more detailed error information a
re available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parameters\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 call_obje
ct\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get dimension of returned value}}} 
{#{\footnote\plain{#}{Ind2.mnr0}}} 
{K{\footnote\plain{K}{OperationHandle:GetD
imension}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDimension\tab -  Get dimension of returned value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 Get
Dimension ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the dimension for the instanc
e created by the function. If the result dimension can not be de
termined the function returns -1 (AUTO).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 In some cases the dimens
ion for the result can be provided ater executing the expression
. In this cate the function also returns -1 (AUTO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Dimension\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dimension describes the property dimension. this i
s the maximum number of instances that can be stored for the pro
perty. The function returns 0 (UNDEF) if there is no limit (coll
ection) or the dimension (cardinality) defined for the property.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get result from the operation}}} 
{#{\footnote\plain{#}{con8ps9_p}}} 
{K{\footnote\plain{K}{OperationHandle:GetResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 G
etResult\tab -  Get result from the operation\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &GetResu
lt ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns a property handle that contains the 
result of the last execution of the expression.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get
 size of returned value}}} 
{#{\footnote\plain{#}{Ind2.mnr.}}} 
{K{\footnote\plain{K}{OperationHandle:GetSize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSize\tab - 
 Get size of returned value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetSize ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retur
ns the area size for the instance created by the function. If th
e result size can not be determined the function returns -1 (AUT
O).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of the instance or property area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open 
operation handle}}} 
{#{\footnote\plain{#}{con8ps9_s}}} 
{K{\footnote\plain{K}{OperationHandle:Open}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Open\tab -  Open operati
on handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Open (PropertyHandle &prophdl_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 To execute
 operations the opration handle must be opened. After opening th
e operation handle an expression or a function can be associated
 with the operation handle for being executed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Term
ination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. I
n case of normal termination the value is NO. When the function 
returns YES more detailed error information are available in the
 error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property handl
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also 
class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{con8ps9_t}}} 
{K{\footnote\plain{K}{Operati
onHandle:OperationHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OperationHandle\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0            
              OperationHandle (PropertyHandle &prophdl_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0    
                      OperationHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The constructor create
s an operation handle with the passed property handle as calling
 object.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a 
reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class 
definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Create expression definition}}} 
{#{\footnote\plain{#}{con8p
s9_u}}} 
{K{\footnote\plain{K}{OperationHandle:ProvideExpression}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvideExpression\tab -  Create 
expression definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ProvideExpression (char *expressio
n, ParmList *parameters );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical ProvideExpression (Dictionary
Handle &dictionary, ACObject *obhandle, char *class_names, char 
*expr_names, PropertyHandle **parmlist );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks the
 expression and creates an internal epression presentation.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retur
n value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function return
s an error. In case of normal termination the value is NO. When 
the function returns YES more detailed error information are ava
ilable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 expression\tab - OQL expression\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A
n OQL expression defines a condition according to the OQL syntax
. OQL expressions must always terminate with ';'. The OQL-Expres
sion is passed as 0-terminated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parameters\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictionary\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ob
handle\tab - Database Object Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the database object handle
 or the database handle when referring to the root object or the
 dictionary handle when referring to the root object of the dict
ionary database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cl
ass_names\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 expr_names\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parmlist\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{IDg.6.2q}}} 
{K{\footnote\plain{K}{PIACC}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 PIACC\tab -  \par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Repl
ace options}}} 
{#{\footnote\plain{#}{IDg.6.2s}}} 
{K{\footnote\plain{K}{PIREPL}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 PIREPL\tab -  Replace options\par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 This option is 
used to control copy or duplicate operations for instances. The 
replace option is based on the existence of in instance in a col
lection, i.e. whether an instance with the selected sort key of 
the target collection does already exist in the target collectio
n (local existence) or in one of the base collections of the tar
get collection (global existence). \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Usually, when copying referen
ced instances the replace option is passed to the subsequent cop
y operations.\par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 REPL_none\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Not replacing existing instances\par
\f2\cf2\fs20\b0\i0 RE
PL_all\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Replace all\par
\f2\cf2\fs20\b0\i0 REPL_local\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Replace locally defined instances
\par
\f2\cf2\fs20\b0\i0 REPL_no_create\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Replace without create\par
\f2\cf2\fs20\b0\i0 REPL_direct\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Replace attri
butes\par
\f2\cf2\fs20\b0\i0 REPL_relationships\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy relationships\par
\f2\cf2\fs20\b0\i0 REPL_instance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copyin
g parts owned by the instance\par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Property handle stack}}} 
{#{\footnote\plain{#}{.bmavy}}} 
{K{\footnote\plain{K}{PIStack}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 P
IStack\tab -  Property handle stack\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A property handle stack allows def
ining a series of related property handles. A Property handle st
ack can be defined for a property handle and allows activating a
 new and saving the current handle using the Push() function and
 re-activating the previous handle using the Pop() function. Thu
s, it becomes possible, e.g. defining a sequence of subsequent s
elections with the possibility of going back to the prevoius lev
el.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Property Handle}}} 
{#{\footnote\plain{#}{.bmanu}}} 
{K{\footnote\plain{K}{PropertyHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 Propert
yHandle\tab -  Property Handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Property handle are used to handle pers
istent or transient \f4\cf4\fs20\b\i0\ul0 data source\f2\cf2\fs20\b0\i0\ul0 . A data source is a collection, 
object instance or an elementary database field. A data source c
ontains the data for a property of a specific object.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A property 
handle usually handles a collection of subsequent object instanc
e. In special cases the collection is singular (e.g. the 'direct
ion' for a persion is exactly one 'Adress' object instance). In 
other cases the instance is elementary (as eg the given names of
 a person). \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A property handle has a cursor function that allows 
to select one of the instances in the collection as the "current
" instance. Only from the selected instance you can retrieve dat
a by means of subsequent property handles or Get-functions (GetS
tring(), GetTime(), ...) for elementary datasources. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f4\cf4\fs20\b\i0\ul0 Generic Pro
perty handles\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 You can define generic property handles using the g
eneric property handle contructor (PH(type)()). This requires th
at you have created a C++ header file for the referenced type. I
n this case you can access elementary data field in the instance
 directly referring to the generated class members. For referenc
es the instance contains corresponding generic property handles 
that you can reference by class member name as well. In this cas
e you need not to create the property handle you want to access.
 This makes programming simpler but in this case you must recomp
ile the application when changing the database structure. This i
s not necessary when referring to property handles hierarchies c
reated in the appplication.  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f4\cf4\fs20\b\i0\ul0 Property handle hierarchies\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Property
 handles form a tree that defines a specific view in an applicat
ion. When defining this view once the property handles cann be u
sed as long as the application follows the defined view. When de
fining a property handle for "AllPersons", which is an extent in
 the database, you can define sub-ordinated property handles for
 'name', 'children', and 'company', which refer to the persons n
ame, its children and the company the person is working for. Whe
n selecting another person in the AllPerson property handle the 
datasources for 'name', 'children' and 'company' will change. Th
is, however, is maintained automatically by the systen, i.e. whe
n changing the selection in an upper property handle the data so
urces for all subordinated property handles are updated automati
cally and you can access them directly. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f4\cf4\fs20\b\i0\ul0 Filter and temporaty dat
asources\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Usually a property handle shows all the elements that ha
ve been added to the data source. You can restrict the number of
 visible instances by setting a filter (SetSelection()) using an
 expression or a C++ function. You can also create a new data so
urce using the Select() function which creates a temporary data 
source. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f4\cf4\fs20\b\i0\ul0 Operations with Property handles\f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Property handes provide 
all algebraic and set operations. You can apply most of algebrai
c operations  (as +, -, * etc.) on elementary \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Set operations are
 defined on the operations defined in relational algebra (Inters
ection, Union, Minus, Select) rather that by using SQL like Sele
ct statements.\par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CSConnection\strike0\ul0 \tab - \par
pib\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 dbf\strike0\ul0 \tab - \par
p
rop_context\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Add\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Add instance to collection\par
\f2\cf2\fs20\b0\i0 AddGlobal\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Add instance globally to collection\par
\f2\cf2\fs20\b0\i0 AddReference\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Add persistent 
instance\par
\f2\cf2\fs20\b0\i0 AllocDescription\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Allocate property description\par
\f2\cf2\fs20\b0\i0 AllocateA
rea\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Allocate instance area\par
\f2\cf2\fs20\b0\i0 Cancel\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Cancel selection\par
\f2\cf2\fs20\b0\i0 CancelBuffer\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Cancel all buffered instances\par
\f2\cf2\fs20\b0\i0 ChangeBuffer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Change collection bu
ffer count\par
\f2\cf2\fs20\b0\i0 ChangeMode\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Change access mode\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Check\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check property ha
ndle\par
\f2\cf2\fs20\b0\i0 CheckWProtect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is current instance permanent write protected
?\par
\f2\cf2\fs20\b0\i0 Close\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Close Property Handle\par
\f2\cf2\fs20\b0\i0 Compare\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare the values for two
 property handles\par
\f2\cf2\fs20\b0\i0 CompareKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare two ident key values\par
\f2\cf2\fs20\b0\i0 Compare
SortKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare keys accroding to current sort order\par
\f2\cf2\fs20\b0\i0 CompareType
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check properties for comparability\par
\f2\cf2\fs20\b0\i0 Contains\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Does property cont
ain text\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ConvertToWinChar\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Converts ASCII character into Windows 
compatible ANSI character set\par
\f2\cf2\fs20\b0\i0 Copy\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy instance\par
\f2\cf2\fs20\b0\i0 CopyData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy d
ata from an instance area\par
\f2\cf2\fs20\b0\i0 CopyDescription\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create a copy for the 
property description\par
\f2\cf2\fs20\b0\i0 CopyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create a copy of the property ha
ndle\par
\f2\cf2\fs20\b0\i0 CopyInst\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy transient instance\par
\f2\cf2\fs20\b0\i0 CopySet\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Copy collection\par
\f2\cf2\fs20\b0\i0 Cre
ateTempExtent\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Creates a temporary extent\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Delete\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Delete/remove i
nstance from collection\par
\f2\cf2\fs20\b0\i0 DeleteSet\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Delete/remove all instance in 
a collection\par
\f2\cf2\fs20\b0\i0 Dereference\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Dereference collection handle\par
\f2\cf2\fs20\b0\i0 Duplicate\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Duplicate instance\par
\f2\cf2\fs20\b0\i0 ExecuteInstanceAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute action on inst
ance level\par
\f2\cf2\fs20\b0\i0 ExecutePropertyAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute action on property (col
lection) level\par
\f2\cf2\fs20\b0\i0 Exist\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is instance selected?\par
\f2\cf2\fs20\b0\i0 ExtractKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Extract id
ent key value\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ExtractSortKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Extract sort key value\par
\f2\cf2\fs20\b0\i0 Fill\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Fill in
stance from external one\par
\f2\cf2\fs20\b0\i0 FillData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Fill instance from external on
e\par
\f2\cf2\fs20\b0\i0 FirstKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate first key\par
\f2\cf2\fs20\b0\i0 Get\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property instance\par
\f2\cf2\fs20\b0\i0 GetActionRe
sult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get result from last action executed\par
\f2\cf2\fs20\b0\i0 GetArea\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Instance 
area\par
\f2\cf2\fs20\b0\i0 GetAttribute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get attribute according to position\par
\f2\cf2\fs20\b0\i0 GetBaseProp
erty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get collection handle for base collection\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetBufferInstance
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Read instance from Buffer\par
\f2\cf2\fs20\b0\i0 GetCollectionID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Returns local collec
tion identity\par
\f2\cf2\fs20\b0\i0 GetCollectionProperty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get parent collection proper
ty handle\par
\f2\cf2\fs20\b0\i0 GetCount\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get number of instances stored for property\par
\f2\cf2\fs20\b0\i0 Ge
tCurrentIndex\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get cursor position\par
\f2\cf2\fs20\b0\i0 GetCurrentSize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get size for s
elected instance\par
\f2\cf2\fs20\b0\i0 GetCurrentType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get type for selected instance\par
\f2\cf2\fs20\b0\i0 Ge
tCurrentTypeDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get current type definition\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetDBHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get dat
abase handle\par
\f2\cf2\fs20\b0\i0 GetDate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Date value for property handle\par
\f2\cf2\fs20\b0\i0 GetDateTi
me\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property instance as time stamp (date/time)\par
\f2\cf2\fs20\b0\i0 GetDescriptio
n\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property definition\par
\f2\cf2\fs20\b0\i0 GetDictionary\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get dictionary handle\par
\f2\cf2\fs20\b0\i0 Ge
tDimension\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide field dimension\par
\f2\cf2\fs20\b0\i0 GetDouble\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property insta
nce as double value\par
\f2\cf2\fs20\b0\i0 GetExtentName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get extent name for collection
\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetFieldDef\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get field definition for the property\par
\f2\cf2\fs20\b0\i0 GetGUID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get g
lobal identity string for the current instance\par
\f2\cf2\fs20\b0\i0 GetGenAttrType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Ge
t generic attribute type\par
\f2\cf2\fs20\b0\i0 GetGenOrderType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get current type for ge
neric sort order of collection handle\par
\f2\cf2\fs20\b0\i0 GetGlobalID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get global ID\par
\f2\cf2\fs20\b0\i0 G
etIdentity\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property identity string\par
\f2\cf2\fs20\b0\i0 GetIndexName\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Name of th
e current index\par
\f2\cf2\fs20\b0\i0 GetInitArea\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide initialized instance area\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Get
InitInstance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide initialised instance\par
\f2\cf2\fs20\b0\i0 GetInstModCount\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get u
pdate count for selected instance\par
\f2\cf2\fs20\b0\i0 GetInstance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get current instan
ce\par
\f2\cf2\fs20\b0\i0 GetInstanceContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Instance Context\par
\f2\cf2\fs20\b0\i0 GetInt\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property i
nstance as integer value\par
\f2\cf2\fs20\b0\i0 GetIntValue\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property instance as in
teger value\par
\f2\cf2\fs20\b0\i0 GetKeyLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get ident key length\par
\f2\cf2\fs20\b0\i0 GetKeySMCB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get ide
nt key definition\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetLOID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get instance identity (LOID)\par
\f2\cf2\fs20\b0\i0 GetMode\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 G
et access mode for collection handle\par
\f2\cf2\fs20\b0\i0 GetNormalized\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get normalize
d integer value\par
\f2\cf2\fs20\b0\i0 GetObjectHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get Database Object handle\par
\f2\cf2\fs20\b0\i0 GetOri
gin\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get associated property handle\par
\f2\cf2\fs20\b0\i0 GetParentProperty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get high p
roperty\par
\f2\cf2\fs20\b0\i0 GetPrivilege\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get access privilege for reference\par
\f2\cf2\fs20\b0\i0 GetProper
tyContext\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property context\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetPropertyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property h
andle\par
\f2\cf2\fs20\b0\i0 GetPropertyPath\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property path for property handle\par
\f2\cf2\fs20\b0\i0 GetRe
fModCount\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get collection update count\par
\f2\cf2\fs20\b0\i0 GetReference\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get referenc
e from structure definition\par
\f2\cf2\fs20\b0\i0 GetSelectedKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get selected key valu
e\par
\f2\cf2\fs20\b0\i0 GetSize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get instance size\par
\f2\cf2\fs20\b0\i0 GetSizeOf\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get size of instance in co
llection handle\par
\f2\cf2\fs20\b0\i0 GetSortKeyLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get sort key length\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetSortKeySM
CB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get sort key definition\par
\f2\cf2\fs20\b0\i0 GetString\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property instance as s
tring value\par
\f2\cf2\fs20\b0\i0 GetStringLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide stringlength for instance\par
\f2\cf2\fs20\b0\i0 Get
StringValue\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property instance as string value\par
\f2\cf2\fs20\b0\i0 GetStructDef\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Get structure definition\par
\f2\cf2\fs20\b0\i0 GetTime\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get property instance as time v
alue\par
\f2\cf2\fs20\b0\i0 GetType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get basic collection type\par
\f2\cf2\fs20\b0\i0 GetValue\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get instance val
ue\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetVersion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Get version number for selected instance\par
\f2\cf2\fs20\b0\i0 Group\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Gro
uping operation\par
\f2\cf2\fs20\b0\i0 HasData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is data available for property\par
\f2\cf2\fs20\b0\i0 HasDescrip
tion\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is description available\par
\f2\cf2\fs20\b0\i0 HasGenericAttributes\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Does the ins
tance have generic attributes\par
\f2\cf2\fs20\b0\i0 HasIndex\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Does a collection have an
 index?\par
\f2\cf2\fs20\b0\i0 Initialize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Initialise instance area\par
\f2\cf2\fs20\b0\i0 InsertTerminator\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Ins
ert line terminator for large text fields\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Intersect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Intersect co
llections\par
\f2\cf2\fs20\b0\i0 IsActive\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property an active property\par
\f2\cf2\fs20\b0\i0 IsAttribute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is
 property an attribute?\par
\f2\cf2\fs20\b0\i0 IsBasedOn\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is structure derived from pass
ed type?\par
\f2\cf2\fs20\b0\i0 IsBasetypeProperty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property member of the base type\par
\f2\cf2\fs20\b0\i0 I
sBasicType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is the type of the PropertyHandle an elementary one 
?\par
\f2\cf2\fs20\b0\i0 IsClient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property handle a client handle\par
\f2\cf2\fs20\b0\i0 IsCollection\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is pr
operty a collection or reference?\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 IsCollectionUpdate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Can collect
ion be updated\par
\f2\cf2\fs20\b0\i0 IsCopyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property handle a copy handle\par
\f2\cf2\fs20\b0\i0 IsEm
pty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property instance empty?\par
\f2\cf2\fs20\b0\i0 IsEnumeration\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is the type of th
e PropertyHandle an enumeration ?\par
\f2\cf2\fs20\b0\i0 IsInitInstance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 In instance ini
tialized instance\par
\f2\cf2\fs20\b0\i0 IsMemo\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check property type for memo field\par
\f2\cf2\fs20\b0\i0 IsNew
Instance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is new instance\par
\f2\cf2\fs20\b0\i0 IsNumeric\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check property type for nume
ric\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 IsPositioned\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is instance positioned\par
\f2\cf2\fs20\b0\i0 IsReadOnly\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property r
ead only\par
\f2\cf2\fs20\b0\i0 IsSensitive\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property handle sensitive against modifi
cations\par
\f2\cf2\fs20\b0\i0 IsServer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property handle a server handle\par
\f2\cf2\fs20\b0\i0 IsShareBaseHa
ndle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property handle for base structure\par
\f2\cf2\fs20\b0\i0 IsStructure\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is the t
ype of the PropertyHandle a defined Structure ?\par
\f2\cf2\fs20\b0\i0 IsText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Check pro
perty type for text\par
\f2\cf2\fs20\b0\i0 IsTransient\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is property transient\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 IsTrue\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is 
value for property TRUE?\par
\f2\cf2\fs20\b0\i0 IsTyped\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is instance typed?\par
\f2\cf2\fs20\b0\i0 IsValid\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Chec
k for valid property handle\par
\f2\cf2\fs20\b0\i0 IsValidText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Checks text fields for v
alid characters\par
\f2\cf2\fs20\b0\i0 IsWeakTyped\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is reference weak typed\par
\f2\cf2\fs20\b0\i0 IsWrite\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Can 
instance be updated?\par
\f2\cf2\fs20\b0\i0 KeyToString\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Convert internal key to string\par
\f2\cf2\fs20\b0\i0 L
ocate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate object by identity\par
\f2\cf2\fs20\b0\i0 LocateKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate instance accor
ding to key\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 LocatePath\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate path for path collection handle\par
\f2\cf2\fs20\b0\i0 Loc
k\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Lock instance\par
\f2\cf2\fs20\b0\i0 LockSet\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Lock collection\par
\f2\cf2\fs20\b0\i0 MarkUnused\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Mark propert
y handle as unused\par
\f2\cf2\fs20\b0\i0 MarkUsed\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Mark property handle as used\par
\f2\cf2\fs20\b0\i0 Minus\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 S
ubstract collections\par
\f2\cf2\fs20\b0\i0 Modify\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Mark property as modified\par
\f2\cf2\fs20\b0\i0 Move\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Move 
instance to another collection\par
\f2\cf2\fs20\b0\i0 MoveDown\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Move instance down\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 MoveUp
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Move instance one position up\par
\f2\cf2\fs20\b0\i0 NextKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate next key\par
\f2\cf2\fs20\b0\i0 NoWrite\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Is instance write protected?\par
\f2\cf2\fs20\b0\i0 Open\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open property handle\par
\f2\cf2\fs20\b0\i0 OpenAccess
Path\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open Access Path\par
\f2\cf2\fs20\b0\i0 OpenHierarchy\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Open hierarchy property han
dle\par
\f2\cf2\fs20\b0\i0 OwnsData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Owns data area\par
\f2\cf2\fs20\b0\i0 Position\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Select an instance relative
 to the current selection\par
\f2\cf2\fs20\b0\i0 PositionTop\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Position parent collection
s\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Power\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Raise to power of\par
\f2\cf2\fs20\b0\i0 PropertyHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 ProvGenAttri
bute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide generic attributes for new instance\par
\f2\cf2\fs20\b0\i0 Provide\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provid
e instance\par
\f2\cf2\fs20\b0\i0 ProvideArea\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide instance area\par
\f2\cf2\fs20\b0\i0 ProvideGUID\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide
 Global Instance Identifier (GUID)\par
\f2\cf2\fs20\b0\i0 ProvideGlobal\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide instanc
e outside the transaction\par
\f2\cf2\fs20\b0\i0 ProvideOperation\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Provide operation han
dle\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ReadBuffer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Fill instance buffer from position\par
\f2\cf2\fs20\b0\i0 Refresh\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Refres
h selected instance\par
\f2\cf2\fs20\b0\i0 RegisterHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Register property handle\par
\f2\cf2\fs20\b0\i0 Relea
seBuffer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Release instance buffer\par
\f2\cf2\fs20\b0\i0 RemoveTerminator\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Remove line t
erminator from large text fields\par
\f2\cf2\fs20\b0\i0 Rename\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Rename instance\par
\f2\cf2\fs20\b0\i0 RepairInd
ex\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Repair Index\par
\f2\cf2\fs20\b0\i0 ReplaceSysVariables\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Replace system variable\par
\f2\cf2\fs20\b0\i0 Repl
aceText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Replace system variable value\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Reset\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset instance\par
\f2\cf2\fs20\b0\i0 Reset
Selection\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset selection condition for collection\par
\f2\cf2\fs20\b0\i0 ResetTransien
tProperty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset transient property handle\par
\f2\cf2\fs20\b0\i0 ResetWProtect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Reset p
ermanent write protection\par
\f2\cf2\fs20\b0\i0 Save\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Store instance\par
\f2\cf2\fs20\b0\i0 SearchText\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Search 
string in property\par
\f2\cf2\fs20\b0\i0 Select\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Create a subset from a collection\par
\f2\cf2\fs20\b0\i0 SetAc
tionResult\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set result string\par
\f2\cf2\fs20\b0\i0 SetArea\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set area pointer for prope
rty instance\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetDescription\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set definition for property\par
\f2\cf2\fs20\b0\i0 SetDynLen
gth\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Activate dynamic length handling\par
\f2\cf2\fs20\b0\i0 SetGenAttribute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set type f
or generic attribute in instance\par
\f2\cf2\fs20\b0\i0 SetInstance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set basic instance 
for property\par
\f2\cf2\fs20\b0\i0 SetInstanceAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Register action in the instance c
ontext\par
\f2\cf2\fs20\b0\i0 SetInstanceEventHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set Instance Event Handler\par
\f2\cf2\fs20\b0\i0 SetInst
anceProcessHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Activate Instance process event handler\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetKe
y\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Move ident key value to instance\par
\f2\cf2\fs20\b0\i0 SetNormalized\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set normalized
 value in attribute\par
\f2\cf2\fs20\b0\i0 SetOrder\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set sort order\par
\f2\cf2\fs20\b0\i0 SetPropertyAction\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Re
gister action in the property contect\par
\f2\cf2\fs20\b0\i0 SetPropertyEventHandler\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Se
t Property Event Handler\par
\f2\cf2\fs20\b0\i0 SetSelection\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set filter condition for c
ollection handle\par
\f2\cf2\fs20\b0\i0 SetSortKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Store sort key value to instance\par
\f2\cf2\fs20\b0\i0 SetT
ransientProperty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Setting property handle for transient property
 (reference)\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set type for weak-typed collection\par
\f2\cf2\fs20\b0\i0 SetVersio
n\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set instance version to be provided by the collection handle\par
\f2\cf2\fs20\b0\i0 S
etWProtect\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Set permanent write protection\par
\f2\cf2\fs20\b0\i0 StoreData\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Store insta
nce data to property handle\par
\f2\cf2\fs20\b0\i0 StringToKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Convert string to intern
al key\par
\f2\cf2\fs20\b0\i0 ToTop\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Position to top of collection (before first)\par
\f2\cf2\fs20\b0\i0 Union\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 Union two collections\par
\f2\cf2\fs20\b0\i0 Unlock\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Unlock instance\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 UnlockSet\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Unlock co
llection\par
\f2\cf2\fs20\b0\i0 UnregisterHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Unregister property handle\par
\f2\cf2\fs20\b0\i0 ValidateNode
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Checks whetehr the Namdle is valid\par
\f2\cf2\fs20\b0\i0 operator!\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Negation operator
 for logical values\par
\f2\cf2\fs20\b0\i0 operator!=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare two property instances (n
ot equal)\par
\f2\cf2\fs20\b0\i0 operator%\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Remaining part for integer division\par
\f2\cf2\fs20\b0\i0 operator&
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 AND operator (or intersect)\par
\f2\cf2\fs20\b0\i0 operator&&\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Logical AND operation\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 op
erator&=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 AND operator (intersect collections)\par
\f2\cf2\fs20\b0\i0 operator()\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate
 instance\par
\f2\cf2\fs20\b0\i0 operator*\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Multiply two properties\par
\f2\cf2\fs20\b0\i0 operator*=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Multiply 
and assign result to first operator\par
\f2\cf2\fs20\b0\i0 operator+\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Sum two properties
\par
\f2\cf2\fs20\b0\i0 operator++\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Position cursor on next instance\par
\f2\cf2\fs20\b0\i0 operator+=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Sum and 
assign result to first operator\par
\f2\cf2\fs20\b0\i0 operator-\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Subtract properties\par
\f2\cf2\fs20\b0\i0 ope
rator--\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Position cursor on previous instance\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator-=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Subtrac
t and assign result to first operator\par
\f2\cf2\fs20\b0\i0 operator/\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Devide proprties
\par
\f2\cf2\fs20\b0\i0 operator/=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Divide and assign result to first operator\par
\f2\cf2\fs20\b0\i0 operator<\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Compare two property instances (less)\par
\f2\cf2\fs20\b0\i0 operator<=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare two pr
operty instances (less or equal)\par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Assign property insta
nces\par
\f2\cf2\fs20\b0\i0 operator==\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare two property instances (equal)\par
\f2\cf2\fs20\b0\i0 operator>\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 Compare two property instances (greater)\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator>=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Compare two
 property instances (greater or equal)\par
\f2\cf2\fs20\b0\i0 operator[]\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Locate propert
y instance\par
\f2\cf2\fs20\b0\i0 operator^\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Exclusive OR operation\par
\f2\cf2\fs20\b0\i0 operator|\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 OR operati
on (union set for collections)\par
\f2\cf2\fs20\b0\i0 operator|=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 OR operation (union se
t for collections)\par
\f2\cf2\fs20\b0\i0 operator||\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Logical OR operation\par
\f2\cf2\fs20\b0\i0 ~PropertyHandl
e\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Add instance to collection}}} 
{#{\footnote\plain{#}{.bmanv}}} 
{K{\footnote\plain{K}{PropertyHandle:Add}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 A
dd\tab -  Add instance to collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance Add (Instance newinst, 
int32 set_pos0_w=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Add (PropertyHandle &prop_hdl 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Add (int32 set_pos0_w=AUTO, logical init_inst=YES );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Add (Key sortkey, Key identkey_w=Key(), Instance newin
st_w=Instance(), logical init_inst=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Add (int32 se
t_pos0, Key sortkey, Key identkey_w=Key(), Instance newinst_w=In
stance(), logical init_inst=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can add instances to any t
ype of collection or reference. When adding an instance to a col
lection the cardinality for the collection is checked as well as
 unique key reuirements. When adding an instance to an owning co
llection or reference a new database instance will be created. A
dding an instanc to a collection or reference is possible by pos
ition, key (when sort orders are defined for the collection) or 
with an initialising instance. When terminating successfully the
 instance added to the collection is selected in the property ha
ndle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The position passed (set_pos0) when adding an instance to 
a collection has an effect only, when the collection is unordere
d. Otherwise the position is determined by the key value. For or
dered instances you must always pass a sort or ident key value. 
When passing a sort key this must correspond to the active order
 (index) set for the property handle. When an __AUTOIDENT key ha
s been defined the next instance number is determined in the col
lection or in its most top super set (based collections).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 b Colle
ction based references\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When adding an instance to a collection ba
sed reference or collection (ie a subset of another collection) 
the function checks whether an instance with the same key (ident
 key of the instance to be added) does already exist in the base
 collection (super set). In this case no new instance is created
 but the instnce found in the base collection is added to the cu
rrent collection or reference. The instance values are updated f
rom the values of the instance found in the base collection. Whe
n no instance has been found the new instance (key) is added to 
the base collection and than to the current collection. In any c
ase the instance is shared between the base and the current coll
ection, i.e. both refer to the same instance. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For base collectio
ns you must always provide an ident key. The function will store
 the passed keys in an initial instance (which can also be passe
d by the application). From this initial instance the function e
xtracts the ident key for searching the instance in the basic co
llections, i.e. the ident key is the minimum information an inst
ance should have. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 b Using shared base structure instances\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When th
e collection refers to an instance which has one or more shared 
base instances the instance must contain ident key values for al
l shared base instances. Add by key you can use in this case onl
y, when the key provides information for all base instance ident
 keys.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f4\cf4\fs20\b\i0\ul0 Events \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When adding an instance to a collection the functio
n fires an \f8\cf8\fs20\b0\i\ul0 Insert\f2\cf2\fs20\b0\i0\ul0 -event. You can use the insert event for checki
ng the operation and deny it. Moreover, an \f8\cf8\fs20\b0\i\ul0 Initialize\f2\cf2\fs20\b0\i0\ul0 -event is g
enerated when initialising the instance. After the instance has 
been added an  \f8\cf8\fs20\b0\i\ul0 Inserted\f2\cf2\fs20\b0\i0\ul0 -Event is generated. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When creating a new 
instance the function generates a \f8\cf8\fs20\b0\i\ul0 Create\f2\cf2\fs20\b0\i0\ul0 -event, which can be che
cked, and a \f8\cf8\fs20\b0\i\ul0 Created\f2\cf2\fs20\b0\i0\ul0 -event after the instance has been created in
 the database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When any of the post event handlers have been mod
ifying the instance an additional \f8\cf8\fs20\b0\i\ul0 Stored\f2\cf2\fs20\b0\i0\ul0 -event might be creted. 
When selecting the instance in the property handle a final \f8\cf8\fs20\b0\i\ul0 Read\f2\cf2\fs20\b0\i0\ul0 -
event is generated..\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f4\cf4\fs20\b\i0\ul0 Weak typed collections \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When adding an instan
ce to a weak typed collection you have to make sure that the pro
per type is set for the property handle. The type in a weak type
d collection may change when accessing the collection or by expl
icite request (see also \f4\cf4\fs20\b\i0\ul0 .r PropertyHandle.SetType*** ERROR : Cha
pter not found ***()\f2\cf2\fs20\b0\i0\ul0 ). The instance is added always with the typ
e currently set for the property handle (see also \f4\cf4\fs20\b\i0\ul0 .r PropertyHan
dle.GetType*** ERROR : Chapter not found ***()\f2\cf2\fs20\b0\i0\ul0 ).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - In
stance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced property
 handle (collection type). The instance contains a pointer to a 
properly structured instance area. \par
You can use the !-operator or
 the GetData() function to check whether the instance refers to 
data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ne
winst\tab - New instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The new instance refers to the data area of t
he instance to be added to a collection. The instance contains a
 reference to a propertly structured area. \par
You can pass the inst
ance as (void *) which will be automatically converted into an i
nstance handle. Only attributes of the new instance are added to
 the database. References or relationships in the new instance w
ill be ignored (if there are any).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:
  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an i
nstance in a collection depends on the selected index. if the co
llection is unsorted the position is the only way for accessing 
the instance. \par
For sorted collections the position is determined 
according to the instance key. If thee is a contradiction betwee
n position and key value the position will be ignored. \par
Special p
ositions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the currently sel
ected instance. If no instance is selected it refers to the firs
t instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE (0) refers to the first
 instance in a collection according to the selected index (sort 
order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE (0) refers to the last instan
ce in a collection according to the selected index (sort order).
\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened p
roperty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ini
t_inst\tab - Add initialized instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the function t
o use the internal instance area for creating a new instance in 
the collection. This instance has been provided using the GetIni
tInstance() function and has to be filled by the application bef
or calling the Add() function.\par
Default:YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sortkey\tab - Sort key value
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. When necessary t
he key value can be converted from a string into the internal fo
rmat using the (.r pib.StrinToKey*** ERROR : Chapter not found *
**()) function. Regardles on the type key values are passed as (
char *) areas.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 identkey_w\tab - Ide
nt key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. When
 necessary the key value can be converted from a string into the
 internal format using the (.r pib.StringToKey*** ERROR : Chapte
r not found ***()) function. Regardles on the type key values ar
e passed as (char *) areas. NULL indicates that no key value has
 passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newinst_w\tab - New instan
ce\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The new instance refers to the data area of the instance to be
 added to a collection. The instance contains a reference to a p
ropertly structured area. \par
You can pass the instance as (void *) 
which will be automatically converted into an instance handle. O
nly attributes of the new instance are added to the database. Re
ferences or relationships in the new instance will be ignored (i
f there are any).\par
Default: Instance() (empty instance)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cl
ass definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 position of an instance in a collection depends on the selected
 index. if the collection is unsorted the position is the only w
ay for accessing the instance. \par
For sorted collections the positi
on is determined according to the instance key. If thee is a con
tradiction between position and key value the position will be i
gnored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to 
the currently selected instance. If no instance is selected it r
efers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) re
fers to the first instance in a collection according to the sele
cted index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers t
o the last instance in a collection according to the selected in
dex (sort order).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Add instance globally to collection}}} 
{#{\footnote\plain{#}{.bmanw}}} 
{K{\footnote\plain{K}{Proper
tyHandle:AddGlobal}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 AddGlobal\tab -  Add instance globally to collectio
n\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance AddGlobal (Instance newinst, int32 set_pos0_w=AUTO );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance AddGlobal (int32 set_pos0_w=AUTO, logical init_inst=YE
S );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance AddGlobal (Key sortkey, Key identkey_w=Key(), Inst
ance newitp_w=Instance(), logical init_inst=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance AddG
lobal (int32 set_pos0, Key sortkey, Key identkey_w=Key(), Instan
ce newitp_w=Instance(), logical init_inst=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function wor
ks the same way as the Add() function, except that global instan
ces are created outside the transaction. When not running in a t
ransactions the function works the same way as Add(). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Creating g
lobal instances in a transaction prevents all other users from c
reating global instances for the same extent until the transacti
on is closed, since the index for the global collection is locke
d until terminating the transaction. Especially when creating in
stances via local collections that are based on global collectio
ons (extents) uncomfortable locks may block the system. In this 
case Add global should be used instead of add. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Using AddGlobal()
 for creating a new instance the instance will resist in the glo
bal collection also when rolling back the transaction.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - Instance Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The instance handle refers to an instance acc
ording to the structure defined in the property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also 
class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newinst\tab - New instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e new instance refers to the data area of the instance to be add
ed to a collection. The instance contains a reference to a prope
rtly structured area. \par
You can pass the instance as (void *) whic
h will be automatically converted into an instance handle. Only 
attributes of the new instance are added to the database. Refere
nces or relationships in the new instance will be ignored (if th
ere are any).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab -
 Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a collecti
on depends on the selected index. if the collection is unsorted 
the position is the only way for accessing the instance. \par
For sor
ted collections the position is determined according to the inst
ance key. If thee is a contradiction between position and key va
lue the position will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTA
NCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the currently selected instance. If no
 instance is selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INS
TANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE (0) refers to the first instance in a collec
tion according to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
F
IRST_INSTANCE (0) refers to the last instance in a collection ac
cording to the selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 init_inst\tab - Add initia
lized instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the function to use the internal
 instance area for creating a new instance in the collection. Th
is instance has been provided using the GetInitInstance() functi
on and has to be filled by the application befor calling the Add
() function.\par
Default:YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sortkey\tab - Sort key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provide
d in the internal key format. When necessary the key value can b
e converted from a string into the internal format using the (.r
 pib.StrinToKey*** ERROR : Chapter not found ***()) function. Re
gardles on the type key values are passed as (char *) areas.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 identkey_w\tab - Ident key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ke
y is provided in the internal key format. When necessary the key
 value can be converted from a string into the internal format u
sing the (.r pib.StringToKey*** ERROR : Chapter not found ***())
 function. Regardles on the type key values are passed as (char 
*) areas. NULL indicates that no key value has passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newitp_w\tab - New instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The new instance 
refers to the data area of the instance to be added to a collect
ion. The instance contains a reference to a propertly structured
 area. \par
You can pass the instance as (void *) which will be autom
atically converted into an instance handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position 
of an instance in a collection depends on the selected index. if
 the collection is unsorted the position is the only way for acc
essing the instance. \par
For sorted collections the position is dete
rmined according to the instance key. If thee is a contradiction
 between position and key value the position will be ignored. \par
Sp
ecial positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the curren
tly selected instance. If no instance is selected it refers to t
he first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to th
e first instance in a collection according to the selected index
 (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the last
 instance in a collection according to the selected index (sort 
order).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Add persistent instance}}} 
{#{\footnote\plain{#}{.bmanx}}} 
{K{\footnote\plain{K}{PropertyHandle:AddReference}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 A
ddReference\tab -  Add persistent instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical AddReference (Prop
ertyHandle &source_handle, int32 set_pos0_w=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
adds an instance selected in another property handle to the coll
ection/reference of the current property handle. Both property h
andles must have the same type or the same base type if they are
 weak typed. You can use AddReference() only for not owning coll
ections. Usually the function is used to fill temporary extents 
with instances, which have been selected for special purposes. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Y
ou can only add instances that are defined in the same database 
as the instances of the target prop\'fcerty handle. It is also not 
possible to add an instance by reference from a server database 
to a local database or vize versa.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 After addin the instance to th
e property handle the added instance is the currently selected o
ne.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f4\cf4\fs20\b\i0\ul0 Events \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When adding an instance to a collection the function f
ires an \f8\cf8\fs20\b0\i\ul0 Insert\f2\cf2\fs20\b0\i0\ul0 -event. You can use the insert event for checking 
the operation and deny it. After the instance has been added an 
 \f8\cf8\fs20\b0\i\ul0 Inserted\f2\cf2\fs20\b0\i0\ul0 -Event is generated. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the post event handler has be
en modifying the instance an additional \f8\cf8\fs20\b0\i\ul0 Stored\f2\cf2\fs20\b0\i0\ul0 -event might be cr
eated. When selecting the instance in the property handle a fina
l \f8\cf8\fs20\b0\i\ul0 Read\f2\cf2\fs20\b0\i0\ul0 -event is generated..\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The val
ue is YES if the function returns an error. In case of normal te
rmination the value is NO. When the function returns YES more de
tailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 source_handle\tab - Source property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The source property ha
ndle must be opened and an instance must be selected in the hand
le.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab - Pos
ition in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a collection d
epends on the selected index. if the collection is unsorted the 
position is the only way for accessing the instance. \par
For sorted 
collections the position is determined according to the instance
 key. If thee is a contradiction between position and key value 
the position will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
C
UR_INSTANCE refers to the currently selected instance. If no ins
tance is selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANC
E\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE (0) refers to the first instance in a collection
 according to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST
_INSTANCE (0) refers to the last instance in a collection accord
ing to the selected index (sort order).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Allocate property descrip
tion}}} 
{#{\footnote\plain{#}{.bmanz}}} 
{K{\footnote\plain{K}{PropertyHandle:AllocDescription}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 AllocDescription\tab -  Allo
cate property description\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical AllocDescription ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical 
AllocDescription (DBHandle *dbhandle, char *fldnames, char *fldt
ypes, SDB_RLEV ref_level, uint16 size, uint16 precision, uint16 
dimension );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates an empty description for the pr
operty handle. When the property handle is already associated wi
th a description this will be removed from the property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function re
turns an error. In case of normal termination the value is NO. W
hen the function returns YES more detailed error information are
 available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle\tab - Pointer to database han
dle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer to an opened database handle. The database ha
ndle can be an opened database handle DatabaseHandle as well as 
an opened dictionary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class de
finition for:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldtypes\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ref_level\tab - Refe
rence level\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference level describes the way and the level o
f instance references.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_RLEV\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 si
ze\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of the instance or property area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 precision\tab - Precisi
on\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The precision defines the number of decimal positions behind t
he decimal point for numerical valued. For date and time values 
it defines the way of presenting the values in charachter presen
tations.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dimension\tab - Dimension\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dimension describes the property
 dimension. this is the maximum number of instances that can be 
stored for the property. The function returns 0 (UNDEF) if there
 is no limit (collection) or the dimension (cardinality) defined
 for the property.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Allocate instance area}}} 
{#{\footnote\plain{#}{con8ps07u}}} 
{K{\footnote\plain{K}{PropertyHandle:
AllocateArea}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 AllocateArea\tab -  Allocate instance area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Alloca
teArea ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allocates a data area for a property han
dle if this has not yet been done. If the property handle is lin
ked to the data area of another property handle this link is del
eted an a private data area is allocated.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can use this functi
on when you create dummy property handles which are controlled b
y the application.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cancel selecti
on}}} 
{#{\footnote\plain{#}{.bmap1}}} 
{K{\footnote\plain{K}{PropertyHandle:Cancel}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Cancel\tab -  Cancel selection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical C
ancel ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function resets modifications made on the internal
 instance and cancels the selection. After cancelling an instanc
e the property handle has no current selection. All subordinated
 property handles are cancelled as well.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Terminatio
n code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case
 of normal termination the value is NO. When the function return
s YES more detailed error information are available in the error
 object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cancel all buffered instances}}} 
{#{\footnote\plain{#}{.bmaos}}} 
{K{\footnote\plain{K}{PropertyHandle:Cancel
Buffer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CancelBuffer\tab -  Cancel all buffered instances\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Cance
lBuffer ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will release all instances in a buffer.
 The next Get() access will fill the buffer again.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an erro
r. In case of normal termination the value is NO. When the funct
ion returns YES more detailed error information are available in
 the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Change collection buffer count}}} 
{#{\footnote\plain{#}{.bmaot}}} 
{K{\footnote\plain{K}{PropertyHa
ndle:ChangeBuffer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ChangeBuffer\tab -  Change collection buffer count\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  i
nt16 ChangeBuffer (int16 buffnum=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Instances for a Property
Handle can be read in block mode. The function allocates a buffe
r size to the property handle, i.e. the number of instances that
 will be read at once. When a buffer has already been allocated 
you can use the function to change the buffer size. Passing 0 or
 1 will change from buffered read to unbuffered access (same as 
ReleaseBuffer()). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Buffered access can be used for reading collec
tions with fixed type, only. Trying to enable buffered access fo
r untyped or weak typed collections will fail without writing an
 error to the error log file. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When passing AUTO as buffer size t
he number of instances stored in the collection is reserved. Thu
s, you will read the complete collection into the buffer. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a
 filter has been defined for the property handle only instances 
are read into the buffer that fulfill the filter condition. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usua
lly the buffer is filled automatically when reading an instance 
that is not contained in the buffer. The system tries to read as
 many instances as defined in buffer size from the current posit
ion. Subsequent Get() request will read from the buffer as long 
as possible. Cancel() will cansel the current selection but not 
the instances in the buffer. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 To position the buffer on a certain
 instance you can use the ReadBuffer() function. For resetting t
he buffer you can use the CancelBuffer() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You cannot use
 blockmode for views containing references. In this case the fun
ction will ignore the request and buffer size remains 1. There a
re also problems in client/server mode when referring to sub-pro
perty handles for references in instances that heve been reading
 in blockmode. Moreover, blockmode cannot be used for updating i
nstances.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Number of instance buffers\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the num
ber of instance buffers allocated to the collection handle.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 buffnum\tab - Number of instance buffers\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the number of in
stance buffers allocated to the collection handle.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Change access 
mode}}} 
{#{\footnote\plain{#}{.bmaov}}} 
{K{\footnote\plain{K}{PropertyHandle:ChangeMode}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ChangeMode\tab -  Change access mo
de\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PIACC ChangeMode (PIACC newmode );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows changin
g the access mode for a PropertyHandle. This requires that the b
atabase object access mode is higher or equal to the mode that i
s going to be activated. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can always change from higher modes
 (PI_Write, PI_Update) to lower modes (PI_Read). Changing from r
ead to update or write mode has, however, some limitations. You 
may change the mode in any directions for extent property handle
s and for property handles referring to updateable relationships
. Changing the mode for non updateable relationschips or referen
ces, however, is possible only to PI_Read or PI_Write. Changing 
to PI_Write is possible only, when the parent PropertyHandle is 
opened with or set to PI_Write.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Changing the access mode will can
cel all subsequent PropertyHandles and change the mode to the mo
de requested for teh current PropertyHandle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Property handle runn
ing in block mode can be accessed in read mode, only. Change mod
e will fail when attemtimg to change the mode to update or write
 in this case.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Old access mode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Access mode that was 
valid for the property handle.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 newmode\tab - New access mode
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Access mode to be set for the property handle.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Check property han
dle}}} 
{#{\footnote\plain{#}{.bmaow}}} 
{K{\footnote\plain{K}{PropertyHandle:Check}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Check\tab -  Check property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logic
al Check (logical ini_opt=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether a pro
perty handle is valid and opened. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually property handles are o
pened on demand, i.e. when access to any database source is requ
ired. After opening a property handle a structure definition is 
available and access is possible in principle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If the property h
andle is invalid or not opened the function returns YES, otherwi
se NO.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the func
tion returns an error. In case of normal termination the value i
s NO. When the function returns YES more detailed error informat
ion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ini_opt\tab - Initial
ize option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the function to initialize the prope
rty handle if not yet done. Usually property handles are initial
ized automatically on demand, i.e. when being used the first tim
e. \par
Default: NO\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is current instance permanent write protected?}}} 
{#{\footnote\plain{#}{.bma
oz}}} 
{K{\footnote\plain{K}{PropertyHandle:CheckWProtect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CheckWProtect\tab -  Is current instanc
e permanent write protected?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CheckWProtect ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Instances
 can be marked as persistent write protected (SetWProtect()). Su
ch instances cannot be updated by any user. The function returns
 the persistent write protection state.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Persistent write protecti
on can be reset with ResetWProtect().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Write protect
ion state\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances can be write protected because they are used 
by anoter application (pessimistic locking) or because they are 
persistent wirite protected.\par
0 - instance is not write protected\par
1
 - instance is temporarily write protected\par
2 - instance is persis
tent write protected\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Close Property Handle}}} 
{#{\footnote\plain{#}{con8ps08u}}} 
{K{\footnote\plain{K}{PropertyHandle
:Close}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Close\tab -  Close Property Handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl Close 
                                  ( DBField *co, DBField *retval
, ParmList *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Cl
ose ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will close the property handle without dest
roying it. The handle can be re-opend later again.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When closing o
r destroying the property handle unsaved modifications will be s
aved atomatically. This might cause a number of activities inclu
ding event handlers. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Since the close fonction or the destructor 
are called implicitely in many cases, the function will push the
 error and restore it, when no error has detected while closing 
the property handle. When terminating normally, the error set is
 the same as before calling the close function. Otherwise the er
ror returned in SDBError or CTXError is the error from the close
 function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the 
function returns an error. In case of normal termination the val
ue is NO. When the function returns YES more detailed error info
rmation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare the values for
 two property handles}}} 
{#{\footnote\plain{#}{.bmaq1}}} 
{K{\footnote\plain{K}{PropertyHandle:Compare}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Compare\tab -  Compa
re the values for two property handles\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 Compare (const Prop
ertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int16 Compare (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int16 Co
mpare (int32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int16 Compare (double double_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int
16 Compare (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int16 Compare (dbtm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The 
function compares the values of the two property handles. The fu
nction cannot compare collections. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retuns -1 when t
he the value for the property handle is lower than the value for
 the passed property handle. The function retuns 1 when the the 
value for the property handle is higher than the value for the p
assed property handle. The function returns 0 if the values are 
equal.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns ERIC (-99) if the values are not comp
areble, i.e. no instance selected for the property or invalid pr
operty handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Compare result\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The result of a comari
sion is an integer value with the following meaning: \par
 0 - both o
perands have the same value\par
 1 - the calling operand is greater t
han the passed operand\par
-1 - the calling operand is smaller than t
he passed operand\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a refere
nce to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-ter
minated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is passed a
s platform independent 32-bit integer value.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 double_val\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val
\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in the internal data format
.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The tim
e value is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class def
inition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare two ident key values}}} 
{#{\footnote\plain{#}{.bmaps}}} 
{K{\footnote\plain{K}{PropertyHand
le:CompareKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CompareKey\tab -  Compare two ident key values\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int8 Comp
areKey (Key ident_key1, Key ident_key2 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function compares t
wo ident key values. The keys are compared according to the data
 types of it's components.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retuns -1 when the the va
lue for the first key (ident_key1) is lower than the value for t
he second key (ident_key2). The function retuns 1 when the the f
irst value is higher than the second one. The function returns 0
 when the keys are are equal.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns ERIC (-99) if 
the values are not compareble, i.e. when no ident key has been d
efined or when the property handle is invalid.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Comp
are result\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Compare functions return the folowing values:\par
  0  - Bo
th values are equal \par
  1  - The second value is larger than the f
irst\par
 -1 - The second value is smaller than the first\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 id
ent_key1\tab - First ident key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the intern
al key format. When necessary the key value can be converted fro
m a string into the internal format using the StringToKey() func
tion. Regardles on the type key values are passed as Key handle 
or (char *) areas.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ident_key2\tab -
 Second key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format.
 When necessary the key value can be converted from a string int
o the internal format using the StringToKey() function. Regardle
s on the type key values are passed as Key handle or (char *) ar
eas.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare keys accroding to
 current sort order}}} 
{#{\footnote\plain{#}{.bmapt}}} 
{K{\footnote\plain{K}{PropertyHandle:CompareSortKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CompareSor
tKey\tab -  Compare keys accroding to current sort order\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int8 Compare
SortKey (Key sort_key1, Key sort_key2 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function compares tw
o key values for the selected sort key (SetOrder()). The keys ar
e compared according to the data types of it's components.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fu
nction retuns -1 when the the value for the first key (sort_key1
) is lower than the value for the second key (sort_key2). The fu
nction retuns 1 when the the first value is higher than the seco
nd one. The function returns 0 when the keys are are equal.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The f
unction returns ERIC (-99) if the values are not compareble, i.e
. when the collection is unordered or when the property handle i
s invalid.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Compare result\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Compare functions return t
he folowing values:\par
  0  - Both values are equal \par
  1  - The secon
d value is larger than the first\par
 -1 - The second value is smalle
r than the first\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key1\tab - First sort key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is pr
ovided in the internal key format. When necessary the key value 
can be converted from a string into the internal format using th
e StringToKey() function. Regardles on the type key values are p
assed as Key handle or (char *) areas.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key2\tab - Second key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the interna
l key format. When necessary the key value can be converted from
 a string into the internal format using the StringToKey() funct
ion. Regardles on the type key values are passed as Key handle o
r (char *) areas.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check proper
ties for comparability}}} 
{#{\footnote\plain{#}{.bmapu}}} 
{K{\footnote\plain{K}{PropertyHandle:CompareType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CompareTyp
e\tab -  Check properties for comparability\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CompareType (Prop
ertyHandle &prop_hdl, logical convert );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks the 
comparability for the data of two property handles. Usually prop
erty handles are considered as comparable when they have the sam
e type. When requesting data convertion (passing YES for convert
) the function checks, whether the types are comparable after co
nversion.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the f
unction returns an error. In case of normal termination the valu
e is NO. When the function returns YES more detailed error infor
mation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Pro
perty Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handl
e.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 convert\tab - Convers
ion option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 To allow data conversion the value must be set to YES.
 To supress data conversion NO shold be passed. \par
\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Does property co
ntain text}}} 
{#{\footnote\plain{#}{.bmapv}}} 
{K{\footnote\plain{K}{PropertyHandle:Contains}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Contains\tab -  Does property 
contain text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl Contains                     
           ( DBField *co, DBField *retval, ParmList *parmlist, c
har *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Contains (char *reg_strin
g, logical case_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Contains (char *reg_string, char 
*prop_path, logical case_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks, wether the i
nstance for the selected property handle contains the text passe
d in reg_string. The function returns true (YES), when the text 
has been found.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This version supports simple string expressions a
s 'string", '*string', 'string*' and '*string*'. When not beginn
ing or terminting the search string with an '*', the text must b
e at the beginning or at the end of a word. Searching for 'strin
g' will search for whole words, only. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered positivl
y. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 reg_string\tab - Regular string expression
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The string contains a regular string expression passed as 0-term
inated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 case_opt\tab - Case sensitive\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates case 
sensitive data in text (YES)\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property
 path is passed as 0-terminated string. It may contain a single 
property name or a sequence of property names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{C
onverts ASCII character into Windows compatible ANSI character s
et}}} 
{#{\footnote\plain{#}{.bmapw}}} 
{K{\footnote\plain{K}{PropertyHandle:ConvertToWinChar}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ConvertToWinChar\tab -  Conver
ts ASCII character into Windows compatible ANSI character set\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  lo
gical ConvertToWinChar ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function converts ASCII character
 in a text property handle into Windows compatible ANSI characte
r. The data is updated in-place and a data modification is signa
led.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the functi
on returns an error. In case of normal termination the value is 
NO. When the function returns YES more detailed error informatio
n are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Copy instance}}} 
{#{\footnote\plain{#}{.bmapx}}} 
{K{\footnote\plain{K}{PropertyH
andle:Copy}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Copy\tab -  Copy instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance Copy (PropertyHandle &so
urce_handle, PIREPL replopt=REPL_none, int16 copy_type=UNDEF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  
Instance Copy (PropertyHandle &source_handle, Key new_key, PIREP
L replopt=REPL_none, int16 copy_type=UNDEF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Copy (Pro
pertyHandle &source_handle, int32 set_pos0, PIREPL replopt=REPL_
none, int16 copy_type=UNDEF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Copy (PropertyHandle &so
urce_handle, Key new_key, int32 set_pos0, PIREPL replopt=REPL_no
ne, int16 copy_type=UNDEF );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows copying instance
s from one collection into another. The function creates a new i
nstance that is filled with the data from the source instance. T
he function allows copying instances between collections in diff
erent databases. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The source handle must point to a selected inst
ance that is copied into the target handle collection. The targe
t property handle must be opened for write access. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Source and ta
rget property handle may refer to collections of different types
. Properties of the copied instances are copied by name. Names o
f property handles in base structured are considered without pre
fix. When the target collection is weak typed the type for the t
arget instance must be set by the application before copying the
 instance (SetType()).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the instance to be copied does alread
y exist in the target collection, which is determined according 
to the sort order selected for the target collection, different 
replace options (r. PIREPL) will control the copy behaviour (rep
lopt). Copying an existing instance without requesting replaceme
nt of existing instances will result in an error. When no unique
 sort order has been selected instances are considered as not ex
isting and are copied always. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Copying instances includes copying
 related collections (references and relationships). Only primar
y relationships (not defined as secondary) are copied to avoid u
nlimited recursions. When copyinf related collection the replace
 option is passed to the subsequent copy operations. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The copy ty
pe supports a two phase copy process. Normally copying an instan
ce owning parts and primary relationships are copied at once. So
metimes this may lead to logical problems since it is not always
 possible to ensure that base collections are copied before copy
ing primary relationships based on it. Since this leads to incom
plete copy operations a two phase copy can be used copying first
 the owning parts (REPL_instance) and later with a second call o
f the copy function the primary relationships (REPL_relationship
). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When Copy terminates succesfully the copied instance is selec
ted in the target property handle and the instance is returned. 
When terminating with errors the function returns an emty instan
ce.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the 
referenced property handle (collection type). The instance conta
ins a pointer to a properly structured instance area. \par
You can us
e the !-operator or the GetData() function to check whether the 
instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  I
nstance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 source_handle\tab - Source property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The source
 property handle must be opened and an instance must be selected
 in the handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rep
lopt\tab - Replace option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The replace option controls the behaviour of
 the copy function. Options that can be used here are:\par
REPL_none 
- do not replace existing instances\par
REPL_direct - copy attributes
, only (but no global identities)\par
REPL_GUID - copy attributes inc
luding global identity\par
REPL_local  - replace collections owned by
 the instance\par
REPL_all - replace primary relationships\par
REPL_no_cre
ate - copy primary relationships without creating new instances\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 copy_type\tab - Copy type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The cop
y type determins the way of copying instances:\par
REPL_all - copies 
all instances recursively owned by the instance and the primary 
relationships\par
REPL_Instance - copies all instances recursively ow
ned by the instance\par
REPL_relationship - copies the primary relati
onships\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 new_key\tab - New key fo
r the instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key passed for renaming the instance must be s
tructured according to the currently selected sort order.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos
0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a collec
tion depends on the selected index. if the collection is unsorte
d the position is the only way for accessing the instance. \par
For s
orted collections the position is determined according to the in
stance key. If thee is a contradiction between position and key 
value the position will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INS
TANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the currently selected instance. If 
no instance is selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_I
NSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the first instance in a coll
ection according to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANC
E\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the last instance in a collection 
according to the selected index (sort order).\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Copy data from an i
nstance area}}} 
{#{\footnote\plain{#}{.bmapy}}} 
{K{\footnote\plain{K}{PropertyHandle:CopyData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyData\tab -  Copy data fr
om an instance area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CopyData (char *instance, logical sw
itchopt=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function copies the data from the instance area
 passed into the selected instance of the property handle. The s
tructure of the instance area must correspond to the structure o
f the property handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Passing 'saveopt' YES will store the insta
nce immediately.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES i
f the function returns an error. In case of normal termination t
he value is NO. When the function returns YES more detailed erro
r information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instan
ce\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced pr
operty handle (collection type). The instance contains a pointer
 to a properly structured instance area. \par
You can use the !-opera
tor or the GetData() function to check whether the instance refe
rs to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 switch
opt\tab - Unselct option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the function to unselect th
e selected instance in the property handle after terminating the
 function.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create a copy for the property description}}} 
{#{\footnote\plain{#}{.bmapz}}} 
{K{\footnote\plain{K}{Proper
tyHandle:CopyDescription}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyDescription\tab -  Create a copy for the 
property description\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CopyDescription (DBFieldDef *prop_d
ef );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a copy for the property definition tha
t can be modified in the application. Do never modify the descri
ption profided by the system.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The v
alue is YES if the function returns an error. In case of normal 
termination the value is NO. When the function returns YES more 
detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_def\tab - Property definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property defintion conta
ins the metadata for the referenced property instance.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  DBFieldDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Create a copy of the property ha
ndle}}} 
{#{\footnote\plain{#}{con8ps09u}}} 
{K{\footnote\plain{K}{PropertyHandle:CopyHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyHandle\tab -  Create a copy
 of the property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CopyHandle (PropertyHandle &prop
_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical CopyHandle (PropertyHandle *property_handle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function creates a copy of the property handle when being call
ed with a property handle reference. A copy of a property handle
 has its own cursor but refers to the same data source (collecti
on, instance, value).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When passing a property handle pointer the 
function creates another property handle that shares the data so
urce and the cursor with its origin. In this case changing the s
election in the origin or the copy will always affect the other 
handle as well.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if
 the function returns an error. In case of normal termination th
e value is NO. When the function returns YES more detailed error
 information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hd
l\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property
 handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 property_h
andle\tab - Pointer to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually) 
opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyH
andle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Copy transient instance}}} 
{#{\footnote\plain{#}{.bmar1}}} 
{K{\footnote\plain{K}{PropertyHandle:CopyInst}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyIns
t\tab -  Copy transient instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance CopyInst (char *srceinst, s
mcb *srcesmcb, PIREPL replopt=REPL_none, int16 copy_type=UNDEF )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows copying a transient instance into the the c
ollection referenced by the property handle. Source and target m
ay have different structure definitions. Properties are copied b
y property names. Type conversion is performed when necessary. A
fter copying the attributes the function tries to locate the ins
tance according to the sort key or the ident key (if no order is
 defined). Otherwise the function tries to locate the instance i
n the base collection (if there is any). When the instance does 
already exist in the collection it will be overwritten according
 to the replace options. Otherwise the instance is added to the 
collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Traget instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the ty
pe of the referenced property handle (collection type). The inst
ance contains a pointer to a properly structured instance area. 
\par
You can use the !-operator or the GetData() function to check wh
ether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definiti
on for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srceinst\tab - Source instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A pointer to
 an instance of the defined type must be passed. The instance ca
n be a persistent instance read from another location or a trans
ient one. The structure of the instance must confirm to the pass
ed structure definition (srcesmcb). References or relationships 
in the new instance will be ignored (if there are any).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srcesmcb\tab -
 Pointer to general structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more gener
al way to define structure (DBStructDef). It contains informatio
n for the structure and its properties. The definition describes
 the structure of the instance passed to the function.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 replopt\tab - Replace option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The replace opt
ion controls the behaviour of the copy function. Options that ca
n be used here are:\par
REPL_none - do not replace existing instances
\par
REPL_direct - copy attributes, only (but no global identities)\par
RE
PL_GUID - copy attributes including global identity\par
REPL_local  -
 replace collections owned by the instance\par
REPL_all - replace pri
mary relationships\par
REPL_no_create - copy primary relationships wi
thout creating new instances\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PIRE
PL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 copy_type\tab - Copy type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The copy type determins the way of copying
 instances:\par
REPL_all - copies all instances recursively owned by 
the instance and the primary relationships\par
REPL_Instance - copies
 all instances recursively owned by the instance\par
REPL_relationshi
p - copies the primary relationships\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition fo
r:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Copy collection}}} 
{#{\footnote\plain{#}{.bmaqt}}} 
{K{\footnote\plain{K}{PropertyHandle:CopySet}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopySet\tab -  C
opy collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 CopySet (const PropertyHandle &csource_hand
le, PIREPL replopt=REPL_none, int16 copy_type=UNDEF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on copies all instances of the source collection to the target c
ollection. The function works well for multiple references as we
ll as for single references. The function cannot be used for MEM
O fields. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The target Property Handle must be opened in unpdate m
ode (PI_Write). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Source and target need not to refer to the same 
object type. Attributes and references are copied by property na
me, i.e. they are assigned by looking for the same property name
 in the target instance. Data conversin is performed automatical
ly if possible. This includes also convertind imbedded instances
 into references and reverse.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The target collection is not emptie
d automatically. Existing instances in the target are replaced a
ccording to the replace option passed to the function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When succe
ssfull the function returns the number of instances copied to th
e target collection (including 0 when the source was empty). Whe
n the function has terminated because of an error it returns AUT
O (-1). Source and target handle are not positioned after termin
ating the function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Number of entries\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 csou
rce_handle\tab - Source property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The source property handle mus
t be opened and an instance must be selected in the handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See a
lso class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 replopt\tab - Replace option
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The replace option controls the behaviour of the copy function. 
Options that can be used here are:\par
REPL_none - do not replace exi
sting instances\par
REPL_direct - copy attributes, only (but no globa
l identities)\par
REPL_GUID - copy attributes including global identi
ty\par
REPL_local  - replace collections owned by the instance\par
REPL_al
l - replace primary relationships\par
REPL_no_create - copy primary r
elationships without creating new instances\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 copy_type\tab - Copy type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The copy type determins the
 way of copying instances:\par
REPL_all - copies all instances recurs
ively owned by the instance and the primary relationships\par
REPL_In
stance - copies all instances recursively owned by the instance\par
R
EPL_relationship - copies the primary relationships\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also clas
s definition for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Creates a temporary extent}}} 
{#{\footnote\plain{#}{.bmaqv}}} 
{K{\footnote\plain{K}{Propert
yHandle:CreateTempExtent}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CreateTempExtent\tab -  Creates a temporary e
xtent\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CreateTempExtent (ACObject *obhandle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Cr
eateTempExtent (PropertyHandle &prophdl_ref, char *extnames_w=NU
LL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function can be used to open a property handle for a t
ransient collection property (transient reference). The property
 must have a definition that has been provided by the constructo
r or an appropriate open function. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function creates a tempor
ary collection with the structure of the transient reference pro
perty.  The property handle is opened in write mode, always. If 
the collection is already opened the function returns without er
ror.  You can reset the transient reference using the ResetTrans
ientProperty() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns an error (YES) if t
he property handle does not define a transient reference.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns 
an error. In case of normal termination the value is NO. When th
e function returns YES more detailed error information are avail
able in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle\tab - Database Object Han
dle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the database object handle or the database handle whe
n referring to the root object or the dictionary handle when ref
erring to the root object of the dictionary database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cl
ass definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Pro
perty handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handl
e.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames_w\tab - Exte
nt name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed as 0-terminated string or as bu
ffer with trailing blanks and a maximum length of 40 characters.
\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Delete/remove instance from collection}}} 
{#{\footnote\plain{#}{.bmaqw}}} 
{K{\footnote\plain{K}{PropertyHandle:Delet
e}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Delete\tab -  Delete/remove instance from collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far _
_cdecl Delete                                  ( DBField *co, DB
Field *retval, ParmList *parmlist, char *impname, logical chkopt
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Delete (Key sort_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Delete (int32 set_pos
0_w=AUTO, logical del_dep=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Delete (PropertyHandle 
&prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function removes the selected instance from the 
collection. Whe passing a key or a position the function selects
 the instance with the passed key or the given position before r
emoving it from the collection. Deleting by key is possible only
 when a sort order with a unique key has been selected. For remo
ving an instance from a collection the property handle must be o
pened in write mode. For deleting the instance the selected inst
ance must be available in write mode as well.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Removing an insta
nce from a collection will delete the instance as well, when the
 collection is owning the instance or when the instances in the 
collection do depend on the collection. You may also request del
eting the instance by passing YES for the del_dep parameter. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Rem
oving an instance from a collection it will maintain automatical
ly inverse references. Moreover, the instance is removed from al
l derived collections (subsets). This means the instances might 
be deleted also, when being dependent on one of the derived coll
ections. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When deleting the instance derived instances are delete
d as well. All inverse relationships and subset relationships ar
e maintained.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if t
he function returns an error. In case of normal termination the 
value is NO. When the function returns YES more detailed error i
nformation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key\tab - Sort key 
value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. When necess
ary the key value can be converted from a string into the intern
al format using the StringToKey() function. When no key is passe
d by the application an empty key (without data area) will be pa
ssed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab - Position in 
collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a collection depends on
 the selected index. if the collection is unsorted the position 
is the only way for accessing the instance. \par
For sorted collectio
ns the position is determined according to the instance key. If 
thee is a contradiction between position and key value the posit
ion will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTAN
CE refers to the currently selected instance. If no instance is 
selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_IN
STANCE (0) refers to the first instance in a collection accordin
g to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE
 (0) refers to the last instance in a collection according to th
e selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 del_dep\tab - Delete dependent instance
s\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Usually this option is set to YES, i.e. all dependent instances
 are deleted when being removed from the collection. Passing NO 
dependent instances are not deleted but removed from the collect
ion, only. \par
Instances owned by the collection are, however, alway
s deleted.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually
) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Propert
yHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Delete/remove all instance in a collection}}} 
{#{\footnote\plain{#}{.bmaqx}}} 
{K{\footnote\plain{K}{PropertyH
andle:DeleteSet}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DeleteSet\tab -  Delete/remove all instance in a colle
ction\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical DeleteSet (logical del_dep=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function remo
ves all instances from the collection. Instances are removed/del
eted as described in the Delete() function. When the finction fa
ils the collection remains unchanged.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination c
ode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of
 normal termination the value is NO. When the function returns Y
ES more detailed error information are available in the error ob
ject.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 del_dep\tab - Delete dependent instances\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Usually this o
ption is set to YES, i.e. all dependent instances are deleted wh
en being removed from the collection. Passing NO dependent insta
nces are not deleted but removed from the collection, only. \par
Inst
ances owned by the collection are, however, always deleted.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Deref
erence collection handle}}} 
{#{\footnote\plain{#}{.bmaqy}}} 
{K{\footnote\plain{K}{PropertyHandle:Dereference}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Derefere
nce\tab -  Dereference collection handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle *Dereference 
( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns a dereferenced property handle. The Are
a is shared with the Area of the original handle and the instanc
e is associated with the collection of the original handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retur
n value\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened pr
operty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dupl
icate instance}}} 
{#{\footnote\plain{#}{con8ps00u}}} 
{K{\footnote\plain{K}{PropertyHandle:Duplicate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Duplicate\tab -  Dupli
cate instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance Duplicate (int32 set_pos0, PIREPL replopt
=REPL_none );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Duplicate (Key ident_key, PIREPL replopt=
REPL_none );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can use duplicate to create a new version of the
 selected instance in the same collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Duplicate should be u
sed only, if the instance to be copied has no shared base instan
ces or if all shared base instances are identified by the select
ed sort key for the instance. If this is not the case the system
 trys to create appropriate base instances with refering to the 
original base instance except base instances identified by __AUT
OIDENT or __IDENTITY, i.e. Duplicate() will not copy automatic k
eys but creates new base instances with new keys. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced proper
ty handle (collection type). The instance contains a pointer to 
a properly structured instance area. \par
You can use the !-operator 
or the GetData() function to check whether the instance refers t
o data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a
 collection depends on the selected index. if the collection is 
unsorted the position is the only way for accessing the instance
. \par
For sorted collections the position is determined according to
 the instance key. If thee is a contradiction between position a
nd key value the position will be ignored. \par
Special positions are
\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the currently selected instan
ce. If no instance is selected it refers to the first instance. 
\par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the first instance in
 a collection according to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_
INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the last instance in a coll
ection according to the selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 replopt\tab - Rep
lace option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The replace option controls the behaviour of the copy
 function. Options that can be used here are:\par
REPL_none - do not 
replace existing instances\par
REPL_direct - copy attributes, only (b
ut no global identities)\par
REPL_GUID - copy attributes including gl
obal identity\par
REPL_local  - replace collections owned by the inst
ance\par
REPL_all - replace primary relationships\par
REPL_no_create - cop
y primary relationships without creating new instances\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ident_key\tab - Ident key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is
 provided in the internal key format. When necessary the key val
ue can be converted from a string into the internal format using
 the StringToKey() function.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{E
xecute action on instance level}}} 
{#{\footnote\plain{#}{.bmars}}} 
{K{\footnote\plain{K}{PropertyHandle:ExecuteInsta
nceAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecuteInstanceAction\tab -  Execute action on instance leve
l\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ExecuteInstanceAction (char *action_name, char *parm_s
tring );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function calls an action that is defined in the stru
cture context of the current instance. The function is executed 
on the server side.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The action may use the SetActionResult() func
tion to pass the result of the action to the client application.
 The result can be retrieved from the client application using t
he function GetActionResult().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
value is YES if the function returns an error. In case of normal
 termination the value is NO. When the function returns YES more
 detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action_name\tab - Name of the action to be performed\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name 
of the action is passed as 0-terminated string with a maximum le
ngth of 40 significant characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm_string\tab - Parameter string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he parameter string is passed as 0-terminated string and contain
s the parameters according to the conventions of the action call
ed.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Execute action on property (collection) level}}} 
{#{\footnote\plain{#}{.bmart}}} 
{K{\footnote\plain{K}{PropertyHa
ndle:ExecutePropertyAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExecutePropertyAction\tab -  Execute action
 on property (collection) level\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ExecutePropertyAction (c
har *action_name, char *parm_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function calls an acti
on that is defined in theproperty context of the property handle
. The function is executed on the server side.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The action may use
 the SetActionResult() function to pass the result of the action
 to the client application. The result can be retrieved from the
 client application using the function GetActionResult().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns 
an error. In case of normal termination the value is NO. When th
e function returns YES more detailed error information are avail
able in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action_name\tab - Name of the acti
on to be performed\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The name of the action is passed as 0-terminat
ed string with a maximum length of 40 significant characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 par
m_string\tab - Parameter string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The parameter string is passed as 0-te
rminated string and contains the parameters according to the con
ventions of the action called.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is instance selected?}}} 
{#{\footnote\plain{#}{.bmaru}}} 
{K{\footnote\plain{K}{Propert
yHandle:Exist}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Exist\tab -  Is instance selected?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl
 Exist                                   ( DBField *co, DBField 
*retval, ParmList *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  log
ical Exist ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks for references and coll
ections whether an instance is selected or not. For attributes t
he functions checks whether an instance area has been allocated 
for the instance or not.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function r
eturns YES when the question was answered positivly. Otherwise i
t returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Extract ident key value}}} 
{#{\footnote\plain{#}{.bmarv}}} 
{K{\footnote\plain{K}{PropertyHandle:Extract
Key}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExtractKey\tab -  Extract ident key value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Key ExtractKey (Key iden
t_key_w=Key(), Instance instance_w=Instance() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ext
racts the ident key value according to the structure definition 
of the property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When no instance has been passed the fun
ction extracts the key from the currently selected instance. If 
no instance has been selected in the property handle the functio
n will set the cursor to the first instance (if possible). When 
no instance could be selected (empty datasource) the function re
turns an empty key. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a key area has been passed in the key p
arameter the function returns the key in the passed key area. Wh
en no key or an empty key has been passed the returned key area 
refers to an internal area, which should not be modified by the 
application. This area is valid until the next ODABA interface f
unction has been called.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provid
ed in the internal key format. When necessary the key value can 
be converted to a string using the (.r pib.KeyToString*** ERROR 
: Chapter not found ***()) function.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ident_key_w\tab - Ident
 key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. When n
ecessary the key value can be converted from a string into the i
nternal format using the StringToKey() function. \par
Default: Key() 
(empty key)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance_w\tab - Instan
ce area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced property han
dle (collection type). The instance contains a reference to a pr
opertly structured area. \par
You can use the !-operator or the GetDa
ta() function to check whether the instance refers to data or no
t.\par
Default: Instance()\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ext
ract sort key value}}} 
{#{\footnote\plain{#}{.bmarw}}} 
{K{\footnote\plain{K}{PropertyHandle:ExtractSortKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ExtractSor
tKey\tab -  Extract sort key value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Key ExtractSortKey (Key sort_key_w
=Key(), Instance instance_w=Instance() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function extracts t
he key value according to the curent sort order (index). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When no
 instance has been passed the function extracts the key from the
 currently selected instance. If no instance has been selected i
n the property handle the function will set the cursor to the fi
rst instance (if possible). When no instance could be selected (
empty datasource) the function returns an empty key. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a key 
area has been passed in the key parameter the function returns t
he key in the passed key area. When no key or an empty key has b
een passed the returned key area refers to an internal area, whi
ch should not be modified by the application. This area is valid
 until the next ODABA interface function has been called.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. 
When necessary the key value can be converted to a string using 
the (.r pib.KeyToString*** ERROR : Chapter not found ***()) func
tion.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key_w\tab - Sort key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in 
the internal key format. When necessary the key value can be con
verted from a string into the internal format using the StringTo
Key() function. \par
Default: Key() (empty key)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance_w\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type
 of the referenced property handle (collection type). The instan
ce contains a reference to a propertly structured area. \par
You can 
use the !-operator or the GetData() function to check whether th
e instance refers to data or not.\par
Default: Instance()\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Fill instance from external one}}} 
{#{\footnote\plain{#}{.bmar
x}}} 
{K{\footnote\plain{K}{PropertyHandle:Fill}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Fill\tab -  Fill instance from external one\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logic
al Fill (char *instance );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function copies all fields includi
ng references from the instance passed to the function into the 
selected instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 inst
ance\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced 
property handle (collection type). The instance contains a point
er to a properly structured instance area. \par
You can use the !-ope
rator or the GetData() function to check whether the instance re
fers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Fill
 instance from external one}}} 
{#{\footnote\plain{#}{.bmary}}} 
{K{\footnote\plain{K}{PropertyHandle:FillData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 FillData
\tab -  Fill instance from external one\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical FillData (char *insta
nce );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function copies all fields without references from the
 instance passed to the function into the selected instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function retur
ns an error. In case of normal termination the value is NO. When
 the function returns YES more detailed error information are av
ailable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Ins
tances do have the type of the referenced property handle (colle
ction type). The instance contains a pointer to a properly struc
tured instance area. \par
You can use the !-operator or the GetData()
 function to check whether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 Se
e also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Locate first key}}} 
{#{\footnote\plain{#}{.bmarz}}} 
{K{\footnote\plain{K}{Prop
ertyHandle:FirstKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 FirstKey\tab -  Locate first key\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Key FirstKey ( );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function locates the first sort key in the index. When the d
ata source is unordered the function locates the first instance 
and extracts the ident key.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The returned key area refers to an 
internal area, which should not be modified by the application. 
This area is valid until the next ODABA interface function has b
een called.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Sort key value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in th
e internal key format. When necessary the key value can be conve
rted from a string into the internal format using the StringToKe
y() function. When no key is passed by the application an empty 
key (without data area) will be passed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition
 for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property instance}}} 
{#{\footnote\plain{#}{IDg.6.zs}}} 
{K{\footnote\plain{K}{PropertyHandle:Get}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Get\tab -  G
et property instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl Get                  
                   ( DBField *co, DBField *retval, ParmList *par
mlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Get (int32 set_p
os0_w=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Get (Key sort_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Get (Proper
tyHandle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The Get() function allows selecting an inst
ance in a property handle collection by key or position. The fun
ction can also be used to locate an instance in an array attribu
te or to get a single attribute instance. Before a new instance 
is selected the curent selection in the property handle is cance
lled. in case of instance modifications on the previously select
ed instance those are saved automatically. Selecting an instance
 will also cancel the selection of all subordinated property han
dles. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the instance that has been selected i
n the property handle when is has been executed successfully. Ot
herwise it returns an empty instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced property handle (co
llection type). The instance contains a pointer to a properly st
ructured instance area. \par
You can use the !-operator or the GetDat
a() function to check whether the instance refers to data or not
.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab - Position in
 collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a collection depends o
n the selected index. if the collection is unsorted the position
 is the only way for accessing the instance. \par
For sorted collecti
ons the position is determined according to the instance key. If
 thee is a contradiction between position and key value the posi
tion will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTA
NCE refers to the currently selected instance. If no instance is
 selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_I
NSTANCE (0) refers to the first instance in a collection accordi
ng to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANC
E (0) refers to the last instance in a collection according to t
he selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key\tab - Sort key value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key i
s provided in the internal key format. When necessary the key va
lue can be converted from a string into the internal format usin
g the StringToKey() function. When no key is passed by the appli
cation an empty key (without data area) will be passed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also 
class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a referenc
e to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definiti
on for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get result from last action executed}}} 
{#{\footnote\plain{#}{.bmat
1}}} 
{K{\footnote\plain{K}{PropertyHandle:GetActionResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetActionResult\tab -  Get result from
 last action executed\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetActionResult ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ret
urns the resultstring from the last action executed. The result 
string is available until the next action call, only. When the a
ction does not return a result the function returns NULL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Result string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The result string can be a list of strings w
here strings are usually separated by x01 characters. If there i
s only one string returned the string is 0-terminated. Multiple 
strings are terminated with 0 after the last string in the list,
 which should be terminated with x01 as well.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Instance area}}} 
{#{\footnote\plain{#}{.b
mass}}} 
{K{\footnote\plain{K}{PropertyHandle:GetArea}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetArea\tab -  Get Instance area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetA
rea (char chkopt=AUTO ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  char *GetArea (char *prop_path, c
har chkopt=AUTO ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the instance area f
or the property handle. In contrast to GetInstance() the functio
n returns the instance area as (char *) pointer regardless on wh
ether an instance is selected in the property handle or not.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The 
function will always return a data area when the propertyhandle 
has a valid description. Hence it cannot be used for checking wh
ether a data area is available. For checking whether a data area
 has been allocated use HasData().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 instance area is structured according to the structure defiitio
n (DBStructDef).\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 chkopt\tab - Check option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces 
the function to check the property handle befor running executin
g the function. You can pass NO to avoid unnecessary checking.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 pr
op_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-terminate
d string. It may contain a single property name or a sequence of
 property names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get attribute according to posi
tion}}} 
{#{\footnote\plain{#}{.bmast}}} 
{K{\footnote\plain{K}{PropertyHandle:GetAttribute}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetAttribute\tab -  Get attribut
e according to position\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetAttribute (int32 indx0, logical
 full_path, logical generic=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the name 
of the attribute according to the given index. The attribute ind
ex corresponds to the definition of the structure. Attributes re
turned are always attributes with basic (elementary) types. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Attr
ibutes in base structures or imbedded structures are returned as
 property pathes (e.g. address.city when address is a structured
 attribute in person). The leading part for base structures (usu
ally the structure name) is displayed only when passing YES for 
the full_path option (default: NO). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Generic attributes can be co
nsidered as references or as attributes. The generic option defi
nes whether generic attributes are considered as attibutes (defa
ult: YES).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If there are no attributes defined for the structure t
he function returns NULL. When an attribute with the given index
 has been found the function returns the property path in the fl
dpath.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the path in communication area of the
 property handle. This area is destroyed when calling the next P
ropertyHandle function.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property p
ath is passed as 0-terminated string. It may contain a single pr
operty name or a sequence of property names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the collecti
on addresses the first instance in the collection with 0. AUTO (
-1) refers to an undefined position.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 full_path\tab - Full path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The full
 path option is used to request the property path including base
 structure names. \par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 generic\tab - Generic attruibute option
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option allows considering generic attributes as references. 
\par
Default: YES\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get collection handle for base collection}}} 
{#{\footnote\plain{#}{.bmasu}}} 
{K{\footnote\plain{K}{Prope
rtyHandle:GetBaseProperty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetBaseProperty\tab -  Get collection handle
 for base collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle *GetBaseProperty ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fun
ction returns the base collection property handle when a base co
llection has been defined for the collection (relationship or ex
tent). Otherwise the function returns NULL.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The returned property
 handle is a sub-handle for the current property handle, i.e. th
e base collection will change automatically whenever the collect
ion in the current property handle changes.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer
 to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually) opened propert
y handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Read inst
ance from Buffer}}} 
{#{\footnote\plain{#}{.bmasv}}} 
{K{\footnote\plain{K}{PropertyHandle:GetBufferInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetBufferI
nstance\tab -  Read instance from Buffer\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance GetBufferInstance (
int32 indx0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function reads an instance from the property h
andle buffer. The function returns the instance according to the
 buffer position indx0. The first instance in the buffer is addr
essed by 0. Usually the buffer index is not identical with the p
osition in the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances d
o have the type of the referenced property handle (collection ty
pe). The instance contains a pointer to a properly structured in
stance area. \par
You can use the !-operator or the GetData() functio
n to check whether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Position in colle
ction\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the collection addresses the first instance
 in the collection with 0. AUTO (-1) refers to an undefined posi
tion.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Returns local collection identity}}} 
{#{\footnote\plain{#}{.bmasw}}} 
{K{\footnote\plain{K}{PropertyHandle:GetCo
llectionID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCollectionID\tab -  Returns local collection identity\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  in
t32 GetCollectionID ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Collections in ODABA have a unique ident
ity like instances, which allows identifying a collection within
 a database.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Unique collection identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get parent
 collection property handle}}} 
{#{\footnote\plain{#}{.bmasx}}} 
{K{\footnote\plain{K}{PropertyHandle:GetCollectionPro
perty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCollectionProperty\tab -  Get parent collection property hand
le\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle *GetCollectionProperty ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function search
es for the next higher collection property handle. When the prop
erty handle is a top handle or a transient property handle the f
unction returns NULL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 I
s a pointer to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also clas
s definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get number of instances stored 
for property}}} 
{#{\footnote\plain{#}{.bmasy}}} 
{K{\footnote\plain{K}{PropertyHandle:GetCount}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCount\tab -  Get number o
f instances stored for property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl GetCount  
                              ( DBField *co, DBField *retval, Pa
rmList *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int32 GetCount
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio returns the number of instances stored in the c
ollection. Since some indexes store multiple references to insta
nces (array index) or do not store all instances in the index, t
he function returns rather the number of references in the index
 than the number of instances in the collection. Usually these n
umbers are, however, identical. To ensure that you get the colle
ction cout you may select the default order (SetOrder()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Number of entries\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get cursor position}}} 
{#{\footnote\plain{#}{.bmasz}}} 
{K{\footnote\plain{K}{PropertyHandle:
GetCurrentIndex}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCurrentIndex\tab -  Get cursor position\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetCu
rrentIndex ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the position of the currentl
y selected instance in the collection according to the selected 
sort order. The function returns a value when an instance has be
en located in the property handle (e.g. LocateKey()) regardles w
hether the instance has been red or not.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Since the position might
 change when instances are inserted or removed from the collecti
on the current index can be used for accessing instances (Get(in
dx0)) in a limited way (e.g. within a transaction).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Position in the collection according to current sort order\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The p
osition refers to the position of an instance reference in a loc
al or global collection. The instance position refers to the pos
ition according to the selected index (sort order, -> .r pib.Set
Order*** ERROR : Chapter not found ***()). \par
If the selected index
 is not unique the system decides the order among instances with
 the same key value. \par
The position may change when inserting or d
eleting instances (e.g. in other applications)..\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get size for sel
ected instance}}} 
{#{\footnote\plain{#}{con8ps0.u}}} 
{K{\footnote\plain{K}{PropertyHandle:GetCurrentSize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCurrentSi
ze\tab -  Get size for selected instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint32 GetCurrentSize ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function usually returns the same as GetSize. For weak typed c
ollections, however, the function returns the size of the select
ed instance in staed of the defined type for the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of the instance or property area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get type for
 selected instance}}} 
{#{\footnote\plain{#}{.bmau1}}} 
{K{\footnote\plain{K}{PropertyHandle:GetCurrentType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCurrentT
ype\tab -  Get type for selected instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetCurrentType ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function usually returns the same as GetType. For weak typed c
ollections, however, the function returns the type of the select
ed instance in staed of the defined type for the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Type name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type name is passed as 0-terminated strin
g with a maximum length of 40 significant characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get current
 type definition}}} 
{#{\footnote\plain{#}{.bmats}}} 
{K{\footnote\plain{K}{PropertyHandle:GetCurrentTypeDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCurrent
TypeDef\tab -  Get current type definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBStructDef *GetCurrentTyp
eDef ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function usually returns the same as GetType. For w
eak typed collections, however, the function returns the type de
finition of the selected instance in staed of the defined type f
or the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structur
e definition is provided in the internal format as pointer to a 
DBStructDef object.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ge
t database handle}}} 
{#{\footnote\plain{#}{.bmatu}}} 
{K{\footnote\plain{K}{PropertyHandle:GetDBHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDBHandle\tab -  G
et database handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DatabaseHandle &GetDBHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
returns the database handle for the current property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer to an opened
 database handle. The database handle can be an opened database 
handle DatabaseHandle as well as an opened dictionary handle (Di
ctionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ge
t Date value for property handle}}} 
{#{\footnote\plain{#}{.bmatv}}} 
{K{\footnote\plain{K}{PropertyHandle:GetDate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetD
ate\tab -  Get Date value for property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt GetDate ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  dbdt 
GetDate (char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the date value f
or the current property handle or for the attribute passed in pr
op_path.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in the 
internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_pa
th\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-terminated str
ing. It may contain a single property name or a sequence of prop
erty names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get property instance as time stamp 
(date/time)}}} 
{#{\footnote\plain{#}{.bmatw}}} 
{K{\footnote\plain{K}{PropertyHandle:GetDateTime}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDateTime\tab -  Get pro
perty instance as time stamp (date/time)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm GetDateTime ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  d
ttm GetDateTime (char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the date
/time value for the current property handle or for the attribute
 passed in prop_path.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Date-Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A date-time va
lue or time point is passed in the internal date-time format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The pro
perty path is passed as 0-terminated string. It may contain a si
ngle property name or a sequence of property names separated by 
'.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get property definition}}} 
{#{\footnote\plain{#}{.bmatx}}} 
{K{\footnote\plain{K}{PropertyHandle:GetDescription}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Ge
tDescription\tab -  Get property definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBFieldDef *GetDescriptio
n (char chkopt=AUTO ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the field defin
ition for the forperty handle. The field definition described th
e structure of the instance area for the property handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If the 
property handle is a collection the field definition describes o
ne instance of the collection according to the defined structure
. This is different from the field definition of the property ha
ndle itself.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property defint
ion contains the metadata for the referenced property instance.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  DBFieldDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 chkopt\tab - Check
 option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the function to check the property hand
le befor running executing the function. You can pass NO to avoi
d unnecessary checking.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get dictionary handle}}} 
{#{\footnote\plain{#}{.bmaty}}} 
{K{\footnote\plain{K}{PropertyHandle
:GetDictionary}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDictionary\tab -  Get dictionary handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DictionaryHa
ndle &GetDictionary ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the dictionary hand
le for the current property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Dictionary hand
le\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definitio
n for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide field dimension}}} 
{#{\footnote\plain{#}{.bmatz}}} 
{K{\footnote\plain{K}{PropertyHan
dle:GetDimension}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDimension\tab -  Provide field dimension\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 Get
Dimension ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the property dimension.
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 In case of an error the function returns -1 (AUTO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Dimension\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dimension describes the property dimension. this i
s the maximum number of instances that can be stored for the pro
perty. The function returns 0 (UNDEF) if there is no limit (coll
ection) or the dimension (cardinality) defined for the property.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property instance as double value}}} 
{#{\footnote\plain{#}{con8ps0_u}}} 
{K{\footnote\plain{K}{PropertyHandle:Get
Double}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDouble\tab -  Get property instance as double value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  double G
etDouble ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  double GetDouble (char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function r
eturns the value for the current property handle or for the attr
ibute passed in prop_path as double value .\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Double 
value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-te
rminated string. It may contain a single property name or a sequ
ence of property names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get extent name for coll
ection}}} 
{#{\footnote\plain{#}{.bmav1}}} 
{K{\footnote\plain{K}{PropertyHandle:GetExtentName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetExtentName\tab -  Get exte
nt name for collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetExtentName ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retu
rns the name or path for the base collection (extent name or pro
perty path). When no ase collectin has been defined the function
 returns NULL.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is passed
 as 0-terminated string or as buffer with trailing blanks and a 
maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get field definition for the pro
perty}}} 
{#{\footnote\plain{#}{.bmaut}}} 
{K{\footnote\plain{K}{PropertyHandle:GetFieldDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetFieldDef\tab -  Get field def
inition for the property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBFieldDef *GetFieldDef ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n returns the field definition for the property handle (which di
ffers in case of collection properties from the instance definit
ion, which is returned by GetDescription()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Proper
ty definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property defintion contains the metadata for th
e referenced property instance.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  D
BFieldDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get global identity string for the current instance}}} 
{#{\footnote\plain{#}{.bma
uu}}} 
{K{\footnote\plain{K}{PropertyHandle:GetGUID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetGUID\tab -  Get global identity string for
 the current instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetGUID ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the
 global instance identity (GUID) for the current instance. This 
identity is unique within all ODABA2 databases. GUIDs are availa
ble for instances that are derived directly or indirectly from _
_OBJECT. When auto-build (GUID) is set for the structure the GUI
D is generated when creating the instance. Otherwhise it has to 
be provided using ProvideGUID(). When no GUID has been defined f
or the structure (not derived from __OBJECT) the function return
s the local object identity (LOID), which is a unique identifier
 within the database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If no instance is available or no global i
dentity has been generated for the current instance the function
 returns NULL. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns a global instance identity a
lso when the property handle refers to a new instance where the 
global identity has been set explicitely. Thus, e.g. when copyin
g instances you might ask for the global identity that has been 
shipped with the source instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The GUID is passed in the inter
nal result area and valid until the next property handle functio
n call.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Global Instance Identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The global instan
ce identifier is passed as 0-terminated string with a maximum le
ngth of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get generic attribute type}}} 
{#{\footnote\plain{#}{.bmauv}}} 
{K{\footnote\plain{K}{PropertyHa
ndle:GetGenAttrType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetGenAttrType\tab -  Get generic attribute type\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  i
nt32 GetGenAttrType (char *w_propnames=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio return
s the internal type value of the generic attribute, that has bee
n selected as current attribute type (SetGenAttribute()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Type of generic attribute\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type for a generic attribute
 is a valid value from the basic enumeration of the generic attr
ibute. UNDEF (0) indicates an undefined generic type.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w
_propnames\tab - Property path or name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is passed as 
0-terminated string. It may contain a property path that consist
s of a sequence of property names. NULL is passed if no property
 name is available.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get current type for generic sort order of co
llection handle}}} 
{#{\footnote\plain{#}{.bmauw}}} 
{K{\footnote\plain{K}{PropertyHandle:GetGenOrderType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetGenOrderTy
pe\tab -  Get current type for generic sort order of collection handl
e\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetGenOrderType ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the key of the currently select
ed sort order contains a generic attribute the index is generic 
as well. In this case setting the sort order implies setting it 
to a specific type of the generic attribute. This function retur
ns the internal type number for the generic attribute type selec
ted for the given sort order (SetOrder()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Type of 
generic attribute\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type for a generic attribute is a valid val
ue from the basic enumeration of the generic attribute. UNDEF (0
) indicates an undefined generic type.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get global ID}}} 
{#{\footnote\plain{#}{.bmaux}}} 
{K{\footnote\plain{K}{Propert
yHandle:GetGlobalID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetGlobalID\tab -  Get global ID\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetGlobalID
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int32 GetGlobalID (void *skey );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the l
ocal object ID (LOID) when the instance could be found in the ba
se collection (global extent). When no key is passed the instanc
e is searched with the key from the internal instance. When pass
ing a key and an instance is selected in the property handle the
 instance wil be unselected.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Local object identity 
(LOID)\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The local object identity is a 31-bit number that identifi
es an object instance uniquely in a database. LOIDs are availabl
e only for independently stored instances but not for instances 
of imbedded structures.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 skey\tab - Sort key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the 
internal key format. When necessary the key value can be convert
ed from a string into the internal format using the (.r pib.Stri
ngToKey*** ERROR : Chapter not found ***()) function. Regardles 
on the type key values are passed as (char *) areas.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get property
 identity string}}} 
{#{\footnote\plain{#}{.bmauz}}} 
{K{\footnote\plain{K}{PropertyHandle:GetIdentity}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetIdentity\tab -  Ge
t property identity string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetIdentity (char *id_string );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function builds an identity string for a property in a struc
ture instance: \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   loid|property_path[index] \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The id-string is a lo
cal database identity for the instance. 'property_path' is the p
ath that identifies a property within the instance. When the pro
perty is an array the element position is indicated by the index
. Index numbers may also appear within the path (e.g. when suppo
rting upto three addresses for a person a property path for 'pla
ce" could look like:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   199879899|address[2].place\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The identity str
ing is returned in an internal area when no area is passed (id_s
tring). Otherwise the area passed in string should have 513 byte
s, but at least the maximum expected string size +1.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If there is 
no instance selected in the (upper) collection property handle t
he function returns NULL. If no id_string is passed the function
 returns the path in communication area of the property handle. 
This area is destroyed when calling the next PropertyHandle func
tion.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Identity string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 String that identifies a prope
rty uniquely in the database.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 id_string\tab - Identity strin
g\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 String that identifies a property uniquely in the database.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Name
 of the current index}}} 
{#{\footnote\plain{#}{IDH1zua13}}} 
{K{\footnote\plain{K}{PropertyHandle:GetIndexName}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInde
xName\tab -  Name of the current index\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetIndexName (int32 indx
0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the index name of the index for the n-t
h (indx0) index (sort order for collection). The function return
s NULL, if indx0 is equal or larger than the number of indexes d
efined for the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Index name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The index or k
ey name refers to an index defining an order for the collection.
 Indexes are always referenced by key names.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Pos
ition in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the collection addresses the 
first instance in the collection with 0. AUTO (-1) refers to an 
undefined position.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide initialized instance area}}} 
{#{\footnote\plain{#}{.bmbw1}}} 
{K{\footnote\plain{K}{Proper
tyHandle:GetInitArea}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInitArea\tab -  Provide initialized instance a
rea\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance GetInitArea ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function provides an initialise
d instance of the type defined for the property handle. For weak
 typed collection the type depends on the last type accessed by 
the property handle or the type set with the SetType() function.
 Calling the function for an attribute will return an initialize
d attribute instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the property handle has selected an in
stance the current selection is cancelled (after saving changes 
made to the selected instance). You may fill attributes and init
ialise single references but you cannot add instances to collect
ions in an initialised instance. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For storing the instance to the
 database you must call the Add() function for the property hand
le. Changes made to the instance are not saved automatically whe
n changing the selection for the property handle. Since no insta
nce is selected in the property handle after GetInitArea() you c
annot assign values to subordinated property handles.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return valu
e\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced pro
perty handle (collection type). The instance contains a pointer 
to a properly structured instance area. \par
You can use the !-operat
or or the GetData() function to check whether the instance refer
s to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide
 initialised instance}}} 
{#{\footnote\plain{#}{.bmbvs}}} 
{K{\footnote\plain{K}{PropertyHandle:GetInitInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInit
Instance\tab -  Provide initialised instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance GetInitInstance
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function provides an initialised instance of the type d
efined for the property handle. For weak typed collection the ty
pe depends on the last type accessed by the property handle or t
he type set with the SetType() function. Calling the function fo
r an attribute will return an initialized attribute instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Whe
n the property handle has selected an instance the current selec
tion is cancelled ( after saving changes made to the selected in
stance). You may fill attributes and initialise single reference
s but you cannot add instances to collections in an initialised 
instance. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The instance can be stored to the database by calling 
the Save() function for the property handle. Changes made to the
 instance are saved automatically when changing the selection fo
r the property handle. To avoid storing the instance to the data
base it must be explicitly cancelled.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced property handle (co
llection type). The instance contains a pointer to a properly st
ructured instance area. \par
You can use the !-operator or the GetDat
a() function to check whether the instance refers to data or not
.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get update count for se
lected instance}}} 
{#{\footnote\plain{#}{.bmbvu}}} 
{K{\footnote\plain{K}{PropertyHandle:GetInstModCount}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInstModCou
nt\tab -  Get update count for selected instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 GetInstModCoun
t ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns an internal modification count for an
 instance. This allows checking whether the instance has been up
dated by another user or application, since each update will inc
rease the modification count stored in the database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Since the m
odification count is rotating (starting again with 1 after reach
ing 255) this is not a save indication. Thus, it is suggested to
 use server event handler for reacting on changes.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Modification count\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The modification count contains the number of 
modifications for an instance. After 255 modifications it starts
 to count from the beginning. Only modifications that are writte
n to database are counted.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get current instance}}} 
{#{\footnote\plain{#}{.bmbvv}}} 
{K{\footnote\plain{K}{PropertyHand
le:GetInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInstance\tab -  Get current instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance GetIns
tance ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the current instance. If no
 instance is selected the function returns an empty instance are
a (instance.GetData() returns NULL).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 I
nstances do have the type of the referenced property handle (col
lection type). The instance contains a pointer to a properly str
uctured instance area. \par
You can use the !-operator or the GetData
() function to check whether the instance refers to data or not.
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Instance Context}}} 
{#{\footnote\plain{#}{.bmb
vw}}} 
{K{\footnote\plain{K}{PropertyHandle:GetInstanceContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInstanceContext\tab -  Get Inst
ance Context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_Structure *GetInstanceContext ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
returns the Instance context for the client or server depending 
on where the property handle is being created.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Stru
cture context\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the default structure context or a user-def
ined context class instance for the structure.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class def
inition for:  CTX_Structure\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property instance as integer valu
e}}} 
{#{\footnote\plain{#}{.bmbvx}}} 
{K{\footnote\plain{K}{PropertyHandle:GetInt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInt\tab -  Get property instance as in
teger value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetInt ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int32 GetInt (char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function returns the integer value for the current property ha
ndle or for the attribute passed in prop_path. When the field de
finition refers to the value with decimal precisions the value r
eturned contains only the part before the decimal point. To get 
the exact value use GetNormalized().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 p
rop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-terminat
ed string. It may contain a single property name or a sequence o
f property names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get property instance as integ
er value}}} 
{#{\footnote\plain{#}{.bmbvy}}} 
{K{\footnote\plain{K}{PropertyHandle:GetIntValue}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetIntValue\tab -  Get proper
ty instance as integer value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetIntValue ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int32 GetInt
Value (char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the integer value 
for the current property handle or for the attribute passed in p
rop_path. When the field definition refers to the value with dec
imal precisions the value returned contains only the part before
 the decimal point. To get the exact value use GetNormalized().\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 I
n contrast to GetInt(), no instance must be selected in the prop
erty handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he property path is passed as 0-terminated string. It may contai
n a single property name or a sequence of property names separat
ed by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get ident key length}}} 
{#{\footnote\plain{#}{IDH1zub23}}} 
{K{\footnote\plain{K}{PropertyHandle:GetKeyLeng
th}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetKeyLength\tab -  Get ident key length\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 GetKeyLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The
 function returns the identifying key length.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Size 
for internal key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the size for the internal (structured) k
ey according to the attributes composing the key.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get ident key d
efinition}}} 
{#{\footnote\plain{#}{.bmbn1}}} 
{K{\footnote\plain{K}{PropertyHandle:GetKeySMCB}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetKeySMCB\tab -  Get ident k
ey definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  smcb *GetKeySMCB (char *key_name_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The func
tion returns the structure defintion for a key defintion of the 
structure defined for the property handle. This is not necessary
ly an index or sort key of the collection referenced by the prop
erty handle. When no key is passed the function returns the key 
definition of the identifying key.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to gener
el structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way to define 
structure (DBStructDef). It contains information for the structu
re and its properties. In contrast to the DBStructDef the smcb d
escribes structure members regardless on the rule they may play 
in the structure.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 k
ey_name_w\tab - Key name for conversion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-te
rminated string or as buffer with a maximum size of 40 character
s and trailing blanks. If no key name is passed (NULL) the sort 
key according to the selected sort order is used instead,\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get ins
tance identity (LOID)}}} 
{#{\footnote\plain{#}{.bmbms}}} 
{K{\footnote\plain{K}{PropertyHandle:GetLOID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetLOID\tab -  Get i
nstance identity (LOID)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetLOID (int32 set_pos0_w=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  
int32 GetLOID (Key sort_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the local obj
ect identity for the instance selected in the property handle. W
hen no instance is selected the function returns 0. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When passing
 a key or a position the instance acording to the passed key or 
position is selected before retrieving the LOID.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Lo
cal object identity (LOID)\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The local object identity is a 31-bit 
number that identifies an object instance uniquely in a database
. LOIDs are available only for independently stored instances bu
t not for instances of imbedded structures.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab -
 Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a collecti
on depends on the selected index. if the collection is unsorted 
the position is the only way for accessing the instance. \par
For sor
ted collections the position is determined according to the inst
ance key. If thee is a contradiction between position and key va
lue the position will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTA
NCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the currently selected instance. If no
 instance is selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INS
TANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE (0) refers to the first instance in a collec
tion according to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
F
IRST_INSTANCE (0) refers to the last instance in a collection ac
cording to the selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key\tab - Sort key va
lue\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. When necessar
y the key value can be converted from a string into the internal
 format using the StringToKey() function. When no key is passed 
by the application an empty key (without data area) will be pass
ed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get access mode for collec
tion handle}}} 
{#{\footnote\plain{#}{.bmbmt}}} 
{K{\footnote\plain{K}{PropertyHandle:GetMode}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetMode\tab -  Get access mode
 for collection handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PIACC GetMode ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns th
e access mode for the property handle as defined when creating o
r opening the property handle or as set with the ChangeMode() fu
nction.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Access mode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Access mode that has been set fo
r the property handle.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get normalized integer value}}} 
{#{\footnote\plain{#}{.bmbmu}}} 
{K{\footnote\plain{K}{Property
Handle:GetNormalized}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetNormalized\tab -  Get normalized integer value
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetNormalized ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function can be used for getting in
teger values with decimal precisions from INT or unsigned INT at
tributes.  When defining a an attribute with two decimals, refer
ring to the value 1, which is stored  inernally as 100 (1.00), w
ill result in 1. Using GetNormalized will result in 100 instead.
\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is passed as platform indep
endent 32-bit integer value.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get Database Object handle}}} 
{#{\footnote\plain{#}{.bmbmv}}} 
{K{\footnote\plain{K}{Prop
ertyHandle:GetObjectHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetObjectHandle\tab -  Get Database Object 
handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBObjectHandle &GetObjectHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns 
the Database Object Handle for the property handle. When referri
ng to transient fields, which are not associated with a database
 object, the function returns NULL.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For transient fields the func
tion returns the database object handle that is associated with 
the parent instance and not the database object handle of the as
sociated collection, which might in some cases belong to another
 database object.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Database Object Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The databas
e object handle defines a database object (subject) within the d
atabase. Each database has at least a root object, which might b
e identically with the database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  
DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get associated property handle}}} 
{#{\footnote\plain{#}{.bmbmw}}} 
{K{\footnote\plain{K}{PropertyHandle
:GetOrigin}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetOrigin\tab -  Get associated property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int GetOrig
in ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns an ID that identifies the origin of 
a property handle. For transient property handles thie is the or
igin for the associated property handle. For copy handles it is 
the origin of the copy.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns UNDEF (0) when the h
andle is not opened or when no property handle is associated wit
h a transient property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Handle identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 handle identifier allows comparing whether property handles ref
er to the collection or property.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get high property}}} 
{#{\footnote\plain{#}{.bmbmx}}} 
{K{\footnote\plain{K}{Property
Handle:GetParentProperty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetParentProperty\tab -  Get high property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Pr
opertyHandle *GetParentProperty ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the nex
t higher property handle. The handle returnd is shared with othe
r handles in the application, which asked for the parent propert
y handle. To get a private copy you can use the copy constructor
:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   ph(GetParentProperty());\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 GetParentProperty returns a so-called
 static property handle, which is not able to react on type chan
ges in upper weak-typed property handles. To avoid problems with
 static property handles (error 348) create a shared property ha
ndle as described above.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to a property hand
le\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get access privilege for ref
erence}}} 
{#{\footnote\plain{#}{.bmbmy}}} 
{K{\footnote\plain{K}{PropertyHandle:GetPrivilege}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPrivilege\tab -  Get access
 privilege for reference\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PIADEF GetPrivilege ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function re
turns the access privilege for the property.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Access
 privilege for property\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access privilege describes the access
ability of the property. \par
ODC_privat - accessable within the clas
s, only\par
ODC_protected - accessable from outside via get_-function
s\par
ODC_public - accessable from outside without restrictions\par
ODC_un
defined - accessability not defined\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property context}}} 
{#{\footnote\plain{#}{.bmbmz}}} 
{K{\footnote\plain{K}{Pro
pertyHandle:GetPropertyContext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPropertyContext\tab -  Get property 
context\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  CTX_Property *GetPropertyContext ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function return
s the property context for the client or server depending on whe
re the property handle is being created.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property c
ontext\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the default property context or a user-defined con
text class instance for the property.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  CTX_Property\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property handle}}} 
{#{\footnote\plain{#}{ID_7gai65}}} 
{K{\footnote\plain{K}{PropertyHandle:GetP
ropertyHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPropertyHandle\tab -  Get property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHan
dle *GetPropertyHandle (char *prop_path, logical *is_transient )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle *GetPropertyHandle (char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion returns the property handle for the selected path. The funct
ion handles property pathes within a structure instance (e.g. 'd
irection.city', where city is a member of the imbedded 'Address'
 structure of direction) as well as pathes that include referenc
es ('mother.name', where mother is a reference to a persons moth
er). When defining pathes that include references thous referenc
es shout be single referenced (dimension = 1) since the path wil
l locate the first instance for the parent(s), only. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When referr
ing to transient references you must take into accont thet the d
ata source referenced by the transient reference may change duri
ng processing. This includes the type of referenced instances as
 well as the referenced collection or instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When using the Ge
tPropertyHandle function instead of using a property handle cons
tructor you will share the cursor and the data source with other
 property handles provided with this function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For creating a sha
red subordinated property handle you can use the constructor in 
combination with the GetPropertyHandle() function:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0       Property
Handle    ph(parent.GetPropertyHandle(prop_path));\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 or the corresp
onding Open() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 GetPropertyHandle returns a so-called sta
tic property handle, which is not able to react on type changes 
in upper weak-typed property handles. To avoid problems with sta
tic property handles (error 348) create a shared property handle
 as described above.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is
 a pointer to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class
 definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property pa
th\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-terminated string. It may con
tain a single property name or a sequence of property names sepa
rated by '.'.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 is_transient\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get property path for property handle
}}} 
{#{\footnote\plain{#}{.bmbo1}}} 
{K{\footnote\plain{K}{PropertyHandle:GetPropertyPath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPropertyPath\tab -  Get proper
ty path for property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetPropertyPath ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The proper
ty path defines the path from the parent property handle to the 
current one.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is pass
ed as 0-terminated string. It may contain a single property name
 or a sequence of property names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get collection
 update count}}} 
{#{\footnote\plain{#}{.bmbns}}} 
{K{\footnote\plain{K}{PropertyHandle:GetRefModCount}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetRefModCount\tab - 
 Get collection update count\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 GetRefModCount ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functi
on returns an internal modification count for a collection. This
 allows checking whether the collection has been updated by anot
her user or application by adding or deleting instances from teh
 collection, since each update will increase the modification co
unt stored in the database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Since the modification count is rota
ting (starting again with 1 after reaching 255) this is not a sa
ve indication. Thus, it is suggested to use server event handler
 for reacting on changes.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Modification count\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The mod
ification count contains the number of modifications for an inst
ance. After 255 modifications it starts to count from the beginn
ing. Only modifications that are written to database are counted
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get reference from structure definition}}} 
{#{\footnote\plain{#}{.bmbnt}}} 
{K{\footnote\plain{K}{PropertyHandle:Get
Reference}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetReference\tab -  Get reference from structure definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
char *GetReference (int32 indx0, logical full_path, logical gene
ric=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the name of the reference or rela
tionship (except MEMO fields that are considered as attributes) 
according to the given index. The reference index corresponds to
 the definition of the structure. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 References in base structures 
or imbedded structures are returned as property pathes (e.g. add
ress.city when address is a structured attribute in person and c
ity is a reference in address). The leading part for base struct
ures (usually the structure name) is displayed only when passing
 YES for the full_path option. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Generic attributes can be conside
red as references or as attributes. The generic option defines w
hether generic attributes are considered as references.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If there 
are noreferences defined for the structure the function returns 
NULL. When an reference with the given index has been found the 
function returns the property path in the fldpath.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function r
eturns the path in communication area of the property handle. Th
is area is destroyed when calling the next PropertyHandle functi
on.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-t
erminated string. It may contain a single property name or a seq
uence of property names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 indx0\tab - Positi
on in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position in the collection addresses the fir
st instance in the collection with 0. AUTO (-1) refers to an und
efined position.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 full_path\tab - Full path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The full path option is used
 to request the property path including base structure names. \par
De
fault: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 generic\tab - Generic attruibute option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option allows co
nsidering generic attributes as references. \par
Default: YES\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get sele
cted key value}}} 
{#{\footnote\plain{#}{.bmbnu}}} 
{K{\footnote\plain{K}{PropertyHandle:GetSelectedKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSelectedKey\tab -
  Get selected key value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Key GetSelectedKey ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ret
urns the key value for the selected instance. When no instance i
s selected the function returns the value for the selected key, 
which might have been located wit the LocateKey() or NextKey() f
unction. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When neither a key nor an instance is selected, the fun
ction returns an empty key instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Sort key value
\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. When necessary t
he key value can be converted from a string into the internal fo
rmat using the StringToKey() function. When no key is passed by 
the application an empty key (without data area) will be passed.
\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get instance size}}} 
{#{\footnote\plain{#}{.bmbnv}}} 
{K{\footnote\plain{K}{Proper
tyHandle:GetSize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSize\tab -  Get instance size\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetSize ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function returns the size allocated for the instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - Size of returned instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get size of instance in collection
 handle}}} 
{#{\footnote\plain{#}{.bmbnw}}} 
{K{\footnote\plain{K}{PropertyHandle:GetSizeOf}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSizeOf\tab -  Get size of ins
tance in collection handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetSizeOf ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function retu
rns the size allocated for the instances of the property handle 
(for weak typed the size for the selected type). For MEMO fields
 the function returns the maximum size of the MEMO field.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Size of returned instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get sort key length}}} 
{#{\footnote\plain{#}{.bmbnx}}} 
{K{\footnote\plain{K}{Propert
yHandle:GetSortKeyLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSortKeyLength\tab -  Get sort key length\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  i
nt16 GetSortKeyLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the length of the
 selected sort key. When the collection is unordered the functio
n returns 0.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Size for internal key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the size 
for the internal (structured) key according to the attributes co
mposing the key.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get sort key definition}}} 
{#{\footnote\plain{#}{.bmbny}}} 
{K{\footnote\plain{K}{PropertyHandle:GetS
ortKeySMCB}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetSortKeySMCB\tab -  Get sort key definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  smcb *GetSort
KeySMCB ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the key definition for the sele
cted sort key.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to generel structure definit
ion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way to define structure (DBStructD
ef). It contains information for the structure and its propertie
s. In contrast to the DBStructDef the smcb describes structure m
embers regardless on the rule they may play in the structure.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property instance as string
 value}}} 
{#{\footnote\plain{#}{.bmbnz}}} 
{K{\footnote\plain{K}{PropertyHandle:GetString}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetString\tab -  Get property ins
tance as string value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetString ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  char *GetString (char
 *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the string value for the curr
ent property handle or for the attribute passed in prop_path. In
 addition to explicite properties defined for the structure of t
he instance '__LOID' and '__GUID' can be passed as property path
 (prop_path) for retrieving the local object identifier and the 
global unique identifier for the instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns a
lways a pointer to a valid string. When the requested attribute 
is not available the string length is 0.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - String are
a\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property pat
h\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-terminated string. It may cont
ain a single property name or a sequence of property names separ
ated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide stringlength for instance}}} 
{#{\footnote\plain{#}{ID_7gai75}}} 
{K{\footnote\plain{K}{PropertyHa
ndle:GetStringLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStringLength\tab -  Provide stringlength for i
nstance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint32 GetStringLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the maxi
mum lengts of the string that results from converting the instan
ce into a string.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of the instance or prope
rty area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property instance as string value}}} 
{#{\footnote\plain{#}{.bmbp1}}} 
{K{\footnote\plain{K}{PropertyHand
le:GetStringValue}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStringValue\tab -  Get property instance as strin
g value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetStringValue ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  char *GetStringValue (char *pr
op_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the string value for the current 
property handle or for the attribute passed in prop_path. In add
ition to explicite properties defined for the structure of the i
nstance '__LOID' and '__GUID' can be passed as property path (pr
op_path) for retrieving the local object identifier and the glob
al unique identifier for the instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 In contrast to GetString()
 the no instance must be selected in the property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_p
ath\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-terminated st
ring. It may contain a single property name or a sequence of pro
perty names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get structure definition}}} 
{#{\footnote\plain{#}{.bmbos}}} 
{K{\footnote\plain{K}{Prope
rtyHandle:GetStructDef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStructDef\tab -  Get structure definition\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DB
StructDef *GetStructDef ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the struc
ture definition for the instances in the collection. For weak ty
ped collection the function returns the base structure definitio
n defined for the weak typed collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to
 generel structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure definition (DBStructD
ef) contains the metadata for the instance, i.e. information for
 the structure and its properties.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:
  DBStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get property instance as time value}}} 
{#{\footnote\plain{#}{.bmbot}}} 
{K{\footnote\plain{K}{PropertyHa
ndle:GetTime}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetTime\tab -  Get property instance as time value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbtm G
etTime ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  dbtm GetTime (char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns
 the time value for the current property handle or for the attri
bute passed in prop_path.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value 
is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as
 0-terminated string. It may contain a single property name or a
 sequence of property names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get basic collectio
n type}}} 
{#{\footnote\plain{#}{.bmbou}}} 
{K{\footnote\plain{K}{PropertyHandle:GetType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetType\tab -  Get basic collection
 type\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *GetType ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the type name for t
he instances in the collection. For weak typed collection the fu
nction returns the name of the base structure defined for the we
ak typed collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure na
me is passed as 0-terminated string or as buffer with a maximum 
size of 40 characters and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Get instance value}}} 
{#{\footnote\plain{#}{.bmb
ow}}} 
{K{\footnote\plain{K}{PropertyHandle:GetValue}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetValue\tab -  Get instance value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance 
GetValue (int32 lindx0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the value for the 
property instance. It should be used for accessing attribute han
dles. In contrast to Get the function returns an instance area a
lso when the attribute handle is not positioned (e.g. for the in
itial instance before creating an instance). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For collection prop
erties the function works the same way as the Get() function exc
ept when passing AUTO as index value. In this case GetValue retu
rns the instance area also when no instance is selected. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When ac
cessing array attributes the function returns the array element 
according to the passed index.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instanc
es do have the type of the referenced property handle (collectio
n type). The instance contains a pointer to a properly structure
d instance area. \par
You can use the !-operator or the GetData() fun
ction to check whether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See al
so class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 lindx0\tab - Position in 
collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Get version number for selected instance}}} 
{#{\footnote\plain{#}{.bmbox}}} 
{K{\footnote\plain{K}{Property
Handle:GetVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetVersion\tab -  Get version number for selected in
stance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetVersion ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns the version nu
mber for the instance selected. Since instance versions are crea
ted only in case of updates the requested version in the propert
y handle might be higher than the version returned from the curr
ent instance. The function returns the version number, only. Fo 
determining the time period you can call the ACObject::VersionIn
tervall() function when using database versions.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - In
ternal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers are created internally for 
each Active Object when creating a new version for the Database 
Object. Each version number is associated with a time stamp that
 defines the end of this version.\par
Default: CUR_VERSION\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Grouping op
eration}}} 
{#{\footnote\plain{#}{.bmboy}}} 
{K{\footnote\plain{K}{PropertyHandle:Group}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Group\tab -  Grouping operation\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Prop
ertyHandle &Group (PropertyHandle &prophdl_ref, char *grouping_r
ule, logical distinct=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The grouping operation allows groupin
g a collection of instances according to a condition, key or lis
t of attributes. The instances grouped are collected in a proper
ty named 'partition', which has the same type as the input colle
ction for the operation. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When defining conditional values in the
 grouping rule, a string attribute named 'value' is created for 
each output instance. Otherwise, the output contains the attribu
tes defined in the attribute list or composing the key. When pas
sing an ODABA OQL expression as grouping rule, the type of the a
ttribute in the target depends on the type returned by the expre
ssion.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When defining conditional values, the instance is associat
ed with the first value, that matches the condition when passing
 distinct YES. Otherwise, the instance is associated with each v
alue that matches the condition, which might create duplicates. 
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the calling property handle refers to a non empty collectio
n all instances are removed before performing the operation. Whe
n the calling property handle is empty the function creates a te
mporary extend for storing the result. You may change the buffer
 size for the target property handle to increase the performance
 of the operation. This is not necessary, when you group by sort
 key. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the proper
ty handle that contains the result of an operation (usually the 
calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Propert
yHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a r
eference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 grouping_rule\tab - Grouping rule\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The gr
ouping rule describes the grouping strategy. You may either grou
p instances accrding to the values for a list of attributes or a
 key, which is considered as attribute list as well (country, ci
ty). You may also define attribute values by means of conditions
 (low: income < 1000, medium: income < 3000, high). You may also
 pass an ODABA OQL expression, which will get tht name 'value', 
too.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 distinct\tab - Distinct option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Passing a distinct option YES force
s the function to remove duplicates from the result collection.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{I
s data available for property}}} 
{#{\footnote\plain{#}{.bmboz}}} 
{K{\footnote\plain{K}{PropertyHandle:HasData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HasData
\tab -  Is data available for property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl HasData 
                                ( DBField *co, DBField *retval, 
ParmList *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical HasD
ata ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns true (YES) for an collection proper
ty handle when an instance is selected. For all other property h
andles the function returns true when a parent property handle e
xists with a selected instance or when no parent property handle
 exist (independent property handle) and a data area has been as
signed to the property handle.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The func
tion returns YES when the question was answered positivly. Other
wise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is description available}}} 
{#{\footnote\plain{#}{ID_7gai85}}} 
{K{\footnote\plain{K}{PropertyHand
le:HasDescription}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HasDescription\tab -  Is description available\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logic
al __far __cdecl HasDescription                          ( DBFie
ld *co, DBField *retval, ParmList *parmlist, char *impname, logi
cal chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical HasDescription ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns tru
e (YES) when a description exists for the property handle, NO ot
herwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when 
the question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Doe
s the instance have generic attributes}}} 
{#{\footnote\plain{#}{.bmbq1}}} 
{K{\footnote\plain{K}{PropertyHandle:HasGe
nericAttributes}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HasGenericAttributes\tab -  Does the instance have gen
eric attributes\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical HasGenericAttributes ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function re
turns true (YES) when the instance has generic attributes and fa
lse (NO) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function return
s YES when the question was answered positivly. Otherwise it ret
urns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Does a collection have an index?}}} 
{#{\footnote\plain{#}{.bmbps}}} 
{K{\footnote\plain{K}{PropertyHandle:Has
Index}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 HasIndex\tab -  Does a collection have an index?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical HasInde
x ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fucntion checks whether an index is defined for the pr
operty handle or not. When an index is defined this does not nec
essarily mean that the collection is ordered, since there are al
so indexes for unordered collections.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination c
ode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of
 normal termination the value is NO. When the function returns Y
ES more detailed error information are available in the error ob
ject.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Initialise instance area}}} 
{#{\footnote\plain{#}{.bmbpu}}} 
{K{\footnote\plain{K}{PropertyHandle:Initialize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Init
ialize\tab -  Initialise instance area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Initialize (Instance i
nstance_w=Instance() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function initializes the area of the 
passed instance with the defined default values. When no instanc
e is passed the internal instance area for the property handle i
nstance is initialized.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function does not work for simple pr
operty handles (e.g. string property handle as PH("string")). Fo
r initializing simple property handle you must explicitly pass t
he instance area (ph.Initialize(ph.GetArea()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Term
ination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. I
n case of normal termination the value is NO. When the function 
returns YES more detailed error information are available in the
 error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance_w\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do ha
ve the type of the referenced property handle (collection type).
 The instance contains a reference to a propertly structured are
a. \par
You can use the !-operator or the GetData() function to check
 whether the instance refers to data or not.\par
Default: Instance()\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Insert line terminator fo
r large text fields}}} 
{#{\footnote\plain{#}{.bmbpv}}} 
{K{\footnote\plain{K}{PropertyHandle:InsertTerminator}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 InsertTe
rminator\tab -  Insert line terminator for large text fields\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical 
InsertTerminator (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function inserts the termin
ator string (string) at the end of the text field.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an erro
r. In case of normal termination the value is NO. When the funct
ion returns YES more detailed error information are available in
 the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-
terminated string area.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Intersect collections}}} 
{#{\footnote\plain{#}{.bmbpw}}} 
{K{\footnote\plain{K}{PropertyHandle
:Intersect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Intersect\tab -  Intersect collections\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &Inte
rsect (PropertyHandle &prop_hdl1, PropertyHandle &prop_hdl2, cha
r sk_opt=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &Intersect (PropertyHandle **ph_l
ist, int16 count, char sk_opt=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &Intersect (
PropertyHandle &prophdl_ref, char sk_opt=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result collec
tion contains all instances that are contained in each operand c
ollections. The existence of an instance in a collection can be 
checked based on the sort key (passing YES for ik_opt) or on loc
al identities (LOID). Using the LOID is save but comparing the k
ey is much faster. Hence, the key check should be used whenever 
possible. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Calling the function with one operator creates the int
ersection between the calling and the passed collection and stor
es the result in the calling collection. Otherwise the operation
 is performed with the passed operands storing the result in the
 collection referenced by the calling property handle. When the 
calling property handle refers to a non empty collection all ins
tances are removed before performing the operation. When the cal
ling property handle is empty the function creates a temporary e
xtend for storing the result.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the property handle that contains the result of an 
operation (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl1\tab - First Propert
y handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to an opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class de
finition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl2\tab - Second Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Re
ference to an opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sk_opt\tab - Sort key option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The sortkey option ind
icates whether the operation should be performed according to th
e sort key set for the collections (YES. Otherwise (NO) the oper
ation is performed by comparing instances.\par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ph_list\tab - L
ist of property handles\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An array of property handles acting as op
erands in the operation. The number of property handles in the a
rray is passed in the count-parameter.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 count\tab - Number of entries\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Referen
ce to Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened prope
rty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is prop
erty an active property}}} 
{#{\footnote\plain{#}{.bmbpx}}} 
{K{\footnote\plain{K}{PropertyHandle:IsActive}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsActive\tab -  I
s property an active property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsActive ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 An acti
ve property is a property that is able to react on events. Activ
e properties are treated in a special way since events are gener
ated for several occations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The functio
n returns YES when the question was answered positivly. Otherwis
e it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property an attribute?}}} 
{#{\footnote\plain{#}{.bmbpy}}} 
{K{\footnote\plain{K}{PropertyHandle:Is
Attribute}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsAttribute\tab -  Is property an attribute?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsAttri
bute ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the property handle 
refers to an attribute (YES) or not (NO). The functio returns al
so NO for shared base structure instances, which are considered 
rather as relationships than attributes. Imbedded base structure
 instances are, however, considered as attributes. The function 
returns NO also for generic attributes, which are considered as 
references.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES wh
en the question was answered positivly. Otherwise it returns NO.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is structure derived from passed type?}}} 
{#{\footnote\plain{#}{.bmbpz}}} 
{K{\footnote\plain{K}{PropertyHandle:IsBas
edOn}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsBasedOn\tab -  Is structure derived from passed type?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical I
sBasedOn (char *strnames ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio returns whether the
 current structure of the property handle is a specialization of
 the structure passed in strnames (YES) or not (NO). When no ins
tance is selected thr function evaluates the structure defined f
or the property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the current structure is identical 
with the structure passed in strnames the function returns NO.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the questi
on was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 str
names\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure name is passed as 0-terminate
d string or as buffer with a maximum size of 40 characters and t
railing blanks.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is property member of the base type}}} 
{#{\footnote\plain{#}{ID_7gai95}}} 
{K{\footnote\plain{K}{Prope
rtyHandle:IsBasetypeProperty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsBasetypeProperty\tab -  Is property mem
ber of the base type\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsBasetypeProperty ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fu
nction checks for members of weak typed instances whether the pr
operty is part of the common base type (YES) or not (NO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question wa
s answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is the type of the
 PropertyHandle an elementary one ?}}} 
{#{\footnote\plain{#}{.bmbr1}}} 
{K{\footnote\plain{K}{PropertyHandle:IsBasicT
ype}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsBasicType\tab -  Is the type of the PropertyHandle an elementary
 one ?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsBasicType ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The Type of the Property Ha
ndle is either a basic type or an enumeration or a structure. Th
e function returns YES when the property refers to a basic type 
and NO otherwise.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns 
YES when the question was answered positivly. Otherwise it retur
ns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property handle a client handle}}} 
{#{\footnote\plain{#}{.bmbqs}}} 
{K{\footnote\plain{K}{PropertyHandle:IsC
lient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsClient\tab -  Is property handle a client handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsCli
ent ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the property handle h
as been created for a client or a local application. The functio
n returns NO, when the handle has been created on the server sid
e in a client server environment.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The f
unction returns YES when the question was answered positivly. Ot
herwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property a collection or reference?}}} 
{#{\footnote\plain{#}{.bmb
qt}}} 
{K{\footnote\plain{K}{PropertyHandle:IsCollection}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsCollection\tab -  Is property a collec
tion or reference?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsCollection (char chkopt=AUTO ) cons
t;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the property handle refers to a c
ollection (YES) or not (NO). References and relationships are al
ways considered as collections, as well as generic attributes, e
xtents and views.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns 
YES when the question was answered positivly. Otherwise it retur
ns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 chkopt\tab - Check option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the functi
on to check the property handle befor running executing the func
tion. You can pass NO to avoid unnecessary checking.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Can collecti
on be updated}}} 
{#{\footnote\plain{#}{.bmbqu}}} 
{K{\footnote\plain{K}{PropertyHandle:IsCollectionUpdate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsCollection
Update\tab -  Can collection be updated\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsCollectionUpdate ( 
) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the collection can be updat
ed, i.e. whether instances can be added, renamed or removed or d
eleted from the collection (YES) or not (NO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termi
nation code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In
 case of normal termination the value is NO. When the function r
eturns YES more detailed error information are available in the 
error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property handle a copy handle}}} 
{#{\footnote\plain{#}{.bmbqv}}} 
{K{\footnote\plain{K}{PropertyHandl
e:IsCopyHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsCopyHandle\tab -  Is property handle a copy handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  lo
gical IsCopyHandle ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the pr
operty handle is a copy from another handle (YES) or not (NO). C
opy handles are created based on a property handle but using an 
own cursor. Copy handles are closed automatically when its origi
n is closed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES w
hen the question was answered positivly. Otherwise it returns NO
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property instance empty?}}} 
{#{\footnote\plain{#}{.bmbqw}}} 
{K{\footnote\plain{K}{PropertyHandle:IsEmpty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEmpty\tab -
  Is property instance empty?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsEmpty ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The func
tion returns whether the property handle is empty (YES) or not (
NO). A property is considered as emty when it is a collection wi
th no instances or (if it is not a collection) when:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   - the valu
e is false (LOGICAL)\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   - the value is 0 (INT, REAL, Enumeration, 
DATE, TIME, DATETIME)\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   - the value is 0, ' ' oder 'N' (CHAR, STR
ING,CCHAR,MEMO)\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0   - when all values for a structured instance are
 empty\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when th
e question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is th
e type of the PropertyHandle an enumeration ?}}} 
{#{\footnote\plain{#}{.bmbqx}}} 
{K{\footnote\plain{K}{PropertyHandl
e:IsEnumeration}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEnumeration\tab -  Is the type of the PropertyHandle
 an enumeration ?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsEnumeration ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The Type of th
e property handle is either a basic type or an enumeration or a 
structure.The function returns true when the property handle ref
ers to an enumeration.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function ret
urns YES when the question was answered positivly. Otherwise it 
returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{In instance initialized instance}}} 
{#{\footnote\plain{#}{.bmbqy}}} 
{K{\footnote\plain{K}{PropertyHandle:
IsInitInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsInitInstance\tab -  In instance initialized instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
logical IsInitInstance ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the instance has been prov
ided with the GetInitInstance() function the instance has not ye
t been created and access is limited for sub-ordinated property 
handles. The function returns whether the selected instance in t
he property handle is an initialised instance or not.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return valu
e\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was an
swered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check property type fo
r memo field}}} 
{#{\footnote\plain{#}{.bmbqz}}} 
{K{\footnote\plain{K}{PropertyHandle:IsMemo}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsMemo\tab -  Check property t
ype for memo field\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsMemo (char chkopt=AUTO ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The 
function returns true (YES) when the property refers to a large 
text field (MEMO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns
 YES when the question was answered positivly. Otherwise it retu
rns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 chkopt\tab - Check option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the funct
ion to check the property handle befor running executing the fun
ction. You can pass NO to avoid unnecessary checking.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is new inst
ance}}} 
{#{\footnote\plain{#}{ID_7gai05}}} 
{K{\footnote\plain{K}{PropertyHandle:IsNewInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsNewInstance\tab -  Is new 
instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsNewInstance ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns wh
ether the instance has just been created (YES) or not (NO). The 
"new instance" state is changed when the new instance is stored 
the first time after creating it or when re-reading it. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Since an
 instance may consist of several base structure instances that a
re stored independently (shared base structures) the ney instanc
e state for such base structures may differ from the instance st
ate, when the instance is indicated as new instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value
\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was ans
wered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check property type for
 numeric}}} 
{#{\footnote\plain{#}{.bmbs1}}} 
{K{\footnote\plain{K}{PropertyHandle:IsNumeric}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsNumeric\tab -  Check property
 type for numeric\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsNumeric ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio return
s true (YES) when the property handle describes a numeric value 
(INT, UINT, REAL).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns
 YES when the question was answered positivly. Otherwise it retu
rns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is instance positioned}}} 
{#{\footnote\plain{#}{.bmbrt}}} 
{K{\footnote\plain{K}{PropertyHandle:IsPositioned}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Is
Positioned\tab -  Is instance positioned\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsPositioned (char c
hkopt=AUTO ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether there is an insta
nce selected for the property handle. The function returns YES i
f an existing instance is selected, NO otherwise. When the prope
rty handle refers to an attribute with a parent property handle 
it returns the state of the parent instance. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When an instance ha
s been provided using the GetInitInstance() function the propert
y handle is not positioned. For checking whether an existing or 
new instance is selected or not, the IsSelected() function can b
e used.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when t
he question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Para
meters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 chkopt\tab - Check option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the function to chec
k the property handle befor running executing the function. You 
can pass NO to avoid unnecessary checking.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is property read only}}} 
{#{\footnote\plain{#}{.
bmbru}}} 
{K{\footnote\plain{K}{PropertyHandle:IsReadOnly}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsReadOnly\tab -  Is property read only
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsReadOnly ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 There are several reasons for prop
erties getting the read-only state. An attribute is read-only wh
en the instance it belongs to has been set to read-only for some
 reason (used by another user, cannot be updated by current user
 or others). Collections are usually set to read-only when the i
nstance the collection belongs to has been set to read only, but
 they might also be persistent write protected (e.g. when being 
locked in workspaces). Since MEMO fields are stored as separate 
instances, a MEMO field can be read-only even thought the parent
 instance can be updated (e.g. when being locked in a transactio
n). Moreover, any property can be set to read-only by means of t
he context function SetReadOnly() in the application. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Attributes
 and MEMO fields with read-only state cannot be updated. Collect
ion properties that are read-only do not allow inserting, renami
ng or removing instances from the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Retur
n value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered p
ositivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property handle sensitive a
gainst modifications}}} 
{#{\footnote\plain{#}{.bmbrw}}} 
{K{\footnote\plain{K}{PropertyHandle:IsSensitive}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsSensitive\tab -
  Is property handle sensitive against modifications\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsS
ensitive ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A sensitive property is a property that is pa
rt of keys used in global indexes. In ODABA modifications on ind
exes will lock the index until the transaction is terminated. Th
us, updating sensitive properties in long transactions may cause
 uncomfortable lock situations. Sensitive properties should not 
be allowed being updated in long transactions.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Retu
rn value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered 
positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property handle a server h
andle}}} 
{#{\footnote\plain{#}{.bmbrx}}} 
{K{\footnote\plain{K}{PropertyHandle:IsServer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsServer\tab -  Is property handle 
a server handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsServer ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns 
whether the property handle has been created for a server or a l
ocal application. The function returns NO, when the handle has b
een created on the client side in a client server application.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the questi
on was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is property h
andle for base structure}}} 
{#{\footnote\plain{#}{.bmbry}}} 
{K{\footnote\plain{K}{PropertyHandle:IsShareBaseHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Is
ShareBaseHandle\tab -  Is property handle for base structure\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical 
IsShareBaseHandle (char chkopt=AUTO ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns
 whether the property handle is a handling an independent (share
d)  base structure (YES) or not (NO). The function returns NO fo
r all other property handles, imbedded base structures and in ca
se of error.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES w
hen the question was answered positivly. Otherwise it returns NO
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 chkopt\tab - Check option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option forces the function to
 check the property handle befor running executing the function.
 You can pass NO to avoid unnecessary checking.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is the type of th
e PropertyHandle a defined Structure ?}}} 
{#{\footnote\plain{#}{.bmbrz}}} 
{K{\footnote\plain{K}{PropertyHandle:IsStr
ucture}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsStructure\tab -  Is the type of the PropertyHandle a defined 
Structure ?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsStructure ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns t
rue (YES) if the type of the property handle is a structure and 
false (NO) if the type of the property handle is a basic type or
 an enumeration.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns Y
ES when the question was answered positivly. Otherwise it return
s NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check property type for text}}} 
{#{\footnote\plain{#}{IDH1zuay3}}} 
{K{\footnote\plain{K}{PropertyHandle:IsText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 I
sText\tab -  Check property type for text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsText (char chkopt
=AUTO ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whether the propertyhandle ref
ers to a text field (YES) or not (NO). Text fields are fields wi
th type CHAR, MEMO, STRING and CCHAR.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he function returns YES when the question was answered positivly
. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 chkopt\tab - Check option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The opti
on forces the function to check the property handle befor runnin
g executing the function. You can pass NO to avoid unnecessary c
hecking.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is property transient}}} 
{#{\footnote\plain{#}{.bmbt1}}} 
{K{\footnote\plain{K}{PropertyHandle:IsTransient}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsT
ransient\tab -  Is property transient\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsTransient ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A
ttributes as well as references might be defined as transient pr
operties. Transient properties are filled by the application.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Ret
urn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the questio
n was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is value for p
roperty TRUE?}}} 
{#{\footnote\plain{#}{.bmbss}}} 
{K{\footnote\plain{K}{PropertyHandle:IsTrue}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsTrue\tab -  Is value for pr
operty TRUE?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsTrue ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns wheth
er the property handle is empty (NO) or not (YES). (see IsEmpty(
)).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the q
uestion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Is insta
nce typed?}}} 
{#{\footnote\plain{#}{.bmbst}}} 
{K{\footnote\plain{K}{PropertyHandle:IsTyped}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsTyped\tab -  Is instance type
d?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsTyped ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the p
roperty handle is valid and not a VOID or week typed reference. 
Otherwise the function returns NO.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
function returns YES when the question was answered positivly. O
therwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Check for valid property handle}}} 
{#{\footnote\plain{#}{.bmbsu}}} 
{K{\footnote\plain{K}{Prop
ertyHandle:IsValid}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsValid\tab -  Check for valid property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logi
cal IsValid (logical topt=YES ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks whethe
r the property handle is valid. The function does not check whet
her the handle is opened (see \f4\cf4\fs20\b\i0\ul0 .r Check*** ERROR : Chapter not fo
und ***()\f2\cf2\fs20\b0\i0\ul0 .\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function should be called when the application is
 not shure whether the handle is correct or not.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Re
turn value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answere
d positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 topt\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Checks text
 fields for valid characters}}} 
{#{\footnote\plain{#}{.bmbsv}}} 
{K{\footnote\plain{K}{PropertyHandle:IsValidText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsVa
lidText\tab -  Checks text fields for valid characters\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsVali
dText (char *string ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function validates a text accord
ing to the characters passed in string. If the property handle d
oes not refer to a text filed or if the text contains other char
acters than defined in the string the function returns false (NO
).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the qu
estion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameter
s\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is r
eference weak typed}}} 
{#{\footnote\plain{#}{.bmbsx}}} 
{K{\footnote\plain{K}{PropertyHandle:IsWeakTyped}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsWeakTyped\tab - 
 Is reference weak typed\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsWeakTyped ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion returns YES if the reference or collection is defined as wea
k typed. In this case the type of instances may change from inst
ance to instance. All instances in the reference are bases on a 
common base structure. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The type of the common base structure can
 be retrieved with GetStructDef(). The type for the selected ins
tance can be retrieved with GetCurrentType(). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Befor inserting a 
new instance to a weak-typed refererence the type must be set wi
th SetType().\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES 
when the question was answered positivly. Otherwise it returns N
O.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can instance be updated?}}} 
{#{\footnote\plain{#}{.bmbsy}}} 
{K{\footnote\plain{K}{PropertyHandle:IsWrite}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsWrite\tab -  
Can instance be updated?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsWrite ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When an insta
nce has been selected for the property handle the function retur
ns whether the instance can be updated (YES) or not. The instanc
e cannot be updated for several reasons:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1. The property handle i
s opened for read, only\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 2. The instance is permanently write prot
ected\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 3. The instance is locked by another user\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 4. The current app
lications does not have rights for updateing the instance\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 5. The 
instance is an imbedded part of another instance which cannot be
 updated\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when 
the question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Con
vert internal key to string}}} 
{#{\footnote\plain{#}{.bmbsz}}} 
{K{\footnote\plain{K}{PropertyHandle:KeyToString}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 KeyTo
String\tab -  Convert internal key to string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *KeyToString (Key k
ey_string, Key key_val, char *key_name_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The passed key w
ill be converted from the internal key instance format into an e
xtended SDF string. As field separator '|' is used. Structure le
vels are enclosed in ''. Normally the key passed is assumed to b
e structured according to the sort key selected for the property
 handle or according to the identifying key (when no sort key is
 defined). It is, however, also possible to pass a valid key nam
e for conversion.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - String area for key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is pro
vided as ESDF key.  are used as instance parenthesis, | is used 
as property delimiter. Delimiters may change when defined differ
ently in the DataFormat option.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_string\tab - String area
 for key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided as ESDF key.  are used as instance p
arenthesis, | is used as property delimiter. Delimiters may chan
ge when defined differently in the DataFormat option.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_val\tab - In
ternal key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key value structure corresponds to the struc
ture of the passed or selected key.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_name_w\tab - Key name for conv
ersion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-terminated string or as buffer
 with a maximum size of 40 characters and trailing blanks. If no
 key name is passed (NULL) the sort key according to the selecte
d sort order is used instead,\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Locate object by identity}}} 
{#{\footnote\plain{#}{ID_7gai.5}}} 
{K{\footnote\plain{K}{P
ropertyHandle:Locate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Locate\tab -  Locate object by identity\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical L
ocate (int32 obident, logical read_opt=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function is sea
rching for an instance with the given local identity (LOID) in t
he collection of the property handle. The function returns NO wh
en the instance could be located. The function returns an error 
(YES) in case of an error or when the instance is not member of 
the collection.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When passing YES for read_opt the instance is sel
ected in the property handle. Otherwise it is located, only and 
can be read with Get(CUR_INSTANCE). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination co
de\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of 
normal termination the value is NO. When the function returns YE
S more detailed error information are available in the error obj
ect.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obident\tab - Instance identity\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The identity refers to a
 persistent instance that can be refeenced within the database. 
Imbedded instances and exclusive base structure instances do not
 have an instance identity.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 read_opt\tab - Read option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option force
s the function to read the instance when it could be located.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Loc
ate instance according to key}}} 
{#{\footnote\plain{#}{.bmbu1}}} 
{K{\footnote\plain{K}{PropertyHandle:LocateKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Locat
eKey\tab -  Locate instance according to key\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl Lo
cateKey                               ( DBField *co, DBField *re
tval, ParmList *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logica
l LocateKey (Key sort_key, logical exact=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical LocateKe
y (PropertyHandle &prop_hdl, logical exact=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The instance wi
th the passed key value will be located in the currently selecte
d index. In case of error or when no instance with the given key
 was found the function returns an error (YES). Otherwise the in
stance is located and can be read with Get(CUR_INSTANCE).  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Passi
ng NO for exact the function tries to locate the instance with t
he next higher key value.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value
 is YES if the function returns an error. In case of normal term
ination the value is NO. When the function returns YES more deta
iled error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_ke
y\tab - Sort key value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format.
 When necessary the key value can be converted from a string int
o the internal format using the StringToKey() function. When no 
key is passed by the application an empty key (without data area
) will be passed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 exact\tab - Exact
 option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The exact option forces the fuction to locate the instanc
e with the exact key. \par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a 
reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class 
definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Locate path for path collection h
andle}}} 
{#{\footnote\plain{#}{.bmbts}}} 
{K{\footnote\plain{K}{PropertyHandle:LocatePath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 LocatePath\tab -  Locate path for
 path collection handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical LocatePath ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ensu
res that all property handles in a hierarchy are positioned, i.e
. an instance is selected for all upper property handles and the
 calling handle itself. If no instance is selected in any handle
 in the hierarchy the function automatically tries to locate the
 first instance for those property handles.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termina
tion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In c
ase of normal termination the value is NO. When the function ret
urns YES more detailed error information are available in the er
ror object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Lock instance}}} 
{#{\footnote\plain{#}{.bmbtt}}} 
{K{\footnote\plain{K}{PropertyHandle:Lock}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Lock\tab -  Lock ins
tance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Lock ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function allows locking the selected
 instance of the property handle within the application. As long
 as the instance is locked no other user is able to access the i
nstance. Instances for shared base structures are not automatica
lly included in the locking and must be locked separately. Locke
d instances can be unlocked using the Unlock() function. They ar
e automatically unlocked, when another instance is selected in t
he property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns NO when the instance ha
s been locked successfully. It returns en error (YES) when the i
nstance is already locked by another application, when no instan
ce is selected in the property handle or when an error occurred.
\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function r
eturns an error. In case of normal termination the value is NO. 
When the function returns YES more detailed error information ar
e available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Lock collection}}} 
{#{\footnote\plain{#}{.bmbtu}}} 
{K{\footnote\plain{K}{PropertyHan
dle:LockSet}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 LockSet\tab -  Lock collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical LockSet ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This fu
nction allows locking a collection handle referenced in a collec
tion property handle within the application. As long as the coll
ection is locked no other user is able to access the collection.
 Locked collection can be unlocked using the UnlockSet() functio
n. The collection is automatically unlocked, when the property h
andle is closed or another instance is selected in the upper pro
perty handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns NO when the collection has be
en locked successfully. It returns en error (YES) when the colle
ction is already locked by another application, when no instance
 is selected in the upper property handle (when existing) or whe
n an error occurred.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is Y
ES if the function returns an error. In case of normal terminati
on the value is NO. When the function returns YES more detailed 
error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Mark propert
y handle as unused}}} 
{#{\footnote\plain{#}{.bmbtv}}} 
{K{\footnote\plain{K}{PropertyHandle:MarkUnused}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 MarkUnused\tab -  Ma
rk property handle as unused\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void MarkUnused ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When referring 
a property handle recursively this may result in never deleting 
the resources allocated with the property handle. Recursive refe
rences to property handles may happen when setting transient ref
erences (SetTransientProperty()) to an upper property handle. In
 this case the programm has to mark the property handle as unuse
d. Property handles marked as unused must be marked as used befo
r being closed or replaced (CopyHandle()).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Using this function im
properly (e.g. after constructing a property handle) may release
 the resources allocated to the property handle immediately.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Mark
 property handle as used}}} 
{#{\footnote\plain{#}{.bmbtw}}} 
{K{\footnote\plain{K}{PropertyHandle:MarkUsed}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 MarkUsed\tab -  
Mark property handle as used\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void MarkUsed ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 A property handle
 should be marked as used before being closed or replaced in a r
ecursive reference.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Substract collections}}} 
{#{\footnote\plain{#}{.bmbtx}}} 
{K{\footnote\plain{K}{PropertyHandle:Min
us}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Minus\tab -  Substract collections\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &Minus (PropertyH
andle &prop_hdl1, PropertyHandle &prop_hdl2, char sk_opt=YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  
PropertyHandle &Minus (PropertyHandle &prophdl_ref, char sk_opt=
YES );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result collection contains all instances that exist in
 the first but not in the second operand collection. The existen
ce of an instance in a collection can be checked based on the so
rt key (passing YES for ik_opt) or on local identities (LOID). U
sing the LOID is save but comparing the key is much faster. Henc
e, the key check should be used whenever possible. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Calling the f
unction with one operator creates the difference collcetion betw
een the calling (first operand) and the passed collection and st
ores the result in the calling collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Otherwise the operati
on is performed with the passed operand collectios storing the r
esult in the collection referenced by the calling property handl
e. When the calling property handle refers to a non empty collec
tion all instances are removed before performing the operation. 
When the calling property handle is empty the function creates a
 temporary extend for storing the result.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result pr
operty hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the property handle that contains the r
esult of an operation (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl1\tab - F
irst Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to an opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See a
lso class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl2\tab - Second Prope
rty handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to an opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class 
definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sk_opt\tab - Sort key option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The sortke
y option indicates whether the operation should be performed acc
ording to the sort key set for the collections (YES. Otherwise (
NO) the operation is performed by comparing instances.\par
Default: Y
ES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an 
(usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for: 
 PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Mark property as modified}}} 
{#{\footnote\plain{#}{.bmbty}}} 
{K{\footnote\plain{K}{PropertyHandle:Mod
ify}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Modify\tab -  Mark property as modified\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Modify ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fun
ction marks the instance selected in the property handle as modi
fied. This is usually done automatically when assigning a value 
to a property handle. When, however, writing data directly to th
e instance the Modify() function must be called to register the 
modification. Otherwise the modification will not be stored to t
he database. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns NO when executed successfully.
 When no instance is selected or in case of an error the functio
n returns an error (YES).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value
 is YES if the function returns an error. In case of normal term
ination the value is NO. When the function returns YES more deta
iled error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Move in
stance to another collection}}} 
{#{\footnote\plain{#}{.bmbtz}}} 
{K{\footnote\plain{K}{PropertyHandle:Move}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Move\tab -  Move
 instance to another collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance Move (PropertyHandle &s
ource_handle, PIREPL replopt=REPL_none );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Move (Propert
yHandle &source_handle, Key new_key, PIREPL replopt=REPL_none );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function moves an instance from the source collection (sourc
e_handle) to the collection of the current property handle. This
 is the only way, to move dependent or owned instances from one 
collection to another one. It is also a save way to copy instanc
es avoiding duplicate key problems, that may result from the inv
erse reference for local collections. The function allows also m
oving instances between distinct sub-collections of an extent. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 W
hen the type of source and target instance is the same and when 
both, source and target property handle have been opened for the
 same database handle, the instance is removed from the source c
ollection and inserted into the target collection. In this case 
the instance does not change the local and global identity. When
 the two collection differ in type, the instance is copied from 
the source to the target collection and removed/deleted from the
 source collection afterwards.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When replacing existing instances 
is required the instance is identified in the target collection 
by key according to the sort order set for the target collection
. When a unique sort order is set and an instance with the same 
key as the source instance does already exist, the instance is r
emoved/deleted from the target collection before moving the sour
ce instance to the target collection.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns an ins
tance handle to the instance selected in the property handle (in
stance moved). The function returns an empty instance handle, wh
en the it terminates with error.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Insta
nces do have the type of the referenced property handle (collect
ion type). The instance contains a pointer to a properly structu
red instance area. \par
You can use the !-operator or the GetData() f
unction to check whether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 source_handle\tab - Sou
rce property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The source property handle must be opened and
 an instance must be selected in the handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defin
ition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 replopt\tab - Replace option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The replace opt
ion controls the behaviour of the copy function. Options that ca
n be used here are:\par
REPL_none - do not replace existing instances
\par
REPL_direct - copy attributes, only (but no global identities)\par
RE
PL_GUID - copy attributes including global identity\par
REPL_local  -
 replace collections owned by the instance\par
REPL_all - replace pri
mary relationships\par
REPL_no_create - copy primary relationships wi
thout creating new instances\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PIRE
PL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 new_key\tab - New key for the instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key passed for renaming t
he instance must be structured according to the currently select
ed sort order.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Move instance down}}} 
{#{\footnote\plain{#}{ID_7gai_5}}} 
{K{\footnote\plain{K}{PropertyHandle:MoveDown
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 MoveDown\tab -  Move instance down\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical MoveDown ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 In an unorder
ed collection or in a collection ordered by __AUTOIDENT the posi
tion of an instance can be moved up or down. Moving the instance
 down in an unordered position will change the position of the i
nstance, only. Mowing it down in a collction ordered by __AUTOID
ENT will update the identifying number of the instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion will not change the position for instances in any other type
 of collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if
 the function returns an error. In case of normal termination th
e value is NO. When the function returns YES more detailed error
 information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Move instance one
 position up}}} 
{#{\footnote\plain{#}{.bmbv1}}} 
{K{\footnote\plain{K}{PropertyHandle:MoveUp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 MoveUp\tab -  Move instance on
e position up\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical MoveUp ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 In an unordered collection or i
n a collection ordered by __AUTOIDENT the position of an instanc
e can be moved up or down. Moving the instance up in an unordere
d position will change the position of the instance, only. Mowin
g it up in a collction ordered by __AUTOIDENT will update the id
entifying number of the instance.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will not change th
e position for instances in any other type of collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns 
an error. In case of normal termination the value is NO. When th
e function returns YES more detailed error information are avail
able in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Locate next key}}} 
{#{\footnote\plain{#}{.bmbus}}} 
{K{\footnote\plain{K}{PropertyHandle:Nex
tKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 NextKey\tab -  Locate next key\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Key NextKey (Key sort_key_w=Key(),
 int16 switch_level=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function tries to locate the next
 key according to the selected order starting from the selected 
or located instance. When passing a key the instance with this k
ey or the next lower (if not existing) is the starting point. Th
e function locates the key next to the starting point. The funct
ion returns the next key located or an empty Key handle in case 
of an error. When calling the function for indexes allowing dupl
icate key values, NextKey returns also duplicates. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The instance 
is located but not selected in the property handle. It cen be se
lected calling Get(CUR_INSTANCE) after calling NextKey(). Since 
the function is not reading instances but parsing the index only
, it provides fast access to the keys of a collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Passing a
 switch_level allows defining the last key components that must 
alter. This allows e.g. reading all instances for key duplicates
 when fixing the lats key component.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Sort key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The ke
y is provided in the internal key format. When necessary the key
 value can be converted from a string into the internal format u
sing the (.r pib.StringToKey*** ERROR : Chapter not found ***())
 function. Regardles on the type key values are passed as (char 
*) areas.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key_w\tab - Sort key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided
 in the internal key format. When necessary the key value can be
 converted from a string into the internal format using the Stri
ngToKey() function. \par
Default: Key() (empty key)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class def
inition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 switch_level\tab - Number of fixed key component\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
switch level defines the key component number that must not chan
ge when calling NextKey beginning with 0 for the first key compo
nent.\par
Default: AUTO\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is instance write protected?}}} 
{#{\footnote\plain{#}{.bmbut}}} 
{K{\footnote\plain{K}{PropertyHand
le:NoWrite}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 NoWrite\tab -  Is instance write protected?\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical NoWrite
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns whether the instan can be updated (NO)
 or not (YES). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> IsWrite())\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The funct
ion returns YES when the question was answered positivly. Otherw
ise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open property handle}}} 
{#{\footnote\plain{#}{.bmbuu}}} 
{K{\footnote\plain{K}{PropertyHandle:Open}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 O
pen\tab -  Open property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Open (const PropertyHandle &c
prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (PropertyHandle *property_handle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  log
ical Open (PropertyHandle &prop_hdl, char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical 
Open (PropertyHandle *property_handle, char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logica
l Open (const DBObjectHandle &obhandle_refc, char *extnames, PIA
CC accopt, logical transient_w=NO, char *key_name_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logi
cal Open (const DBObjectHandle &obhandle_refc, char *strnames, c
har *keyname, char *baseexts_w=NULL, logical weak_opt_w=NO, logi
cal own_opt_w=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0  logical Open (const DBObjectHandle &obhandle
_refc, DBViewDef &view_def, PropertyHandle &prop_hdl, PIACC acco
pt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (OperationTypes operation_type, PropertyHandl
e &prop_hdl, char sk_opt=YES, logical distinct=NO, char *rule=NU
LL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (OperationTypes operation_type, DBObjectHandl
e &object_handle, char sk_opt=YES, logical distinct=NO, char *ru
le=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (DBStructDef *struct_def, char *prop_nam
es, char *instance );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0  logical Open (Dictionary *dictptr, DBField
Def *field_def, char *init_string, logical init_opt, logical con
st_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (Dictionary *dictptr, char *prop_names, c
har *typenames, SDB_RLEV ref_level, uint16 size, uint16 precisio
n, uint16 dimension, char *init_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (Dictiona
ry *dictptr, char *typenames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (DictionaryHandle &
dict_handle, SDB_Member *dbmptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (DBStructDef *st
rdef, char *instance );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0  logical Open (DBFieldDef *field_def, Ins
tance initinst );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (int32 int_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (c
har *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (char *string, int32 string_len );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  l
ogical Open (double dbl_value );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  
logical Open (dbtm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (dttm datetime_val )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open (logical logval );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Open ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Open property
 handle opens a property handle for a persistent or transient da
ta source. A data source is a collection, object instance or an 
elementary database field. A data source contains the data for a
 property of a specific object. Usually property handles are ope
ned when constructimg them. You can, hawever, create an unopened
 property handle using the dummy constructor (without parameters
) or by closing another property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If the property handle 
to be opened is a subsequent property handle the parend must be 
opened. The datasource provided in the subsequent property handl
e depends on the parents property handle current selection and w
ill be provided automatically whenever the parent property handl
e changes its current selection.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can open static property han
dles for constants or other elementary data sources as well as f
or structured instances or transient collections using the appro
priate open function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When applying the Open() function to a prop
erty handle that has been opened previously the handle is closes
 implicitely before reopening. You cannot reopen property handle
s that have been provided with GetPropertyHandle(). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When creatin
g a copy handle sort order and selected instance are set in the 
copy handle as well.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is Y
ES if the function returns an error. In case of normal terminati
on the value is NO. When the function returns YES more detailed 
error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cp
rop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened pr
operty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop
erty_handle\tab - Pointer to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usu
ally) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Pro
pertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usuall
y) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Proper
tyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0
-terminated string. It may contain a single property name or a s
equence of property names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle_refc\tab - Const 
reference to database object handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference refers to an op
ened or not opened database object handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is 
passed as 0-terminated string or as buffer with trailing blanks 
and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The a
ccess option defines the way instances in a property handle are 
to be accessed (read, update, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 transient_w\tab - Transient opti
on\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 To create transient property handles transient=YES has to be p
assed. In this case the property handle instences and indexes ar
e stored in main storage, only. \par
Default: NO\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_name_w\tab - Key name 
for conversion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-terminated string or a
s buffer with a maximum size of 40 characters and trailing blank
s. If no key name is passed (NULL) the sort key according to the
 selected sort order is used instead,\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 structure name is passed as 0-terminated string or as buffer wi
th a maximum size of 40 characters and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keyname\tab - 
Name of sort key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The order key name must be a key name defined fo
r the given structure. The sort key is passed as 0-terminated st
ring with maximum 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 baseexts_w\tab - Name for base extent
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A base extent or base collection can be passed that defines a su
perset for the temporary extent. The extent name is passed as 0-
terminated string with maximum 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 weak_opt_w\tab - Weak-ty
ped option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option must be true (YES) when a collection may r
efer to instances of differet types, wich are based on the same 
base structure.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 own_opt_w\tab - Owning collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option must be s
et to true (YES) if the collection owns the instances it is refe
rring to. In this case the collection may not refer to instances
 from other collections. Removing instances from an owning colle
ction will result in deleting the instance completely.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 view_def\tab - 
View definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A view definition defines the elements ans select
ion condition for a view.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 operation_type\tab - Operation type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The opera
tion type describes the set operation to be performed in a view 
or operational path. When referring to operations the following 
property names should not be used, since they are interpreted as
 operations (not case sensitive):\par
select, define\par
having, where\par
grou
p_by, group\par
order, order_by\par
from\par
minus\par
intersect\par
join\par
update\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sk_opt\tab - So
rt key option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The sortkey option indicates whether the operation 
should be performed according to the sort key set for the collec
tions (YES. Otherwise (NO) the operation is performed by compari
ng instances.\par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 distinct\tab - Distinct option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Passing a dist
inct option YES forces the function to remove duplicates from th
e result collection.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rule\tab - OPeration rule\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Depending on the operati
on type the operation rule describes the details. Unsually, the 
rule is provided as ODABA OQL expression (where, group), but oth
er formats are possible as well.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 object_handle\tab - Database Object h
andle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is a pointer to an opened Database Object handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See a
lso class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 struct_def\tab - Pointer to 
generel structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure definition (DBStructDe
f) contains the metadata for the instance, i.e. information for 
the structure and its properties.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for: 
 DBStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_names\tab - Property name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is passed
 as 0-terminated string. It may contain a property path that con
sists of a sequence of property names.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Ins
tances do have the type of the referenced property handle (colle
ction type). The instance contains a pointer to a properly struc
tured instance area. \par
You can use the !-operator or the GetData()
 function to check whether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 Se
e also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dictionary handle
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An opened dictionary handle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 field_def\tab - Property definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property
 defintion contains the metadata for the referenced property ins
tance..\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBFieldDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 init_string\tab - In
itial value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The initial value for the property is passed as 0-ter
minated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 init_opt\tab - Initialize option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 const_opt\tab - Constant Op
tion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Defines a property handle as constant.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 typenames\tab - Type name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e type name is passed as 0-terminated string or as buffer with t
railing blanks and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ref_level\tab - 
Reference level\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference level describes the way and the lev
el of instance references.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_RL
EV\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 size\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of the instance or property area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 precision\tab - Pre
cision\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The precision defines the number of decimal positions behi
nd the decimal point for numerical valued. For date and time val
ues it defines the way of presenting the values in charachter pr
esentations.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dimension\tab - Dimension\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dimension describes the prop
erty dimension. this is the maximum number of instances that can
 be stored for the property. The function returns 0 (UNDEF) if t
here is no limit (collection) or the dimension (cardinality) def
ined for the property.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dict_handle\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dictiona
ry handle usually refers to an opened dictionary. To check wheth
er a dictionary is opened you can use the !-operator.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cl
ass definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbmptr\tab - Member definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 st
rdef\tab - Structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure definition is provided i
n the internal format as pointer to a DBStructDef object.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See als
o class definition for:  DBStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 initinst\tab - Initializing insta
nce\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instance for initializing the instance area for the property 
handle.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 int_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0
-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string_len\tab - String length\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The string leng
th defines the maximum number of characters that can be stored i
n the string area without counting the terminating 0. Usually th
is value is 1 less that the allocated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbl_value\tab - Dou
ble value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in the int
ernal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - 
Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datetime_val\tab - Date-Time value
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A date-time value or time point is passed in the internal date-t
ime format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 logval\tab - Logical v
alue\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a logical (bool) value.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Open Access Path}}} 
{#{\footnote\plain{#}{.bmbuv}}} 
{K{\footnote\plain{K}{PropertyHand
le:OpenAccessPath}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenAccessPath\tab -  Open Access Path\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical OpenA
ccessPath (PropertyHandle &prop_hdl, BNFData *parm_data );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logic
al OpenAccessPath (PropertyHandle &prop_hdl, ACObject *obhandle,
 BNFData *parm_data );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical OpenAccessPath (PropertyHandle &p
rop_hdl, char *path_prop );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical OpenAccessPath (PropertyHand
le &prop_hdl, ACObject *obhandle, char *path_prop );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Ope
nAccessPath (ACObject *obhandle, BNFData *parm_data, PIACC acces
s_mode=PI_Read );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical OpenAccessPath (ACObject *obhandle, ch
ar *path_prop, PIACC access_mode=PI_Read );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 An access path is a c
omplex expression, which allows defining an extended view to the
 database. This includes the features of SQL and OQL, which are 
also included in the ODABA View definition, but adds some more O
DABA specific facilities. Details for defining an access path ar
e described in 'ODABA User's Guide'.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 After Opening an acess path 
it is not inilialized, i.e. metadata is not yet available. The a
ccess path will be initialized whwn calling the Get() or ToTop()
 function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Accesspathes are used read only. Only in some special 
cases you may open the access path in update mode.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an erro
r. In case of normal termination the value is NO. When the funct
ion returns YES more detailed error information are available in
 the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a refere
nce to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm_data\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle\tab - Database Object Ha
ndle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is the database object handle or the database handle wh
en referring to the root object or the dictionary handle when re
ferring to the root object of the dictionary database.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 path_prop\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 access_mode\tab - Acce
ss mode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines the way instances in a property
 handle are to be accessed (read, update, write).\par
Default: PI_Rea
d\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Open hierarchy property handle}}} 
{#{\footnote\plain{#}{.bmbuw}}} 
{K{\footnote\plain{K}{PropertyHandle:OpenHierarch
y}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenHierarchy\tab -  Open hierarchy property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical OpenHier
archy (PropertyHandle *bottom_ph, PropertyHandle *top_ph=NULL, l
ogical path_opt=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function opens a hierarchy property han
dle, which creates a property handle for bottom property handle.
 The function will duplicate the complete hierarchy including th
e top property handle. The function copies the selectins from th
e source hierarchy, i.e. the result contains the same selected i
nstance as the source hierarchy. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns a property
 handle for the collection in the bottom property handle. Upper 
parent property handle, which have been created by the function,
 will be destructed automatically when destroying the bottom pro
perty handle. When no top property handle is passed or when the 
top property handle is not part of the source hierarchy, the ret
urned hierarchy ends with the extent property handle for the bot
tom property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You may access upper property handles by re
ferring parent property handle with  the GetParentProperty() fun
ction. Since all parents are copies, you may change the selectio
n in any parent handle without danger. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When passing true (YES) f
or path option, the function will turn the property hierarchy in
to a path property, which automatically iterates on higher level
s.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the source handle is opened in write mode or when any of 
the property handles in the hierarchy are opened in write mode, 
the copy might refer to a write protected instance. You can use 
the Refresh() function to remove the write protection, after ins
tances have been released in the other hierarchy. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The root for t
he hierarchy it the top handle of the hierarchy. Since this is a
 copy handle, the complete hierarchy will be closed, when closin
g the origin handle (or the extend node) implicitly or explicitl
y.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function
 returns an error. In case of normal termination the value is NO
. When the function returns YES more detailed error information 
are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bottom_ph\tab - Lowest pr
operty handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is a pointer to the lowest property handle in 
a hierarchy or property path.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Pro
pertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 top_ph\tab - Highest property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is a pointer to t
he top property hande in a hierarchy or property path. When the 
pointer is NULL, the top property handle is the extent, which is
 the root of the path.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHa
ndle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 path_opt\tab - Path oprtion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates, that a peth prop
erty will be ctreated.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Owns data area}}} 
{#{\footnote\plain{#}{.bmbux}}} 
{K{\footnote\plain{K}{PropertyHandle:OwnsDat
a}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OwnsData\tab -  Owns data area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical OwnsData ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function ret
urns whether the property handle owns its data area YES) or whet
her the area is shared with another property handle (NO).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question wa
s answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Select an instance
 relative to the current selection}}} 
{#{\footnote\plain{#}{.bmbuy}}} 
{K{\footnote\plain{K}{PropertyHandle:Position}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 P
osition\tab -  Select an instance relative to the current selection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  l
ogical __far __cdecl Position                                ( D
BField *co, DBField *retval, ParmList *parmlist, char *impname, 
logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Position (int16 count );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function al
low selecting an instance relatively to the currently selected i
nstance. Thus the function allows selecting the next instance in
 the collection as Position(1) or the previous instance as Posit
ion(-1). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns NO when the instance could be sele
cted. When no instance could be selected or an error occurred th
e function returns an error (YES).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of no
rmal termination the value is NO. When the function returns YES 
more detailed error information are available in the error objec
t.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 count\tab - Number of entries\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Position parent collections}}} 
{#{\footnote\plain{#}{.bmbuz}}} 
{K{\footnote\plain{K}{Prope
rtyHandle:PositionTop}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 PositionTop\tab -  Position parent collections\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  l
ogical PositionTop ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function selectes an instance (first 
instance) for all upper property handles that are not positioned
. The selection for the property handle itself remains unchanged
.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function 
returns an error. In case of normal termination the value is NO.
 When the function returns YES more detailed error information a
re available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Raise to power of}}} 
{#{\footnote\plain{#}{IDH1zub13}}} 
{K{\footnote\plain{K}{Prope
rtyHandle:Power}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Power\tab -  Raise to power of\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle Power (P
ropertyHandle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The power function is supported for nu
merical data, only. If passed property handle is not numerical t
he function tries to convert it into a numerical value. If no co
nversion is possible the operation fails. The function calculate
s the value of the property handle raised to the power of the pa
ssed value. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result is returned in a property handle that is 
created temporarily. You can assign the result to another proper
ty handle or performing further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Paramet
ers\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opene
d property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle
\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{.bmcw1}}} 
{K{\footnote\plain{K}{PropertyHandle:PropertyHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 PropertyHandle\tab -  C
onstructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          PropertyHandle (const Propert
yHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (Pr
opertyHandle *property_handle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          Propert
yHandle (node *nodptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle 
(PropertyHandle &prophdl_ref, char *prop_names );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                
          PropertyHandle (PropertyHandle *property_handle, char 
*prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (const DBOb
jectHandle &obhandle_refc, char *extnames, PIACC accopt );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0       
                   PropertyHandle (const DBObjectHandle &obhandl
e_refc, char *extnames, char *keynames, PIACC accopt, logical tr
ansient_w=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (const DB
ObjectHandle &obhandle_refc, char *strnames, char *keyname, char
 *baseexts_w=NULL, logical weak_opt_w=NO, logical own_opt_w=NO )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (const DBObjectHandle &
obhandle_refc, DBViewDef &view_def, PIACC accopt );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0              
            PropertyHandle (DBViewDef &view_def, PropertyHandle 
&prop_hdl, PIACC accmode=PI_undefined );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                         
 PropertyHandle (DBViewDef &view_def, PIACC accmode=PI_undefined
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (OperationTypes opera
tion_type, PropertyHandle &prop_hdl, char sk_opt=YES, logical di
stinct=NO, char *rule=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHa
ndle (OperationTypes operation_type, DBObjectHandle &object_hand
le, char sk_opt=YES, logical distinct=NO, char *rule=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0     
                     PropertyHandle (DBStructDef *strdef, char *
prop_names, Instance instance_w=Instance() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                    
      PropertyHandle (Dictionary *dictptr, DBFieldDef *field_def
, char *init_string, logical init_opt, logical const_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0      
                    PropertyHandle (Dictionary *dictptr, char *p
rop_names, char *typenames, SDB_RLEV ref_level, uint16 size, uin
t16 precision, uint16 dimension, char *init_string );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0            
              PropertyHandle (Dictionary *dictptr, char *typenam
es );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (DictionaryHandle &
dict_handle, SDB_Member *dbmptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          Prope
rtyHandle (DBStructDef *strdef, Instance instance_w=Instance() )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (DBFieldDef *field_def,
 Instance initinst );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (in
t32 int_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (char *str
ing );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (char *string, int
32 string_len );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (double 
dbl_value );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (dbdt date_v
al );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          PropertyHandle (dbtm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0   
                       PropertyHandle (dttm datetime_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0      
                    PropertyHandle (logical logval );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0            
              PropertyHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The property handle constructor
 creates and openes a property handle for a persistent or transi
ent data source. A data source is a collection, object instance 
or an elementary database field. A data source contains the data
 for a property of a specific object. Except for the dummy const
ructor (no parameter) property handle are opened when being cons
tructed sucessfully. To check teh success you can use the IsVali
d() or Check() function. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Cunstructing a subsequent property hand
le (passing the parent property handle and the property name to 
the constructor) the parend must be opened. The datasource provi
ded in the subsequent property handle depends on the parents pro
perty handle current selection and will be provided automaticall
y whenever the parent property handle changes its current select
ion.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can create static property handles for constants or othe
r elementary data sources as well as for structured instances or
 transient collections using the appropriate constructur functio
n.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usua
lly) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Prop
ertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 property_handle\tab - Pointer to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a poin
ter to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 nodptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Prope
rty handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_names\tab - Proper
ty name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property name is passed as 0-terminated string. It ma
y contain a property path that consists of a sequence of propert
y names.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0
-terminated string. It may contain a single property name or a s
equence of property names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 obhandle_refc\tab - Const 
reference to database object handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference refers to an op
ened or not opened database object handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 extnames\tab - Extent name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The extent name is 
passed as 0-terminated string or as buffer with trailing blanks 
and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The a
ccess option defines the way instances in a property handle are 
to be accessed (read, update, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keynames\tab - Key name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key n
ame is passed as 0-terminated string or as buffer with a maximum
 size of 40 characters and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 transient_w\tab - Transien
t option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 To create transient property handles transient=YES has t
o be passed. In this case the property handle instences and inde
xes are stored in main storage, only. \par
Default: NO\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Struc
ture name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure name is passed as 0-terminated string or 
as buffer with a maximum size of 40 characters and trailing blan
ks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keyname\tab - Name of sort key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The order key name must be a key nam
e defined for the given structure. The sort key is passed as 0-t
erminated string with maximum 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 baseexts_w\tab - Name for
 base extent\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A base extent or base collection can be passed that 
defines a superset for the temporary extent. The extent name is 
passed as 0-terminated string with maximum 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 weak_op
t_w\tab - Weak-typed option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option must be true (YES) when a coll
ection may refer to instances of differet types, wich are based 
on the same base structure.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 own_opt_w\tab - Owning collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This opti
on must be set to true (YES) if the collection owns the instance
s it is referring to. In this case the collection may not refer 
to instances from other collections. Removing instances from an 
owning collection will result in deleting the instance completel
y.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 view_def\tab - View definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A view definition defines the element
s ans selection condition for a view.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is
 a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accmode\tab - Access mode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access
 option defines the way instances in a property handle are to be
 accessed (read, update, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 operation_type\tab - Operation type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e operation type describes the set operation to be performed in 
a view or operational path. When referring to operations the fol
lowing property names should not be used, since they are interpr
eted as operations (not case sensitive):\par
select, define\par
having, wh
ere\par
group_by, group\par
order, order_by\par
from\par
minus\par
intersect\par
join\par
update\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sk_
opt\tab - Sort key option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The sortkey option indicates whether the ope
ration should be performed according to the sort key set for the
 collections (YES. Otherwise (NO) the operation is performed by 
comparing instances.\par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 distinct\tab - Distinct option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Passing
 a distinct option YES forces the function to remove duplicates 
from the result collection.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rule\tab - OPeration rule\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Depending on the 
operation type the operation rule describes the details. Unsuall
y, the rule is provided as ODABA OQL expression (where, group), 
but other formats are possible as well.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 object_handle\tab - Database O
bject handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is a pointer to an opened Database Object handl
e.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBObjectHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strdef\tab - Structur
e definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure definition is provided in the internal
 format as pointer to a DBStructDef object.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  DBStructDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance_w\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have
 the type of the referenced property handle (collection type). T
he instance contains a reference to a propertly structured area.
 \par
You can use the !-operator or the GetData() function to check w
hether the instance refers to data or not.\par
Default: Instance()\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dictptr\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A
n opened dictionary handle is passed.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 field_def\tab - Property definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property 
defintion contains the metadata for the referenced property inst
ance..\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBFieldDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 init_string\tab - Ini
tial value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The initial value for the property is passed as 0-term
inated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 init_opt\tab - Initialize option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 const_opt\tab - Constant Opt
ion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Defines a property handle as constant.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 typenames\tab - Type name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 type name is passed as 0-terminated string or as buffer with tr
ailing blanks and a maximum length of 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ref_level\tab - R
eference level\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The reference level describes the way and the leve
l of instance references.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_RLE
V\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 size\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of the instance or property area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 precision\tab - Prec
ision\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The precision defines the number of decimal positions behin
d the decimal point for numerical valued. For date and time valu
es it defines the way of presenting the values in charachter pre
sentations.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dimension\tab - Dimension\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dimension describes the prope
rty dimension. this is the maximum number of instances that can 
be stored for the property. The function returns 0 (UNDEF) if th
ere is no limit (collection) or the dimension (cardinality) defi
ned for the property.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dict_handle\tab - Dictionary handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The dictionar
y handle usually refers to an opened dictionary. To check whethe
r a dictionary is opened you can use the !-operator.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  DictionaryHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbmptr\tab - Member definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ini
tinst\tab - Initializing instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instance for initializing the instan
ce area for the property handle.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 int_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - St
ring area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string_len\tab - Str
ing length\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The string length defines the maximum number of charac
ters that can be stored in the string area without counting the 
terminating 0. Usually this value is 1 less that the allocated s
tring area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbl_value\tab - Double value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data v
alue is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value is passed in t
he internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date
time_val\tab - Date-Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A date-time value or time point is pass
ed in the internal date-time format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition fo
r:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 logval\tab - Logical value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a logical (bool) value.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide g
eneric attributes for new instance}}} 
{#{\footnote\plain{#}{.bmcvs}}} 
{K{\footnote\plain{K}{PropertyHandle:ProvGenAt
tribute}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvGenAttribute\tab -  Provide generic attributes for new ins
tance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ProvGenAttribute ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When reading an instance cont
aining generic attributes the generic attributes according to th
e selected type are provided in the instance only when already e
xisting, i.e. reading an instance will not create missing generi
c attributes. To provide generic attributes in any case this fun
ction can be called that creates missing generic attributes for 
the read instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide instan
ce}}} 
{#{\footnote\plain{#}{.bmcvt}}} 
{K{\footnote\plain{K}{PropertyHandle:Provide}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Provide\tab -  Provide instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical
 __far __cdecl Provide                                 ( DBField
 *co, DBField *retval, ParmList *parmlist, char *impname, logica
l chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Provide (int32 set_pos0_w=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance P
rovide (char *charkey );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Provide (PropertyHandle &prop_
hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Provide (Key sort_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Provide (Insta
nce initinst );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The Provide() function allows selecting an instan
ce in a property handle collection by key or position that must 
not necessarily exist in the collection. The provide function ch
ecks whether the instance exists in the collection (Get()). If n
ot existing the instance is created in the collection (-> Add())
 and selected.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the t
ype of the referenced property handle (collection type). The ins
tance contains a pointer to a properly structured instance area.
 \par
You can use the !-operator or the GetData() function to check w
hether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position
 of an instance in a collection depends on the selected index. i
f the collection is unsorted the position is the only way for ac
cessing the instance. \par
For sorted collections the position is det
ermined according to the instance key. If thee is a contradictio
n between position and key value the position will be ignored. \par
S
pecial positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the curre
ntly selected instance. If no instance is selected it refers to 
the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE (0) refers to t
he first instance in a collection according to the selected inde
x (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTANCE (0) refers to the las
t instance in a collection according to the selected index (sort
 order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 charkey\tab - Key area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key area is structured according to
 the key definition (key smcb).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a ref
erence to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class def
inition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key\tab - Sort key value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is p
rovided in the internal key format. When necessary the key value
 can be converted from a string into the internal format using t
he StringToKey() function. When no key is passed by the applicat
ion an empty key (without data area) will be passed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 initinst\tab - Initializing instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instance f
or initializing the instance area for the property handle.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provid
e instance area}}} 
{#{\footnote\plain{#}{.bmcvu}}} 
{K{\footnote\plain{K}{PropertyHandle:ProvideArea}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvideArea\tab -  Pro
vide instance area\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance ProvideArea ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function p
rovides the instance area for a selected property instance. When
 no instance is selected in the upper property handle or when no
 instance is selected in a collection handle the function return
s an empty instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have
 the type of the referenced property handle (collection type). T
he instance contains a pointer to a properly structured instance
 area. \par
You can use the !-operator or the GetData() function to c
heck whether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide Global Instance Identifier (GUID
)}}} 
{#{\footnote\plain{#}{.bmcvv}}} 
{K{\footnote\plain{K}{PropertyHandle:ProvideGUID}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvideGUID\tab -  Provide Global In
stance Identifier (GUID)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *ProvideGUID ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually the GUID 
is generated when the insatnce is created. It is, however, also 
possibbe to create GUIDs on demand by not setting autogenerating
 GUIDs in the structure or collection definition. This function 
allows explicitely generating a GUID as long as no GUID has been
 generated for the instance. When the ID already exists, the fun
ction returns the current GUID without generating a new one.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For 
building a GUID for a structure instance the structure must be d
erived from __OBJECT. Since ProvideGUID is locking the __OBJECT 
extent it should not be used in long transactions.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - 
Global Instance Identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The global instance identifier is pass
ed as 0-terminated string with a maximum length of 40 characters
.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Provide instance outside the transaction}}} 
{#{\footnote\plain{#}{.bmcvw}}} 
{K{\footnote\plain{K}{PropertyHandle:Pr
ovideGlobal}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvideGlobal\tab -  Provide instance outside the transact
ion\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl ProvideGlobal                         
  ( DBField *co, DBField *retval, ParmList *parmlist, char *impn
ame, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance ProvideGlobal (int32 set_pos0_w=A
UTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance ProvideGlobal (char *charkey );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance Provide
Global (PropertyHandle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance ProvideGlobal (Key 
sort_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance ProvideGlobal (Instance initinst );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The func
tion works the same way as the Provide() function, except that g
lobal instances are created outside the transaction when not yet
 existing. When not running in a transactions the function works
 the same way as Add(). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Creating global instances in a transacti
on prevents all other users from creating global instances for t
he same extent until the transaction is closed, since the index 
for the global collection is locked until terminating the transa
ction. Especially when creating instances via local collections 
that are based on global collections (extents) uncomfortable loc
ks may block the system. In this case ProvideGlobal() should be 
used instead of Provide(). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Using ProvideGlobal() for creating a 
new instance the instance will resist in the global collection a
lso when rolling back the transaction.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance are
a\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced property handle (c
ollection type). The instance contains a pointer to a properly s
tructured instance area. \par
You can use the !-operator or the GetDa
ta() function to check whether the instance refers to data or no
t.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0_w\tab - Position i
n collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a collection depends 
on the selected index. if the collection is unsorted the positio
n is the only way for accessing the instance. \par
For sorted collect
ions the position is determined according to the instance key. I
f thee is a contradiction between position and key value the pos
ition will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INST
ANCE refers to the currently selected instance. If no instance i
s selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_
INSTANCE (0) refers to the first instance in a collection accord
ing to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSTAN
CE (0) refers to the last instance in a collection according to 
the selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 charkey\tab - Key area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key area is
 structured according to the key definition (key smcb).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab -
 Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property h
andle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key\tab - So
rt key value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key format. When
 necessary the key value can be converted from a string into the
 internal format using the StringToKey() function. When no key i
s passed by the application an empty key (without data area) wil
l be passed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 initinst\tab - Initial
izing instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instance for initializing the instance area for th
e property handle.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Provide operation handle}}} 
{#{\footnote\plain{#}{.bmcvy}}} 
{K{\footnote\plain{K}{PropertyHandle:P
rovideOperation}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvideOperation\tab -  Provide operation handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Opera
tionHandle *ProvideOperation (char *expression );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 To avoid reopen
ing of an operation handle for the same expression you can searc
h for an operation handle by using this function. The function r
eturns the operation handle for the given expression if it has b
een ceated already. If not the function creates an operation han
dle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 expression\tab - OQL expression\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An OQL exp
ression defines a condition according to the OQL syntax. OQL exp
ressions must always terminate with ';'. The OQL-Expression is p
assed as 0-terminated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Fill instance buffer from position}}} 
{#{\footnote\plain{#}{.
bmcvz}}} 
{K{\footnote\plain{K}{PropertyHandle:ReadBuffer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ReadBuffer\tab -  Fill instance buffer 
from position\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 ReadBuffer (int32 set_pos0, int16 direction=
1 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function explicitly fills the buffer instances. the posi
tion of the first instance to be read is passed in set_pos0. The
 function removes all buffer instances located in the buffer and
 refills the buffer. Passing  CURRENT_INSTANCE as next position 
(default) the buffer reads instances beginning with the current 
position which has been set by the last Get() or LocateKey() fun
ction. When no instance is selected the buffer is filled beginni
ng with the first instance. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When reading the last instances in a
 collection the buffer might not be filled completely. The numbe
r of instances read into the buffer is returned from the functio
n.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Number of instances read into buffer\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 se
t_pos0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a c
ollection depends on the selected index. if the collection is un
sorted the position is the only way for accessing the instance. 
\par
For sorted collections the position is determined according to t
he instance key. If thee is a contradiction between position and
 key value the position will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CU
R_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the currently selected instance
. If no instance is selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FI
RST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the first instance in a
 collection according to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_IN
STANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the last instance in a collec
tion according to the selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 direction\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Ref
resh selected instance}}} 
{#{\footnote\plain{#}{IDH1zuc23}}} 
{K{\footnote\plain{K}{PropertyHandle:Refresh}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Refresh\tab -  R
efresh selected instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Refresh ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function checks
 whether the parent of the property handle is positioned. If not
, the function trys to position the parent hierarchy (PositionTo
p()). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 If the parent handle is positioned and the property is an 
active property the function generates a server event (Refresh).
\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function r
eturns an error. In case of normal termination the value is NO. 
When the function returns YES more detailed error information ar
e available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Register property handle}}} 
{#{\footnote\plain{#}{.bmcn1}}} 
{K{\footnote\plain{K}{Pr
opertyHandle:RegisterHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 RegisterHandle\tab -  Register property ha
ndle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical RegisterHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The property handle is registere
d for being notified when an event happens on the allocated reso
urces (index or instance). This is a precondition for receiving 
server events.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if 
the function returns an error. In case of normal termination the
 value is NO. When the function returns YES more detailed error 
information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Release instance b
uffer}}} 
{#{\footnote\plain{#}{.bmcmt}}} 
{K{\footnote\plain{K}{PropertyHandle:ReleaseBuffer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ReleaseBuffer\tab -  Release i
nstance buffer\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ReleaseBuffer ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function will relea
se the allocated buffer. All instances in teh buffer are release
d and buffer access functions cannot be called anymore until all
ocating a buffer again.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value i
s YES if the function returns an error. In case of normal termin
ation the value is NO. When the function returns YES more detail
ed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Remove li
ne terminator from large text fields}}} 
{#{\footnote\plain{#}{.bmcmv}}} 
{K{\footnote\plain{K}{PropertyHandle:RemoveT
erminator}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 RemoveTerminator\tab -  Remove line terminator from large te
xt fields\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical RemoveTerminator (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function 
removes the terminator string (string) from the end of the text 
field.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the func
tion returns an error. In case of normal termination the value i
s NO. When the function returns YES more detailed error informat
ion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String a
rea\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Rename instance}}} 
{#{\footnote\plain{#}{.bmcmw
}}} 
{K{\footnote\plain{K}{PropertyHandle:Rename}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Rename\tab -  Rename instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Rename (Ke
y new_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The rename function allows changig the sort key valu
e of the selected instance. After changig the key value the inst
ance is stored. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The effect is the same as changing the key attri
butes in the instance, unless that no knowledge about the key at
tributes is required.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns an error (YES) when no
 instance is selected or when\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The v
alue is YES if the function returns an error. In case of normal 
termination the value is NO. When the function returns YES more 
detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 new_key\tab - New key for the instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key passed for renam
ing the instance must be structured according to the currently s
elected sort order.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Repair Index}}} 
{#{\footnote\plain{#}{.bmcmx}}} 
{K{\footnote\plain{K}{PropertyHandle:RepairIndex}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 R
epairIndex\tab -  Repair Index\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl RepairIndex     
                        ( DBField *co, DBField *retval, ParmList
 *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical RepairIndex 
(char *key_name_w=NULL, char *attrstr_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function repa
irs the index for the collection  in the property handle. When n
o key name is passed, the currently selected index will be repai
red. Messages about repair actions are written to the error log-
file. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function wil remove index entries pointing to invalid 
indanced (deleted). It repairs also index tree information in la
rge indexes.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if th
e function returns an error. In case of normal termination the v
alue is NO. When the function returns YES more detailed error in
formation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_name_w\tab - Key name
 for conversion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-terminated string or 
as buffer with a maximum size of 40 characters and trailing blan
ks. If no key name is passed (NULL) the sort key according to th
e selected sort order is used instead,\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 attrstr_w\tab - Attribute type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he attribute type is passed as 0-terminated string. It must be o
ne of the defined values in the enumerated value set for the att
ribute types defined for the generic attribute.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Replace system va
riable}}} 
{#{\footnote\plain{#}{.bmcmy}}} 
{K{\footnote\plain{K}{PropertyHandle:ReplaceSysVariables}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ReplaceSysVariable
s\tab -  Replace system variable\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ReplaceSysVariables ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The 
function allows replacing system variable references in a text f
ield. When the property handle refers to a text field that conta
ins references to system variables (e.g. "...%SYSVAR1% ....") th
ose references are be replaced by the text currently set for the
 referenced system variable (in an ini-file or by the applicatio
n (-> SetSysVariable())). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the function is called for persis
tent fields the updated text causes a modification and will be s
tored into the database. Hence, it might be better to create a c
opy of the property and replacing the text in the copy.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an
 error. In case of normal termination the value is NO. When the 
function returns YES more detailed error information are availab
le in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Replace system variable value}}} 
{#{\footnote\plain{#}{.bmcmz}}} 
{K{\footnote\plain{K}{Proper
tyHandle:ReplaceText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ReplaceText\tab -  Replace system variable value\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
logical ReplaceText (char *old_str, char *new_str );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function
 allows replacing text strings in a text field. When the propert
y handle refers to a text field defined strings as passed in old
_str can be replaced by the text passen in new_str. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the fun
ction is called for persistent fields the updated text causes a 
modification and will be stored into the database. Hence, it mig
ht be better to create a copy of the property and replacing the 
text in the copy.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES 
if the function returns an error. In case of normal termination 
the value is NO. When the function returns YES more detailed err
or information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 old_s
tr\tab - Old string value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 new_str\tab - New string value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Reset instance}}} 
{#{\footnote\plain{#}{con8p
s.6u}}} 
{K{\footnote\plain{K}{PropertyHandle:Reset}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Reset\tab -  Reset instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Reset ( )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function resets the current selection in the property handl
e, i.e. the selection is cancelled without storing the last upda
tes (->Cancel()). Since the function is cancelling the selection
 all subordinated property handles will cancel the selection as 
well. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Than the function will re-read the instance from the datab
ase (->Get()). Subordinated property handles remain in the unsel
ect state.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the 
function returns an error. In case of normal termination the val
ue is NO. When the function returns YES more detailed error info
rmation are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset selection condit
ion for collection}}} 
{#{\footnote\plain{#}{.bmcnv}}} 
{K{\footnote\plain{K}{PropertyHandle:ResetSelection}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ResetSelect
ion\tab -  Reset selection condition for collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __c
decl ResetSelection                          ( DBField *co, DBFi
eld *retval, ParmList *parmlist, char *impname, logical chkopt);
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical ResetSelection ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Whe a filter has been set for the pr
operty handle (-> SetSelection()) this function will reset the s
election, i.e. the filter is not active anymore for the property
 handle. When no filter had been set for the property handle the
 function has no effect.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value 
is YES if the function returns an error. In case of normal termi
nation the value is NO. When the function returns YES more detai
led error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset tr
ansient property handle}}} 
{#{\footnote\plain{#}{.bmcnw}}} 
{K{\footnote\plain{K}{PropertyHandle:ResetTransientProper
ty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ResetTransientProperty\tab -  Reset transient property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logic
al ResetTransientProperty ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function releases the associat
ed property handle for a transient property handle. The associat
ed handle will be released for the original transient property h
andle and all its copies. If there are no more users registered 
for the property handle the access node will be destroyed.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns
 an error. In case of normal termination the value is NO. When t
he function returns YES more detailed error information are avai
lable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reset permanent write protection}}} 
{#{\footnote\plain{#}{.bmcnx
}}} 
{K{\footnote\plain{K}{PropertyHandle:ResetWProtect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ResetWProtect\tab -  Reset permanent writ
e protection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ResetWProtect ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows reset
ting the permanent write protection for an instance. The propert
y handle must be opened in update or write mode and the instance
 must be selected.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Store instance
}}} 
{#{\footnote\plain{#}{.bmcnz}}} 
{K{\footnote\plain{K}{PropertyHandle:Save}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Save\tab -  Store instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Save (cha
r savopt=NO, logical switchopt=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function stores all modi
fication made on the selected instance and updates made on insta
nces in subordinated property handles. Within a transaction the 
the function will write the updates to the transaction buffer. M
odifications are stored to the database when the transaction is 
closed (Commit()).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function is called automatically when chan
ging the selection for a property handle and modifications have 
been made on the instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The valu
e is YES if the function returns an error. In case of normal ter
mination the value is NO. When the function returns YES more det
ailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parame
ters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 savopt\tab - Store option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This option indicates that instances, th
at have been modified meanwhile by another user, can be overwrit
ten (YES). When passing NO for this option the function returns 
an error when the instance has been updated by another user afte
r reading it into the application.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 switchopt\tab - Unselct option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The o
ption forces the function to unselect the selected instance in t
he property handle after terminating the function.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Search string 
in property}}} 
{#{\footnote\plain{#}{con8ps.7u}}} 
{K{\footnote\plain{K}{PropertyHandle:SearchText}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SearchText\tab -  Search
 string in property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 SearchText (char *string, int32 curpos
=0, logical case_opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function performs a string search fo
r a text property. If the property is not a text property (-> Is
Text()) the function returns AUTO (-1).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 s
tring\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 curpos
\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 case_opt\tab - Case sensitive\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The option indicates case sensitive da
ta in text (YES)\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Create a subset from a collection}}} 
{#{\footnote\plain{#}{.bmcp1}}} 
{K{\footnote\plain{K}{PropertyH
andle:Select}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Select\tab -  Create a subset from a collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyH
andle &Select (PropertyHandle &prophdl_ref, char *expression );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 T
he result collection contains the instances from the passed coll
ection that return true (YES) for the expression passed to the s
elect function. The expression passed must define a valid expres
sion for the structure of the passed collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation i
s performed with the passed operand storing the result in the co
llection referenced by the calling property handle. When the cal
ling property handle refers to a non empty collection all instan
ces are removed before performing the operation. When the callin
g property handle is empty the function creates a temporary exte
nd for storing the result.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Ref
erence to the property handle that contains the result of an ope
ration (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defi
nition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to P
roperty handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property han
dle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 expression\tab - OQ
L expression\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An OQL expression defines a condition according to t
he OQL syntax. OQL expressions must always terminate with ';'. T
he OQL-Expression is passed as 0-terminated string.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set result st
ring}}} 
{#{\footnote\plain{#}{.bmcos}}} 
{K{\footnote\plain{K}{PropertyHandle:SetActionResult}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetActionResult\tab -  Set re
sult string\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetActionResult (char *result_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The func
tion allows setting a result string for the property handle. The
 result string can be retrieved with the GetActionResult functio
n. Thus you can pass the result of any action also to a client a
pplication while the action is running on the server. The result
 is passed as string, i.e. the result must not contain any 0-cha
racters except the terminating 0.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 result_string\tab - Result
 string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The result string can be a list of strings where strings 
are usually separated by x01 characters. If there is only one st
ring returned the string is 0-terminated. Multiple strings are t
erminated with 0 after the last string in the list, which should
 be terminated with x01 as well.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set area pointer for property in
stance}}} 
{#{\footnote\plain{#}{.bmcot}}} 
{K{\footnote\plain{K}{PropertyHandle:SetArea}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetArea\tab -  Set area pointer for
 property instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance SetArea (void *datarea );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The functio
n can be used for property handles referring to internal data (t
ransient fields) to allocate an instance area. The data area is 
not owned by the property handle in this case and will not autom
atically freed when closing the property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Do not use this
 functions for subordinated property handles that refer to prope
rties in instances. This will disconnect the property handle fro
m its instance data.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have
 the type of the referenced property handle (collection type). T
he instance contains a pointer to a properly structured instance
 area. \par
You can use the !-operator or the GetData() function to c
heck whether the instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datarea\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set definition for pr
operty}}} 
{#{\footnote\plain{#}{.bmcov}}} 
{K{\footnote\plain{K}{PropertyHandle:SetDescription}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetDescription\tab -  Set de
finition for property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetDescription (DBFieldDef *prop_def 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  void SetDescription (fmcb *fmcbptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function can be used
 for property handles referring to internal data (transient fiel
ds) to allocate a description (DBFieldDef). The description is n
ot owned by the property handle in this case and will not automa
tically freed when closing the property handle. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Do not use this 
functions for subordinated property handles that refer to proper
ties in instances.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_def\tab - Property definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The pro
perty defintion contains the metadata for the referenced propert
y instance.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DBFieldDef\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fmcbptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Ac
tivate dynamic length handling}}} 
{#{\footnote\plain{#}{.bmcow}}} 
{K{\footnote\plain{K}{PropertyHandle:SetDynLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 S
etDynLength\tab -  Activate dynamic length handling\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetDynLen
gth ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function activates dynamical size correction for the
 data area of the property handle. When assigning a value that i
s larger then the data area the data area will increase automati
cally instead of cutting the value.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination cod
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of n
ormal termination the value is NO. When the function returns YES
 more detailed error information are available in the error obje
ct.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set type for generic attribute in instance}}} 
{#{\footnote\plain{#}{.bmcox}}} 
{K{\footnote\plain{K}{PropertyHandl
e:SetGenAttribute}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetGenAttribute\tab -  Set type for generic attribut
e in instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetGenAttribute (char *attrstr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical 
SetGenAttribute (int attrtype );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical SetGenAttribute (char *
attrstr, char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical SetGenAttribute (int attrtyp
e, char *prop_path );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function sets the type for a generic at
tribute. The attribute type (as e.g. language) can be passed as 
string (attrstr) or type number (attrtype). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When the property ha
ndle does not refer directly to a generic attribute the property
 path for the generic attribute in the instance must be passed t
o the function (propnames).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The val
ue is YES if the function returns an error. In case of normal te
rmination the value is NO. When the function returns YES more de
tailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 attrstr\tab - Attribute type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The attribute type is passed as 0-te
rminated string. It must be one of the defined values in the enu
merated value set for the attribute types defined for the generi
c attribute. When the index is not generic, no attribute needs t
o be passes. If no attribute is pased for a generic index the cu
rrent setting is used.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 attrtype\tab - Type of generic attribute\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The typ
e for a generic attribute is a valid value from the basic enumer
ation of the generic attribute. UNDEF (0) indicates an undefined
 generic type.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_path\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passe
d as 0-terminated string. It may contain a single property name 
or a sequence of property names separated by '.'.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set basic insta
nce for property}}} 
{#{\footnote\plain{#}{.bmcoy}}} 
{K{\footnote\plain{K}{PropertyHandle:SetInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetInstance\tab -  Se
t basic instance for property\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance SetInstance (char *instan
ce );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function locates the area for the property handle in an
 instance. When defining internal structured instances this allo
ws locating the property instance within a structure instance. T
his function should not be called for property handles in databa
se instances since it may disconnect the property handle from th
e database instance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Persistent 
instances do have the type of the referenced collection handle (
collection type). Persistent instances may contain references to
 other instances or collections. Referenced instanced can be acc
essed by collection handles that are part of the persistent inst
ance. The collection handles for referenced instances can be acc
essed by the property name that has been defined in the structur
e definition. \par
When accessing the collection as MEMO-collection (
PI(mem)) no specific instance type is provided. In this case col
lection handle for references can be provided via the \f4\cf4\fs20\b\i0\ul0 .r GetPIPo
inter()*** ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0  function.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 inst
ance\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced 
property handle (collection type). The instance contains a point
er to a properly structured instance area. \par
You can use the !-ope
rator or the GetData() function to check whether the instance re
fers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Regi
ster action in the instance context}}} 
{#{\footnote\plain{#}{.bmcoz}}} 
{K{\footnote\plain{K}{PropertyHandle:SetInsta
nceAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetInstanceAction\tab -  Register action in the instance con
text\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetInstanceAction (SimpleAction *action );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The funct
ion adds an action to the instance context of the property handl
e. The instance action, which is not defined in the data model, 
is available in the instance context for the current property ha
ndle, only, but not for all instance contexts of this type.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retur
n value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function return
s an error. In case of normal termination the value is NO. When 
the function returns YES more detailed error information are ava
ilable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action\tab - Simple Action\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The si
mple action defines the context action and the action type. Some
 action types require more detailled action definitions that wil
l be retrieved in the dictionary. In this case the dictionary mu
st contain an appropriate action definition.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set Instance Event H
andler}}} 
{#{\footnote\plain{#}{con8ps.8u}}} 
{K{\footnote\plain{K}{PropertyHandle:SetInstanceEventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetInstance
EventHandler\tab -  Set Instance Event Handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetInstanceEventH
andler (EventLink *event_link );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Instance event handlers can be u
sed as an alternative way to handle server notifications indepen
dent on implemented context classes. To be notified from the ser
ver the property handle must be registered on the server (Regist
erPropertyHandle(). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When setting event handlers in addition to a
 context class handler function, the context class handler is ex
ecuted prior to the application handlers. When the context class
 handler returns an error (YES), the application handlers are no
t executed. Execution of application handlers is also stopped, w
hen the first application handler returns an eror (YES). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The eve
nt handler is passed as an event link that consists of an event 
handler function and a class instance. The handler is called lat
er with the instance of the event handler class set in the event
 link.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When adding several instance event handlers, they are call
ed in the sequence as being added to the property handle. Handle
rs can be removed using the ResetInstanceEventHandler() function
.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 event_link\tab - Event link\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An event link defines the link 
between a property handle and an event handler. A simple way of 
defining an event link is provided with the ELINK macro:\par
  ELINK(
class_instance, class_name, function_name)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  EventLink\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Activate Instance process event handler}}} 
{#{\footnote\plain{#}{.bmcq1
}}} 
{K{\footnote\plain{K}{PropertyHandle:SetInstanceProcessHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetInstanceProcessHandle
r\tab -  Activate Instance process event handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetInstanceProc
essHandler (EventLink *event_link );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Instance process event handl
er can be used as an alternative way to handle instance database
 events within an instance (structure) context class. In contras
t to database event handler functions in context classes, event 
handler can be installed in any application without defining spe
cific context classes. This allows handling different instances 
with the one event handler. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When setting event handlers in addit
ion to a context class handler function the context class handle
r is executed prior to the application handlers. When the contex
t class handler returns an error (YES), the application handlers
 are not executed. Execution of application handlers is also sto
pped, when the first application handler returns an eror (YES). 
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The event handler is passed as an event link that consists of an
 event handler function and a class instance. The handler is cal
led later with the instance of the event handler class set in th
e event link.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When adding several instance process event handlers
, they are called in the sequence as being added to the property
 handle. Handlers can be removed using the ResetInstanceProcessH
andler() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 event_link\tab - Event link\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An event link 
defines the link between a property handle and an event handler.
 A simple way of defining an event link is provided with the ELI
NK macro:\par
  ELINK(class_instance, class_name, function_name)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See a
lso class definition for:  EventLink\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Move ident key value to inst
ance}}} 
{#{\footnote\plain{#}{.bmcps}}} 
{K{\footnote\plain{K}{PropertyHandle:SetKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetKey\tab -  Move ident key value to 
instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetKey (Key ident_key, Instance instance_w=Inst
ance() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The passed key value is stored to the component attribu
tes of the identifying key in the instance. When passing an empt
y instance the key is stored in the selected instance of the pro
perty handle. When no insztance is passed or selected or when no
 identifying key is defined for the structure the function retur
ns an error (YES).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 iden
t_key\tab - Ident key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal key fo
rmat. When necessary the key value can be converted from a strin
g into the internal format using the StringToKey() function.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance_w\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instance
s do have the type of the referenced property handle (collection
 type). The instance contains a reference to a propertly structu
red area. \par
You can use the !-operator or the GetData() function t
o check whether the instance refers to data or not.\par
Default: Inst
ance()\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set normalized val
ue in attribute}}} 
{#{\footnote\plain{#}{.bmcpu}}} 
{K{\footnote\plain{K}{PropertyHandle:SetNormalized}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetNormalized\tab - 
 Set normalized value in attribute\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetNormalized (int32 
long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function can be used for storing integer values w
ith decimal precisions in INT or unsigned INT attributes.  When 
defining a an attribute with two decimals, assigning 1 will resu
lt inernally into 100 (1.00). Assigning the value using SetNorma
lized will result in 1 (0.01).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
value is YES if the function returns an error. In case of normal
 termination the value is NO. When the function returns YES more
 detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is passed as platform i
ndependent 32-bit integer value.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set sort order}}} 
{#{\footnote\plain{#}{.bmcpv}}} 
{K{\footnote\plain{K}{PropertyHand
le:SetOrder}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetOrder\tab -  Set sort order\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetOrder (char *key
_name_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical SetOrder (char *key_name, int attrtype )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical SetOrder (char *key_name, char *attrstr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical Set
Order (char *key_name, int attrtype, char *attrstr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When there 
are different sort orders (indexes) supported for a collection o
ne of those can be selected as current sort order. The sort orde
r or index is selected by the key name that is associated with t
he index. Changing the sort order will reset the selection in th
e property handle and no instance is selected when the function 
returns. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When selecting a generic attribute index the attribute 
type (as e.g. language) can be passed to select the proper index
. If no  attribute type is passed it is evaluated from the gener
ic attribute.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When not passing a sort key name the default index 
is set as current sort order. The default index is the identifyi
ng key index (when defined for the collection) or the first uniq
ue index in the list of available indexes. Passing "*" for the s
ort key name refreshs the sort order. This way it is possible to
 set the proper index for a generic attribut index or to reorgan
ize a tamporary index.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When no index is defined for the passed ke
y name or the attribute type is not defined the function returns
 an error (YES).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES i
f the function returns an error. In case of normal termination t
he value is NO. When the function returns YES more detailed erro
r information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_na
me_w\tab - Key name for conversion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-termina
ted string or as buffer with a maximum size of 40 characters and
 trailing blanks. If no key name is passed (NULL) the sort key a
ccording to the selected sort order is used instead,\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_name\tab - Ke
y name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-terminated string or as buffer
 with a maximum size of 40 characters and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 attrty
pe\tab - Type of generic attribute\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type for a generic attribute is
 a valid value from the basic enumeration of the generic attribu
te. UNDEF (0) indicates an undefined generic type.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 attrstr\tab - Attri
bute type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The attribute type is passed as 0-terminated string. It
 must be one of the defined values in the enumerated value set f
or the attribute types defined for the generic attribute. When t
he index is not generic, no attribute needs to be passes. If no 
attribute is pased for a generic index the current setting is us
ed.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Register action in the property contect}}} 
{#{\footnote\plain{#}{.bmcpw}}} 
{K{\footnote\plain{K}{PropertyHandle:S
etPropertyAction}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetPropertyAction\tab -  Register action in the prope
rty contect\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetPropertyAction (SimpleAction *action );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e function adds an action to the property context of the propert
y handle. The property action, which is not defined in the data 
model, is available in the instance context for the current prop
erty handle, only, but not for all instance contexts of this typ
e.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function
 returns an error. In case of normal termination the value is NO
. When the function returns YES more detailed error information 
are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 action\tab - Simple Actio
n\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The simple action defines the context action and the action typ
e. Some action types require more detailled action definitions t
hat will be retrieved in the dictionary. In this case the dictio
nary must contain an appropriate action definition.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set Property 
Event Handler}}} 
{#{\footnote\plain{#}{.bmcpx}}} 
{K{\footnote\plain{K}{PropertyHandle:SetPropertyEventHandler}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetProp
ertyEventHandler\tab -  Set Property Event Handler\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void SetPropertyEv
entHandler (EventLink *event_link );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Property event handlers can 
be used as an alternative way to handle server notifications ind
ependent on implemented context classes. To be notified from the
 server the property handle must be registered on the server (Re
gisterPropertyHandle()). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When setting event handlers in addition
 to a context class handler function, the context class handler 
is executed prior to the application handlers. When the context 
class handler returns an error (YES), the application handlers a
re not executed. Execution of application handlers is also stopp
ed, when the first application handler returns an eror (YES). \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e event handler is passed as an event link that consists of an e
vent handler function and a class instance. The handler is calle
d later with the instance of the event handler class set in the 
event link.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When adding several property event handlers, they are
 called in the sequence as being added to the property handle. H
andlers can be removed using the ResetPropertyEventHandler() fun
ction.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 event_link\tab - Event link\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An event link defines the 
link between a property handle and an event handler. A simple wa
y of defining an event link is provided with the ELINK macro:\par
  E
LINK(class_instance, class_name, function_name)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class de
finition for:  EventLink\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set filter condition for collection hand
le}}} 
{#{\footnote\plain{#}{.bmcpz}}} 
{K{\footnote\plain{K}{PropertyHandle:SetSelection}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetSelection\tab -  Set filter con
dition for collection handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical __far __cdecl SetSelection 
                           ( DBField *co, DBField *retval, ParmL
ist *parmlist, char *impname, logical chkopt);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical SetSelect
ion (char *expression );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical SetSelection (BNFData *bdata );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows applying a filter expression to the collecti
on. The expression must be a valid expression in the context of 
the structure defined for the property handle. When a filter is 
set the property handle selects only those instances that return
 true (-> IsTrue()) for the expression. Sequential retievals as 
NextKey(), operators ++ and -- or Position() automatically searc
h for the next valid instance. The Get() function that is reques
ting a specific instance by index or key returns an empty instan
ce when the requested instance does not fulfill the filter condi
tion. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When setting a filter for an update or write property hand
le updating an instance may lead to an invalid instance. In this
 case the instance is unselected after storing the updated data.
\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function r
eturns an error. In case of normal termination the value is NO. 
When the function returns YES more detailed error information ar
e available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 expression\tab - OQL expression\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An OQL
 expression defines a condition according to the OQL syntax. OQL
 expressions must always terminate with ';'. The OQL-Expression 
is passed as 0-terminated string.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bdata\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Store sort key value to 
instance}}} 
{#{\footnote\plain{#}{con8ps.9u}}} 
{K{\footnote\plain{K}{PropertyHandle:SetSortKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetSortKey\tab -  Store sor
t key value to instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetSortKey (Key sort_key, Instan
ce instance_w=Instance() );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The passed key value is stored to the
 component attributes of the selected sort key in the instance. 
When passing an empty instance the key is stored in the selected
 instance of the property handle. When no instance is passed or 
selected or when no sort key is defined for the structure the fu
nction returns an error (YES).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
value is YES if the function returns an error. In case of normal
 termination the value is NO. When the function returns YES more
 detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key\tab - Sort key value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the inter
nal key format. When necessary the key value can be converted fr
om a string into the internal format using the StringToKey() fun
ction. When no key is passed by the application an empty key (wi
thout data area) will be passed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  
Key\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instance_w\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the re
ferenced property handle (collection type). The instance contain
s a reference to a propertly structured area. \par
You can use the !-
operator or the GetData() function to check whether the instance
 refers to data or not.\par
Default: Instance()\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Setting property handle for transient property
 (reference)}}} 
{#{\footnote\plain{#}{.bmcr1}}} 
{K{\footnote\plain{K}{PropertyHandle:SetTransientProperty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTransien
tProperty\tab -  Setting property handle for transient property (refe
rence)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetTransientProperty (PropertyHandle &prop_hdl );
\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function sets the current handle for a transient property h
andle. The function will not create a copy of the property handl
e. The associated handle is registered, only. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When a copy of the
 referenced property handle is required the application has to c
reate the copy befor setting it. After associating the copy for 
the referenced property handle it can be destroyed. Because it i
s registered in the transient property handle it will be destroy
ed when resetting the transient reference or when setting anothe
r property handle for the same transient reference.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When creating
 a copy of a transient reference the copy will get the same refe
renced handle. All referened property handles for the original t
ransient property handle and all its copies will be updated when
 setting a new property handle for the original transient proper
ty handle or one of its copies. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Transient property handles are d
estroyed automatically when they are placed in a persistent obje
ct instance and this instance is destroyed. When, however, refer
ring recursively to a property handle by associating a parent or
 higher property handle with a subordinated property handle this
 may result in never deleting the access node. Use MarkUsed() an
d MarkUnused() for handeling this situation.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 You can release the 
associated property handle using the ResetTransientProperty() fu
nction.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the fun
ction returns an error. In case of normal termination the value 
is NO. When the function returns YES more detailed error informa
tion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Prope
rty Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Set type for weak-
typed collection}}} 
{#{\footnote\plain{#}{.bmcqs}}} 
{K{\footnote\plain{K}{PropertyHandle:SetType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetType\tab -  Set type f
or weak-typed collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical SetType (char *strnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Befor
e creating a new instance for a weak-typed collection the type o
f the instance to be inserted has to be set in the property hand
le. The type of instance to be created is passe as structure nam
e (strnames). This setting might be reset when reading the next 
instance in the collection.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The val
ue is YES if the function returns an error. In case of normal te
rmination the value is NO. When the function returns YES more de
tailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strnames\tab - Structure name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The structure name is passed as 0-t
erminated string or as buffer with a maximum size of 40 characte
rs and trailing blanks.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set instance version to be provided by th
e collection handle}}} 
{#{\footnote\plain{#}{.bmcqu}}} 
{K{\footnote\plain{K}{PropertyHandle:SetVersion}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetVersion\tab -  S
et instance version to be provided by the collection handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logi
cal SetVersion (uint16 version_nr=CUR_VERSION );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function all
ows changing the version for a property handle. This allows prov
iding older instance versions that are stored for the instance s
elected. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Passing CUR_VERSION will reset the version to the curre
nt version for the property handle.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination cod
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of n
ormal termination the value is NO. When the function returns YES
 more detailed error information are available in the error obje
ct.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 version_nr\tab - Internal version number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Version numbers 
are created internally for each Active Object when creating a ne
w version for the Database Object. Each version number is associ
ated with a time stamp that defines the end of this version.\par
Defa
ult: CUR_VERSION\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Set permanent write protection}}} 
{#{\footnote\plain{#}{.bmcqv}}} 
{K{\footnote\plain{K}{PropertyHand
le:SetWProtect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetWProtect\tab -  Set permanent write protection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logic
al SetWProtect ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function sets permanent write protection 
for the selected instance. After being permanently write protect
ed the instance cannot be updated until the write protection is 
reset (-> ResetWProtect()). The property handle must be opened i
n update or write mode and the selected instance must be writeab
le (-> IsWrite()).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Store instance
 data to property handle}}} 
{#{\footnote\plain{#}{.bmcqw}}} 
{K{\footnote\plain{K}{PropertyHandle:StoreData}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 StoreData\tab -
  Store instance data to property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical StoreData (char
 *instance );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The passed instance is stored to the structure attr
ibutes of the selected instance. When no instance is selected or
 located or when the instance is not writeable the function retu
rns an error (YES).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YE
S if the function returns an error. In case of normal terminatio
n the value is NO. When the function returns YES more detailed e
rror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ins
tance\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of the referenced
 property handle (collection type). The instance contains a poin
ter to a properly structured instance area. \par
You can use the !-op
erator or the GetData() function to check whether the instance r
efers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Con
vert string to internal key}}} 
{#{\footnote\plain{#}{.bmcqx}}} 
{K{\footnote\plain{K}{PropertyHandle:StringToKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Strin
gToKey\tab -  Convert string to internal key\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Key StringToKey (Key key
_string, char *key_name_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The passed key will be converte
d from an extended SDF string into the internal key instance for
mat. As field separator in the string key '|' is assumed. Struct
ure levels are enclosed in ''. Normally the key passed is assume
d to be structured according to the sort key selected for the pr
operty handle ot according to the identifying key (when no sort 
key is defined). It is, however, also possible to pass a valid k
ey name for conversion.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Internal key value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key v
alue structure corresponds to the structure of the passed or sel
ected key.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_string\tab - String area for key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key is pr
ovided as ESDF key.  are used as instance parenthesis, | is used
 as property delimiter. Delimiters may change when defined diffe
rently in the DataFormat option.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 key_name_w\tab - Key name for convers
ion\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-terminated string or as buffer wi
th a maximum size of 40 characters and trailing blanks. If no ke
y name is passed (NULL) the sort key according to the selected s
ort order is used instead,\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Position to top of collection (before 
first)}}} 
{#{\footnote\plain{#}{.bmcqy}}} 
{K{\footnote\plain{K}{PropertyHandle:ToTop}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ToTop\tab -  Position to top of colle
ction (before first)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ToTop ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function positions th
e property handle before the first instance in the collection ac
cording to the defined sort order. Thus, a subsequent ++ operati
on or NextKey() will select the first instance in the collection
. No instance is selected after calling this function. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When an i
nstance is selected in the property handle it will be unselected
 (and stored when it was modified).\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For Access pathes the functio
n can be used to initialize the asscess path. After opening an a
ccess path the path has not been executed and is uninitialized u
ntil the next Get() call. ToTop() will inilialize the path in ad
vance.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the func
tion returns an error. In case of normal termination the value i
s NO. When the function returns YES more detailed error informat
ion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Union two collections}}} 
{#{\footnote\plain{#}{.bmcq
z}}} 
{K{\footnote\plain{K}{PropertyHandle:Union}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Union\tab -  Union two collections\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandl
e &Union (PropertyHandle &prop_hdl1, PropertyHandle &prop_hdl2, 
char sk_opt=YES, logical distinct=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &Union (P
ropertyHandle **ph_list, int16 count, char sk_opt=YES, logical d
istinct=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &Union (PropertyHandle &prophdl_ref
, char sk_opt=YES, logical distinct=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result collection c
ontains the instancesfrom all operand collections. When passing 
no for the distict option the result contains also duplicates. O
therwise duplicates are not stored in the result collection. Dup
licates are determined by means of sort key (passing YES for ik_
opt) or local identities (LOID). Using the LOID is save but comp
aring the key is much faster. Hence, the key check should be use
d whenever possible.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference
 to the property handle that contains the result of an operation
 (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition
 for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl1\tab - First Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 R
eference to an opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl2\tab - Second Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference t
o an opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Prop
ertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sk_opt\tab - Sort key option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The sortkey option indicates wh
ether the operation should be performed according to the sort ke
y set for the collections (YES. Otherwise (NO) the operation is 
performed by comparing instances.\par
Default: YES\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 distinct\tab - Distinct 
option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Passing a distinct option YES forces the function to remov
e duplicates from the result collection.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ph_list\tab - List of propert
y handles\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 An array of property handles acting as operands in the 
operation. The number of property handles in the array is passed
 in the count-parameter.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Property
Handle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 count\tab - Number of entries\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property
 handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Unlock instance}}} 
{#{\footnote\plain{#}{con8ps
.0u}}} 
{K{\footnote\plain{K}{PropertyHandle:Unlock}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Unlock\tab -  Unlock instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Unlock 
( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function allows unlocking the selected instance of the 
property handle after it has been locked (-> Lock()). Instances 
for shared base structures are not automatically included in the
 unlocking and must be unlocked separately when being locked sep
arately.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function returns NO when the instance has been unl
ocked successfully. It returns en error (YES) when the instance 
is not locked, when no instance is selected in the property hand
le or when another error occurred.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of no
rmal termination the value is NO. When the function returns YES 
more detailed error information are available in the error objec
t.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Unlock collection}}} 
{#{\footnote\plain{#}{.bmcs1}}} 
{K{\footnote\plain{K}{PropertyHandle:UnlockSet}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 UnlockSet\tab -  Unl
ock collection\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical UnlockSet ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 This function allows unlock
ing a collection handle referenced in a collection property hand
le that has been locked (-> Lock()) within the application.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The f
unction returns NO when the collection has been unlocked success
fully. It returns en error (YES) when the collection has not bee
n locked, when no instance is selected in the upper property han
dle (when existing) or when another error occurred.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an err
or. In case of normal termination the value is NO. When the func
tion returns YES more detailed error information are available i
n the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Unregister property handle}}} 
{#{\footnote\plain{#}{.bmcrs}}} 
{K{\footnote\plain{K}{PropertyHandl
e:UnregisterHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 UnregisterHandle\tab -  Unregister property handle\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
logical UnregisterHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The property handle is unregistered
 for being notified when an event happens on the allocated resou
rces (index or instance).\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value
 is YES if the function returns an error. In case of normal term
ination the value is NO. When the function returns YES more deta
iled error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Checks 
whetehr the Namdle is valid}}} 
{#{\footnote\plain{#}{.bmcrt}}} 
{K{\footnote\plain{K}{PropertyHandle:ValidateNode}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Vali
dateNode\tab -  Checks whetehr the Namdle is valid\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical ValidateNo
de ( ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Usually a property handle is valid when it has been
 opened successfully. When one of the upper handles, however, is
 weak typed or untyped the handle may become invalid when changi
ng the selection in the upper node.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination cod
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of n
ormal termination the value is NO. When the function returns YES
 more detailed error information are available in the error obje
ct.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Negation operator for logical values}}} 
{#{\footnote\plain{#}{.bmcrv}}} 
{K{\footnote\plain{K}{PropertyHandle:oper
ator!}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator!\tab -  Negation operator for logical values\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical op
erator! ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The negation operation performed depends on the type
 of the first operand. If the second operand is not compatible w
ith the first operand the function tries to convert the second o
perand into the type of the first operand. If no conversion is p
ossible the operation fails. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1. Numerical data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator subst
ract the second operand from the first one. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 2. Text data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The oper
ator removes all occurences of operand 2 in operand 1, i.e. "Pau
l Miller" - "aul" = "P Miller".\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 3. Collections\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The Minus operation
 is performed as operand1.Minus(operand2)\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 4. Time fields\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For date 
and time you may substract integer or time values. values, only.
 Substracting an integer results in a new time value of the same
 type (operand1). Substracting a time value results in an intege
r containing the distance between the time values. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 5. Logical\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The
 substract operation returns the result of an exclusive or opera
tion\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result is returned in a property handle that is created 
temporarily. You can assign the result to another property handl
e or performing further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 function returns YES when the question was answered positivly. 
Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare two property instances (not equa
l)}}} 
{#{\footnote\plain{#}{.bmcrw}}} 
{K{\footnote\plain{K}{PropertyHandle:operator!=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator!=\tab -  Compare two proper
ty instances (not equal)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator!= (const PropertyHandl
e &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator!= (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical oper
ator!= (int32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator!= (double double_val 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator!= (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator!= (dbtm
 time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator!= (PropertyHandle *property_handle
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation compares the two operands and returns false (NO
) when they are identical and true (YES) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answ
ered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Pro
perty Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handl
e.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String a
rea\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer val
ue\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is passed as platform independent 32-bit integer val
ue.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 double_val\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in t
he internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time
_val\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value is passed in the internal data fo
rmat.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 property_handle\tab - Pointe
r to a property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually) opened proper
ty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Remainin
g part for integer division}}} 
{#{\footnote\plain{#}{.bmcrx}}} 
{K{\footnote\plain{K}{PropertyHandle:operator%}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operato
r%\tab -  Remaining part for integer division\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle operator
% (PropertyHandle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The modulo operation is supported 
for numerical data, only. If the second operand is not compatibl
e with the first operand the function tries to convert the secon
d operand into the type of the first operand. If no conversion i
s possible the operation fails. The operator provides the remain
ing part of a division of the first operator by the second one. 
 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result is returned in a property handle that is created tem
porarily. You can assign the result to another property handle o
r performing further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl
\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property 
handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{AND operato
r (or intersect)}}} 
{#{\footnote\plain{#}{.bmcry}}} 
{K{\footnote\plain{K}{PropertyHandle:operator&}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator&\tab -  AND op
erator (or intersect)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle operator& (PropertyHandle &
prophdl_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The intersect operation is supported for collectio
ns, only. It can be used instead of the Intersect function (Inte
rsect(operand1,operand2)).  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result is returned in a property
 handle that is created temporarily. You can assign the result t
o another property handle or performing further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retur
n value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a
 reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class
 definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Logical AND operation}}} 
{#{\footnote\plain{#}{.bmcrz}}} 
{K{\footnote\plain{K}{Prope
rtyHandle:operator&&}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator&&\tab -  Logical AND operation\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical o
perator&& (const PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator return
s true (YES) if both operands are true and NO otherwise.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> IsTr
ue())\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the
 question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parame
ters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) ope
ned property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHand
le\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{AND operator (intersect collections)}}} 
{#{\footnote\plain{#}{IDH1zuby3}}} 
{K{\footnote\plain{K}{PropertyHandle:op
erator&=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator&=\tab -  AND operator (intersect collections)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Proper
tyHandle &operator&= (PropertyHandle &prophdl_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator
 returns the result of an intersec operation in the first operan
d.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> operator&)\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to 
the property handle that contains the result of an operation (us
ually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for
:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property ha
ndle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See al
so class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Locate instance}}} 
{#{\footnote\plain{#}{.bmct1}}} 
{K{\footnote\plain{K}{Pro
pertyHandle:operator()}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator()\tab -  Locate instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Instance oper
ator() (int32 set_pos0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance operator() (PropertyHandle &p
rop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Instance operator() (Key sort_key );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator can 
be used to locate an instance instead of the Get() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> 
Get())\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Instance area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Instances do have the type of t
he referenced property handle (collection type). The instance co
ntains a pointer to a properly structured instance area. \par
You can
 use the !-operator or the GetData() function to check whether t
he instance refers to data or not.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:
  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_pos0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position
 of an instance in a collection depends on the selected index. i
f the collection is unsorted the position is the only way for ac
cessing the instance. \par
For sorted collections the position is det
ermined according to the instance key. If thee is a contradictio
n between position and key value the position will be ignored. \par
S
pecial positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the curre
ntly selected instance. If no instance is selected it refers to 
the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to t
he first instance in a collection according to the selected inde
x (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the las
t instance in a collection according to the selected index (sort
 order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) 
opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyH
andle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sort_key\tab - Sort key value\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 The key is provided in the internal
 key format. When necessary the key value can be converted from 
a string into the internal format using the StringToKey() functi
on. When no key is passed by the application an empty key (witho
ut data area) will be passed.\par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Key
\strike0\ul0 \par
\pard\s0\ql\sb60\tx1700 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Multiply two properties}}} 
{#{\footnote\plain{#}{.bmcss}}} 
{K{\footnote\plain{K}{PropertyHandle:operator*}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator*\tab - 
 Multiply two properties\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle operator* (const Propert
yHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The multiplication operation is supported f
or some types, only. The way the operation is performed depends 
on the type of the first operand. If the second operand is not c
ompatible with the first operand the function tries to convert t
he second operand into the type of the first operand. If no conv
ersion is possible the operation fails. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1. Numerical data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The ope
rator multiplies the second operand with the first one. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 5. Logic
al\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The multiplication returns the result of an and operation\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The r
esult is returned in a property handle that is created temporari
ly. You can assign the result to another property handle or perf
orming further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Pro
perty Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handl
e.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Multiply and ass
ign result to first operator}}} 
{#{\footnote\plain{#}{.bmcst}}} 
{K{\footnote\plain{K}{PropertyHandle:operator*=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 opera
tor*=\tab -  Multiply and assign result to first operator\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHan
dle &operator*= (const PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator 
returns the result of a multiplication in the first operand.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> 
operator*)\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the pr
operty handle that contains the result of an operation (usually 
the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Pro
pertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to
 an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sum two properties}}} 
{#{\footnote\plain{#}{.bmcsu}}} 
{K{\footnote\plain{K}{PropertyHandle:operat
or+}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator+\tab -  Sum two properties\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle operator+ (cons
t PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The sum operation performed depend
s on the type of the first operand. If the second operand is not
 compatible with the first operand the function tries to convert
 the second operand into the type of the first operand. If no co
nversion is possible the operation fails. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1. Numerical data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The o
perator adds the second operand to the first one. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 2. Text data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Th
e operator concatenates the second operand to the first operand 
1, i.e. "Paul " + "Miller" = "Paul Miller".\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 3. Collections\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The Uni
on operation is performed as operand1.Union(operand2)\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 4. Time fie
lds\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For date and time you may add only integer.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 5. Logical\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The su
bstract operation returns the result of an or operation\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The resul
t is returned in a property handle that is created temporarily. 
You can assign the result to another property handle or performi
ng further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Propert
y Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 Se
e also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Position cursor on n
ext instance}}} 
{#{\footnote\plain{#}{.bmcsv}}} 
{K{\footnote\plain{K}{PropertyHandle:operator++}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator++\tab -  Position
 cursor on next instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator++ (int  );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Pro
pertyHandle &operator++ ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The increment operation performed de
pends on the type of the operand.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1. Numerical data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator
 increments the value by 1. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 2. Collections\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation tries to
 locate the next instance in the collection. If no iinstance is 
selected it locates the first instance n the collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The res
ult is returned in the operand.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property had
le\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the property handle that contains the result of a
n operation (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class
 definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 \tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Sum and assign resul
t to first operator}}} 
{#{\footnote\plain{#}{.bmcsw}}} 
{K{\footnote\plain{K}{PropertyHandle:operator+=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator+=\tab -  S
um and assign result to first operator\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator+
= (const PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator returns the su
m of the two operands in the first operand.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> operator+)\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the property handle tha
t contains the result of an operation (usually the calling prope
rty handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parame
ters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) ope
ned property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHand
le\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Subtract properties}}} 
{#{\footnote\plain{#}{.bmcsx}}} 
{K{\footnote\plain{K}{PropertyHandle:operator-}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-\tab -  S
ubtract properties\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle operator- (const PropertyHandl
e &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle operator- ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The substract opera
tion performed depends on the type of the first operand. If the 
second operand is not compatible with the first operand the func
tion tries to convert the second operand into the type of the fi
rst operand. If no conversion is possible the operation fails. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1
. Numerical data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator substract the second operand from t
he first one. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 2. Text data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator removes all occurences of
 operand 2 in operand 1, i.e. "Paul Miller" - "aul" = "P Miller"
.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 3. Collections\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The Minus operation is performed as operand1.Minu
s(operand2)\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 4. Time fields\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 For date and time you may substract int
eger or time values. values, only. Substracting an integer resul
ts in a new time value of the same type (operand1). Substracting
 a time value results in an integer containing the distance betw
een the time balues. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 5. Logical\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The substract operation returns t
he result of an exclusive or operation\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result is returned in 
a property handle that is created temporarily. You can assign th
e result to another property handle or performing further operat
ions.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a refe
rence to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defi
nition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Position cursor on previous instance}}} 
{#{\footnote\plain{#}{.
bmcsy}}} 
{K{\footnote\plain{K}{PropertyHandle:operator--}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator--\tab -  Position cursor on pr
evious instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator-- ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &
operator-- (int  );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The decrement operation performed depends on 
the type of the operand.  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1. Numerical data\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator decremen
ts the value by 1. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 2. Collections\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation tries to locate t
he prevoius instance in the collection. If no iinstance is selec
ted it locates the last instance n the collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result is
 returned in the operand.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Refe
rence to the property handle that contains the result of an oper
ation (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defin
ition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 \tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Subtract and assign result to first 
operator}}} 
{#{\footnote\plain{#}{.bmcsz}}} 
{K{\footnote\plain{K}{PropertyHandle:operator-=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-=\tab -  Subtract and
 assign result to first operator\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator-= (con
st PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator returns the differen
ce of the first and the second operator in the first operand.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (->
 operator-)\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the p
roperty handle that contains the result of an operation (usually
 the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Pr
opertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference t
o an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Devide proprties}}} 
{#{\footnote\plain{#}{con8ps..u}}} 
{K{\footnote\plain{K}{PropertyHandle:oper
ator/}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator/\tab -  Devide proprties\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle operator/ (cons
t PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The division operation is supporte
d for numerical data, only. If the second operand is not compati
ble with the first operand the function tries to convert the sec
ond operand into the type of the first operand. If no conversion
 is possible the operation fails. The operator devides the first
 operand by the second one. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result is returned in a property
 handle that is created temporarily. You can assign the result t
o another property handle or performing further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retur
n value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to a
n (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for
:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Divide and assign result to first operator}}} 
{#{\footnote\plain{#}{.bmcu
1}}} 
{K{\footnote\plain{K}{PropertyHandle:operator/=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator/=\tab -  Divide and assign result 
to first operator\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator/= (const PropertyHand
le &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator returns the result of a division in
 the first operand.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> operator/)\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property h
adle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the property handle that contains the result of
 an operation (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property 
Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare two property i
nstances (less)}}} 
{#{\footnote\plain{#}{.bmcts}}} 
{K{\footnote\plain{K}{PropertyHandle:operator<}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<\tab -  Compare
 two property instances (less)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator< (PropertyHandle
 &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator< (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operato
r< (int32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator< (double double_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  lo
gical operator< (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator< (dbtm time_v
al );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation compares the two operands and returns true (Y
ES) when the first operand is smaller than the second operand an
d false (NO) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function re
turns YES when the question was answered positivly. Otherwise it
 returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to
 an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminate
d string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is passed as plat
form independent 32-bit integer value.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 double_val\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - Date
 value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See a
lso class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time valu
e is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definitio
n for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare two property instances (less or equal)}}} 
{#{\footnote\plain{#}{.bmctt
}}} 
{K{\footnote\plain{K}{PropertyHandle:operator<=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<=\tab -  Compare two property insta
nces (less or equal)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator<= (PropertyHandle &prop_hd
l );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator<= (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator<= (int
32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator<= (dbtm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical oper
ator<= (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator<= (double double_val )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation compares the two operands and returns true (YES) 
when the first operand is smaller than or equal to the second op
erand and false (NO) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The fun
ction returns YES when the question was answered positivly. Othe
rwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a refe
rence to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defi
nition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-t
erminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is passed
 as platform independent 32-bit integer value.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time val
ue\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also 
class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is
 passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition fo
r:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 double_val\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Assign property instances}}} 
{#{\footnote\plain{#}{.bmctu}}} 
{K{\footnote\plain{K}{PropertyHandl
e:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  Assign property instances\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyHandle 
&operator= (const PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &o
perator= (int32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator= (double db
l_value );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator= (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyH
andle &operator= (dbtm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator= (in
t16 short_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator= (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  Prop
ertyHandle &operator= (logical logval );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &operato
r= (dttm datetime_val );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The assignment operator allows assigning
 values of property handles to each other. The way the operation
 is performed depends mainly on the first operand:\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 1. First opera
nd is (not opened)\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function copies the handle pointer from th
e second operand to the first operand.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> CopyHandle(property_ha
ndle))\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 2. Collection \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 When both, the first and the second operator
, are collections, the instances in the first collection are del
eted and the instances from the second collection are copied to 
the first collection. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 3. Instance or value\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 if the first operand r
efers to an instance or value the function converts the instance
 or value from the second operand into the instance of the first
 operand. If the second operand is a collection the selected ins
tance in this collection is copied. If no instance is selected i
n the second operand the function tries to select an instance in
 the second operand for performing the operation. Copying instan
ces is done by assigning all properties with the same name. Copy
ing values will perform automatic data conversion when necessary
. \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operand allows also assigning values to a property handle.
 In this case (second operand is a value and not a property hand
le) the first operand must refer to a value or instance. The val
ue is converted when necessary.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property had
le\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the property handle that contains the result of a
n operation (usually the calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class
 definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Ha
ndle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See al
so class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 T
he value is passed as platform independent 32-bit integer value.
\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbl_value\tab - Double value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is pas
sed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  
dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value is passed in the internal
 data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 short_val\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 stri
ng\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 logval\tab - L
ogical value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a logical (bool) value.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datetime_val\tab - Date-Time va
lue\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A date-time value or time point is passed in the internal dat
e-time format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare two pr
operty instances (equal)}}} 
{#{\footnote\plain{#}{.bmctv}}} 
{K{\footnote\plain{K}{PropertyHandle:operator==}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=
=\tab -  Compare two property instances (equal)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator== (c
onst PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator== (char *stri
ng );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator== (int32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator== (
double double_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator== (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logica
l operator== (dbtm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator== (PropertyHandl
e *property_handle );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation compares the two operands and
 returns true (YES) when the first operand is equal to then the 
second operand and false (NO) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return val
ue\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered positi
vly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handl
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also 
class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer 
to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value
 is passed as platform independent 32-bit integer value.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 double_v
al\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in the internal
 data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time 
value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See al
so class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 property_handle\tab - Pointer to a prop
erty handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a pointer to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare two propert
y instances (greater)}}} 
{#{\footnote\plain{#}{.bmctw}}} 
{K{\footnote\plain{K}{PropertyHandle:operator>}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>\tab -  C
ompare two property instances (greater)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator> (Prope
rtyHandle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator> (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logica
l operator> (int32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator> (double double_
val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator> (dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator> (db
tm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation compares the two operands and return
s true (YES) when the first operand is greater than the second o
perand and false (NO) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The fu
nction returns YES when the question was answered positivly. Oth
erwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a ref
erence to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class def
inition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-
terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is passe
d as platform independent 32-bit integer value.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 double_val\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_
val\tab - Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in the internal data for
mat.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
time value is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class 
definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Compare two property instances (greater or 
equal)}}} 
{#{\footnote\plain{#}{.bmctx}}} 
{K{\footnote\plain{K}{PropertyHandle:operator>=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>=\tab -  Compare two pr
operty instances (greater or equal)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator>= (Property
Handle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator>= (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical 
operator>= (int32 long_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator>= (double double_
val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator>= (dbtm time_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  logical operator>= (
dbdt date_val );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operation compares the two operands and retu
rns true (YES) when the first operand is equal to or greater tha
n the second operand and false (NO) otherwise.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Retu
rn value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered 
positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property 
Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See 
also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Poi
nter to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 long_val\tab - Integer value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
value is passed as platform independent 32-bit integer value.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dou
ble_val\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 time_val\tab - Time value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The time value is passed in the int
ernal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 date_val\tab - 
Date value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data value is passed in the internal data format.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Locate property instance}}} 
{#{\footnote\plain{#}{.bmct
y}}} 
{K{\footnote\plain{K}{PropertyHandle:operator[]}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator[]\tab -  Locate property instance\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
PropertyHandle &operator[] (int32 set_pos0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &op
erator[] (PropertyHandle &prop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  PropertyHandle &operator[]
 (void *skey );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator can be used to provide an instance i
nstead of the Provide() function.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> Provide())\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Res
ult property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the property handle that contains
 the result of an operation (usually the calling property handle
).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 set_po
s0\tab - Position in collection\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The position of an instance in a colle
ction depends on the selected index. if the collection is unsort
ed the position is the only way for accessing the instance. \par
For 
sorted collections the position is determined according to the i
nstance key. If thee is a contradiction between position and key
 value the position will be ignored. \par
Special positions are\par
\f4\cf4\fs20\b\i0\ul0 CUR_IN
STANCE\f2\cf2\fs20\b0\i0\ul0 \par
CUR_INSTANCE refers to the currently selected instance. If
 no instance is selected it refers to the first instance. \par
\pard\s0\ql\sb60\li1700\tx2130 \f4\cf4\fs20\b\i0\ul0 FIRST_
INSTANCE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the first instance in a col
lection according to the selected index (sort order).\par
\f4\cf4\fs20\b\i0\ul0 LAST_INSTAN
CE\f2\cf2\fs20\b0\i0\ul0 \par
FIRST_INSATNCE (0) refers to the last instance in a collection
 according to the selected index (sort order).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prop_hdl\tab - Property
 Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 skey\tab - Sort key\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key
 is provided in the internal key format. When necessary the key 
value can be converted from a string into the internal format us
ing the (.r pib.StringToKey*** ERROR : Chapter not found ***()) 
function. Regardles on the type key values are passed as (char *
) areas.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Exclusive OR operation}}} 
{#{\footnote\plain{#}{.bmctz}}} 
{K{\footnote\plain{K}{PropertyHandle:operator^}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 oper
ator^\tab -  Exclusive OR operation\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator^ (const Property
Handle &cprop_hdl ) const;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator returns true (YES) if exa
ctly one of the operands is true and NO otherwise.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> IsTrue())\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the quest
ion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cp
rop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened pr
operty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{OR o
peration (union set for collections)}}} 
{#{\footnote\plain{#}{con8ps._u}}} 
{K{\footnote\plain{K}{PropertyHandle:oper
ator|}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator|\tab -  OR operation (union set for collections)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  Proper
tyHandle operator| (PropertyHandle &prophdl_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The union oper
ation is supported for collections, only. It can be used instead
 of the Union() function (Union(operand1,operand2)).  \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The result
 is returned in a property handle that is created temporarily. Y
ou can assign the result to another property handle or performin
g further operations.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Refere
nce to Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually) opened prop
erty handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{OR ope
ration (union set for collections)}}} 
{#{\footnote\plain{#}{.bmcv1}}} 
{K{\footnote\plain{K}{PropertyHandle:operator|
=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator|=\tab -  OR operation (union set for collections)\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  PropertyH
andle &operator|= (PropertyHandle &prophdl_ref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator re
turns the result of a union operation in the first operand.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> o
perator|)\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Result property hadle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Reference to the pro
perty handle that contains the result of an operation (usually t
he calling property handle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Prop
ertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prophdl_ref\tab - Reference to Property handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is 
a reference to an (usually) opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also clas
s definition for:  PropertyHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Logical OR operation}}} 
{#{\footnote\plain{#}{.bmcus}}} 
{K{\footnote\plain{K}{Prope
rtyHandle:operator||}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator||\tab -  Logical OR operation\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical op
erator|| (const PropertyHandle &cprop_hdl );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The operator returns
 true (YES) if one of the operands is true and NO otherwise.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 (-> 
IsTrue())\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when
 the question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 cprop_hdl\tab - Property Handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Is a reference to an (usually)
 opened property handle.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Property
Handle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bmcuu}}} 
{K{\footnote\plain{K}{PropertyHandle:~PropertyHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~PropertyHan
dle\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~PropertyHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The
 function wil close the property handle and destroy the handle o
bject.\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmcux}}} 
{K{\footnote\plain{K}{PropertyHandle:CSConnection}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CSConnection\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmcuy}}} 
{K{\footnote\plain{K}{Prop
ertyHandle:pib}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 pib\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmcuv}}} 
{K{\footnote\plain{K}{PropertyHandle:dbf}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dbf\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmcuw}}} 
{K{\footnote\plain{K}{Property
Handle:prop_context}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 prop_context\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database Query Handle}}} 
{#{\footnote\plain{#}{.bmdvs}}} 
{K{\footnote\plain{K}{Que
ryHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 QueryHandle\tab -  Database Query Handle\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 DBQuery allows defini
ng database queries by means of an ODABA view definition. A data
base query usually re-trieves data from the database. It is, how
ever, also pos-sible to update data in the database. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 A database 
query may refer in different places to OD-ABA OQL expressions. O
DABA-OQL is an object query language with specific ODABA extensi
ons. \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 You may run a query against the complete database (global c
ontext) or in a reduced context (instance con-text). The context
 for running the query can be defined in the query. The result o
f the query can be printed to the console or directed to an outp
ut data source.\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ConnectDataSource\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Connect DBQ
uery to data source\par
\f2\cf2\fs20\b0\i0 ConnectServer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Connect to Database\par
\f2\cf2\fs20\b0\i0 Define\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Def
ine Database Query\par
\f2\cf2\fs20\b0\i0 DisconnectDataSource\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Disconnect data source\par
\f2\cf2\fs20\b0\i0 Di
sconnectServer\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Disconnect from database server\par
\f2\cf2\fs20\b0\i0 Execute\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Execute 
Query\par
\f2\cf2\fs20\b0\i0 QueryHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Constructor\par
\f2\cf2\fs20\b0\i0 Undefine\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Undefine database query\par
\f2\cf2\fs20\b0\i0 ~Q
ueryHandle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Destructor\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Connect DBQuery to data source}}} 
{#{\footnote\plain{#}{.bmdvt}}} 
{K{\footnote\plain{K}{QueryH
andle:ConnectDataSource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ConnectDataSource\tab -  Connect DBQuery to da
ta source\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 ConnectDataSource (char *data_source_name, PIACC
 access_mode=PI_Read, char *ini_file_w=NULL, char *user_name, ch
ar *password_w=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int32 ConnectDataSource (int32 data_sourc
e_id );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function allows connection the DBQuery to a data sour
ce. DBQuery allows only one connection at the time. When connect
ing to another data source the currently connected data source i
s diconnected before.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data source connection identi
fier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source connection identifier is a number that allow
s refering to a data source connection established in another se
ssion.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 data_source_name\tab - Data source name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data sourc
e name is passed as 0-terminated string with a maximum length of
 40 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 access_mode\tab - Access mode\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The access option defines
 the way instances in a property handle are to be accessed (read
, update, write).\par
Default: PI_Read\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ini_file_w\tab - Ini-file for data s
ource definitions\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The path for the ini-file is passed as 0-termin
ted string with a maximum size of 256 characters.\par
The ini-file de
fines the data sources for the databases and specific query para
meters. More details on how to define the ini-file you can find 
in "INI-file for DBQuery" in "Database Utilities".\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 user_name\tab - Use
r name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 When accessing user protected resources as databases or wo
rkspaces, a user  must be passed as 0-terminated string, otherwi
se NULL.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 password_w\tab - Password\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The password is passed as 0-terminte
d string with a maximum size of 16 characters.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 data_source_id\tab - Da
ta source connection identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source connection identi
fier is a number that allows refering to a data source connectio
n established in another session.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Connect to Database}}} 
{#{\footnote\plain{#}{.bmdvu}}} 
{K{\footnote\plain{K}{QueryH
andle:ConnectServer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ConnectServer\tab -  Connect to Database\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 Con
nectServer (char *server_name, int32 port_number );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  int32 Connec
tServer (int32 connect_id );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 To run queries in Client/Server mode
 the DBQuery object must connect to the database. Connect is not
 required when running in local mode.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Server connec
tion identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The server connection identifier is a number that
 allows refering to a server connection established in another s
ession.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 server_name\tab - Server name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The server name consist
s of the port number and the server identification. Both has bee
n defined when starting up the server (e.g.6123@MetaServer). \par
If 
no server string is passed the client expects the server name in
 an environment variable ODABA_SERVER or in an odaba.ini-File on
 the ODABA installation folder.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 port_number\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 connect_id\tab - Server c
onnection identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The server connection identifier is a number
 that allows refering to a server connection established in anot
her session.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Define Database Query}}} 
{#{\footnote\plain{#}{.bmdvv}}} 
{K{\footnote\plain{K}{QueryHandle:Define}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Define\tab -
  Define Database Query\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 Define (char *view_definition );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Da
tabase queries can be defined in advance for running the query s
everal times. The query definition may contain place holders tha
t can be replaced with updated values each time when executing t
he query. You may define any number of queries.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Que
ry identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The query identifier is a number that is used to re
fer to the query when executing or undeleting the query.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Paramete
rs\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 view_definition\tab - View definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The view definition refers to 
a string area that contains several directives for the view defi
nition. The detailed syntax of the view definition is described 
in "Database Utilities - View definition".\par
The view definition ma
y contain placeholders for variables or part of variables. Place
holders are names enclosed in %\'85% (e.g. %parm1%). Placeholders w
ill be replaced at run-time with the variables passes as paramet
er in the parameter string. Placeholders are case sensitive.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Disc
onnect data source}}} 
{#{\footnote\plain{#}{.bmdvw}}} 
{K{\footnote\plain{K}{QueryHandle:DisconnectDataSource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Disconne
ctDataSource\tab -  Disconnect data source\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical DisconnectDataSour
ce (int32 data_source_id );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function disconnects the DBQuery 
from the data source. The data source is kept open on the server
 side for the next 15 minutes. Before running queries again DBQu
ery must connect to the data source again.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Terminat
ion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In ca
se of normal termination the value is NO. When the function retu
rns YES more detailed error information are available in the err
or object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 data_source_id\tab - Data source connection ident
ifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source connection identifier is a number that allo
ws refering to a data source connection established in another s
ession.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Disconnect from database server}}} 
{#{\footnote\plain{#}{.bmdvx}}} 
{K{\footnote\plain{K}{QueryHandle:Disconne
ctServer}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 DisconnectServer\tab -  Disconnect from database server\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void 
DisconnectServer (int32 connect_id );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 Disconnecting DBQuery from 
the server will disconnect the data source before (when being op
ened). After disconnecting you may use the connection identifier
 to re-connect to the server again.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination cod
e\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of n
ormal termination the value is NO. When the function returns YES
 more detailed error information are available in the error obje
ct.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 connect_id\tab - Server connection identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The server 
connection identifier is a number that allows refering to a serv
er connection established in another session.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Execute Query}}} 
{#{\footnote\plain{#}{.bmdvy
}}} 
{K{\footnote\plain{K}{QueryHandle:Execute}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Execute\tab -  Execute Query\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *Execute (int32 
query_id, char *parm_string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  char *Execute (char *view_definit
ion );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function executes a pre-defined aor an ad-hok database
 query. The result is returned in area as defined in the query d
efinition. The area is administrated by DBQuery and will be remo
ved automatically when running the next query.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Resu
lt area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The result area is passed as 0-terminates string containi
ng the data for the query result. Rows are separated by the defi
ned line separator, columns/fields by the defined field separato
r.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 query_id\tab - Query identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The query identifier is a 
number that is used to refer to the query when executing or unde
leting the query.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 parm_string\tab - Parameter string\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The parameter stri
ng is passed as 0-terminated string and contains the parameters 
according to the conventions of the action called.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 view_definitio
n\tab - View definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The view definition refers to a string area th
at contains several directives for the view definition. The deta
iled syntax of the view definition is described in "Database Uti
lities - View definition".\par
The view definition may contain placeh
olders for variables or part of variables. Placeholders are name
s enclosed in %\'85% (e.g. %parm1%). Placeholders will be replaced 
at run-time with the variables passes as parameter in the parame
ter string. Placeholders are case sensitive.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Constructor}}} 
{#{\footnote\plain{#}{.bmdvz}}} 
{K{\footnote\plain{K}{Que
ryHandle:QueryHandle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 QueryHandle\tab -  Constructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                    
      QueryHandle ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Undefine database query}}} 
{#{\footnote\plain{#}{IDH1zud23}}} 
{K{\footnote\plain{K}{QueryHandl
e:Undefine}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Undefine\tab -  Undefine database query\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Undefine (i
nt32 query_id );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The function removes a previously defined databa
se query from the list. Afterwards the query identifier vcannot 
be used any more for executing the queries.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termina
tion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In c
ase of normal termination the value is NO. When the function ret
urns YES more detailed error information are available in the er
ror object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 query_id\tab - Query identifier\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The query identif
ier is a number that is used to refer to the query when executin
g or undeleting the query.\par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Destructor}}} 
{#{\footnote\plain{#}{.bmdn1}}} 
{K{\footnote\plain{K}{QueryHandle:~QueryHand
le}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~QueryHandle\tab -  Destructor\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~QueryHandle
 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdp1}}} 
{K{\footnote\plain{K}{SDB_AT}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_AT\tab -  \par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 AT_NONE\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_ODABA\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_CODE\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_B
IN\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_EXTERN\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_ODBC\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_OEL\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_ESDF\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_VIEW\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 AT_unknown\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.b
mdpt}}} 
{K{\footnote\plain{K}{SDB_Attribute}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Attribute\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Property\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Pr
operties\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdpy}}} 
{K{\footnote\plain{K}{SDB_Attribute:SDB_Property}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Property\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_Property\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdpz}}} 
{K{\footnote\plain{K}{SDB_BaseStruct
}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_BaseStruct\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdry}}} 
{K{\footnote\plain{K}{SDB_Ext
end}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Extend\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Reference\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 controll
ed\strike0\ul0 \tab - \par
intersect\strike0\ul0 \tab - \par
union_set\strike0\ul0 \tab - \par
disjunct\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 sexbase\strike0\ul0 \tab - \par
sexderi\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 P
rovideStrRoot\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdst}}} 
{K{\footnote\plain{K}{SDB_Extend:ProvideStrRoot}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ProvideStrRoot\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 R
eturn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function re
turns an error. In case of normal termination the value is NO. W
hen the function returns YES more detailed error information are
 available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle\tab - Pointer to da
tabase handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer to an opened database handle. The d
atabase handle can be an opened database handle DatabaseHandle a
s well as an opened dictionary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See als
o class definition for:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strname\tab - Type name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The typ
e name is passed as 0-terminated string or as buffer with maximu
m 40 characters filled with trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdsy}}} 
{K{\footnote\plain{K}{SDB_Extend:SDB
_Reference}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Reference\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_Re
ference\strike0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdsu}}} 
{K{\footnote\plain{K}{SDB_Extend:controlled}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 controlled\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdsv}}} 
{K{\footnote\plain{K}{SDB_Extend:
intersect}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 intersect\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdsw}}} 
{K{\footnote\plain{K}{SDB_Extend:union_set}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 union_set\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmds
x}}} 
{K{\footnote\plain{K}{SDB_Extend:disjunct}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 disjunct\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdsz}}} 
{K{\footnote\plain{K}{SDB_Extend:sexbase}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sexbase\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_Extend\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{con8ps_.u}}} 
{K{\footnote\plain{K}{SDB_Extend:s
exderi}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sexderi\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_Extend\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdtv
}}} 
{K{\footnote\plain{K}{SDB_GenType}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_GenType\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 id8\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdtw}}} 
{K{\footnote\plain{K}{SDB_GenTy
pe:id8}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 id8\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdtx}}} 
{K{\footnote\plain{K}{SDB_Index}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Index\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 skdname\strike0\ul0 \tab - \par
skdtyp
e\strike0\ul0 \tab - \par
skdunique\strike0\ul0 \tab - \par
skdtemp\strike0\ul0 \tab - \par
no_empty\strike0\ul0 \tab - \par
skdmax\strike0\ul0 \tab - \par
compare\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Store
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdv1}}} 
{K{\footnote\plain{K}{SDB_Index:Store}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Store\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 value is YES if the function returns an error. In case of norma
l termination the value is NO. When the function returns YES mor
e detailed error information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 P
arameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbidxdef\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdus}}} 
{K{\footnote\plain{K}{SDB_Index:skdname}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 skdname\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdut}}} 
{K{\footnote\plain{K}{SDB_In
dex:skdtype}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 skdtype\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_SET\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmd
uu}}} 
{K{\footnote\plain{K}{SDB_Index:skdunique}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 skdunique\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmduv}}} 
{K{\footnote\plain{K}{SDB_Index:skdtemp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 skdtemp\tab -
  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmdux}}} 
{K{\footnote\plain{K}{SDB_Index:no_empty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 no_empty\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmduy}}} 
{K{\footnote\plain{K}{SDB_Index:skdmax}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 skdma
x\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmduz}}} 
{K{\footnote\plain{K}{SDB_Index:compare}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 compare\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmew1}}} 
{K{\footnote\plain{K}{SDB_Key}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Key\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base
 Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Resource\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 components\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmevx}}} 
{K{\footnote\plain{K}{SD
B_Key:SDB_Resource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Resource\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmevy}}} 
{K{\footnote\plain{K}{SDB_Key:components}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 compone
nts\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_KeyComponent\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{IDH1zue23}}} 
{K{\footnote\plain{K}{S
DB_KeyComponent}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_KeyComponent\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 member_path\strike0\ul0 \tab - \par
ignore_
case\strike0\ul0 \tab - \par
descending\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Store\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmems}}} 
{K{\footnote\plain{K}{SDB_KeyComponent:Store}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 St
ore\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the func
tion returns an error. In case of normal termination the value i
s NO. When the function returns YES more detailed error informat
ion are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fmcbptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmemt}}} 
{K{\footnote\plain{K}{S
DB_KeyComponent:member_path}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 member_path\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmemu}}} 
{K{\footnote\plain{K}{SDB_KeyComponent:
ignore_case}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ignore_case\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmemv}}} 
{K{\footnote\plain{K}{SDB_KeyComponent:descending}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 descen
ding\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmemw}}} 
{K{\footnote\plain{K}{SDB_Member}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Member\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Resource\strike0\ul0 \tab -
 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 res_id\strike0\ul0 \tab - \par
ddetype\strike0\ul0 \tab - \par
ddesize\strike0\ul0 \tab - \par
ddedim\strike0\ul0 \tab - \par
ddeprec\strike0\ul0 \tab - \par
reference_
level\strike0\ul0 \tab - \par
ddegent\strike0\ul0 \tab - \par
ddestat\strike0\ul0 \tab - \par
ddeprv\strike0\ul0 \tab - \par
ddevirt\strike0\ul0 \tab - \par
ddeinit\strike0\ul0 \tab - \par
clustered_tab
le\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 BitSize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsAttrToBeAligned\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmemx}}} 
{K{\footnote\plain{K}{SDB_Member:BitSiz
e}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 BitSize\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhandle\tab - Pointer to database
 handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer to an opened database handle. The databas
e handle can be an opened database handle DatabaseHandle as well
 as an opened dictionary handle (DictionaryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also clas
s definition for:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 bitstring\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bmeot}}} 
{K{\footnote\plain{K}{SDB_Member:IsA
ttrToBeAligned}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsAttrToBeAligned\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbhand
le\tab - Pointer to database handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 This is pointer to an opened datab
ase handle. The database handle can be an opened database handle
 DatabaseHandle as well as an opened dictionary handle (Dictiona
ryHandle).\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DatabaseHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmes1}}} 
{K{\footnote\plain{K}{SD
B_Member:SDB_Resource}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Resource\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmepw}}} 
{K{\footnote\plain{K}{SDB_Member:res_id}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 res_i
d\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmepx}}} 
{K{\footnote\plain{K}{SDB_Member:ddetype}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddetype\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmepy}}} 
{K{\footnote\plain{K}{SDB_Member:ddesize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dd
esize\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmepz}}} 
{K{\footnote\plain{K}{SDB_Member:ddedim}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddedim\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{ID_7gal95}}} 
{K{\footnote\plain{K}{SDB_Member:ddep
rec}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddeprec\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmer1}}} 
{K{\footnote\plain{K}{SDB_Member:reference_level}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 reference_level\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 S
ee also class definition for:  SDB_RLEV\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmeqs}}} 
{K{\footnote\plain{K}{SDB_Member:ddegent}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 d
degent\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeqt}}} 
{K{\footnote\plain{K}{SDB_Member:ddestat}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddestat\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmequ}}} 
{K{\footnote\plain{K}{SDB_Member:ddep
rv}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddeprv\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeqv}}} 
{K{\footnote\plain{K}{SDB_Member:ddevirt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddevirt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeqw}}} 
{K{\footnote\plain{K}{SDB_Member:dd
einit}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddeinit\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeqx}}} 
{K{\footnote\plain{K}{SDB_Member:clustered_table}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 clustered_table\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmerw}}} 
{K{\footnote\plain{K}{SDB_ODABA_Str}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_ODABA_Str\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Structure
\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 clustered\strike0\ul0 \tab - \par
sb_number\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 smceextd\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmesu}}} 
{K{\footnote\plain{K}{SDB_O
DABA_Str:SDB_Structure}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Structure\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  SDB_Structure\strike0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmerz}}} 
{K{\footnote\plain{K}{SDB_ODABA_Str:clustered}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 clustered\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bme
st}}} 
{K{\footnote\plain{K}{SDB_ODABA_Str:sb_number}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sb_number\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmesv}}} 
{K{\footnote\plain{K}{SDB_ODABA_Str:smceext
d}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smceextd\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_Extend\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmets}}} 
{K{\footnote\plain{K}{SDB_
Property}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Property\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Member\strike0\ul0 \tab - \par
CAU_Causality\strike0\ul0 \tab -
 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ddetrans\strike0\ul0 \tab - \par
ddekdef\strike0\ul0 \tab - \par
version\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetAlignInfo\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 St
ore\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmetw}}} 
{K{\footnote\plain{K}{SDB_Property:GetAlignInfo}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetAlignInfo\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an err
or. In case of normal termination the value is NO. When the func
tion returns YES more detailed error information are available i
n the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 propname\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 size_info\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 offset_info\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{I
D_7gal_5}}} 
{K{\footnote\plain{K}{SDB_Property:Store}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Store\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case of no
rmal termination the value is NO. When the function returns YES 
more detailed error information are available in the error objec
t.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbflddef\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeuw}}} 
{K{\footnote\plain{K}{SDB_Property:SDB_Member}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Member\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_Member\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmeux}}} 
{K{\footnote\plain{K}{SDB_Property:CAU
_Causality}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_Causality\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeut}}} 
{K{\footnote\plain{K}{SDB_Property:ddetrans}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddetrans\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeuu}}} 
{K{\footnote\plain{K}{SDB_Property:ddekdef}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddekdef\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeuv}}} 
{K{\footnote\plain{K}{SDB_Property:version}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ve
rsion\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmeuy}}} 
{K{\footnote\plain{K}{SDB_RLEV}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_RLEV\tab -  \par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 RL_direct\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RL_generic\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RL
_1\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RL_reference\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RL_2\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 RL_3\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfvv}}} 
{K{\footnote\plain{K}{SDB_Reference}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Reference\tab - 
 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Property\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 owning\strike0\ul0 \tab - \par
unique\strike0\ul0 \tab - \par
clustere
d\strike0\ul0 \tab - \par
mb_number\strike0\ul0 \tab - \par
week_typed\strike0\ul0 \tab - \par
update\strike0\ul0 \tab - \par
multikey\strike0\ul0 \tab - \par
ddeatyp\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Ge
tAlignInfo\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfvy}}} 
{K{\footnote\plain{K}{SDB_Reference:GetAlignInfo}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetAlignInfo\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retur
n value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function return
s an error. In case of normal termination the value is NO. When 
the function returns YES more detailed error information are ava
ilable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 propname\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 size_info\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 offset
_info\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfnu}}} 
{K{\footnote\plain{K}{SDB_Reference:SDB_Property}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Property\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  SDB_Property\strike0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfmw}}} 
{K{\footnote\plain{K}{SDB_Reference:owning}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 owni
ng\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfmx}}} 
{K{\footnote\plain{K}{SDB_Reference:unique}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 unique\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfmy}}} 
{K{\footnote\plain{K}{SDB_Reference:clus
tered}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 clustered\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfmz}}} 
{K{\footnote\plain{K}{SDB_Reference:mb_number}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 mb_number\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{ID_7ga
m65}}} 
{K{\footnote\plain{K}{SDB_Reference:week_typed}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 week_typed\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfo1}}} 
{K{\footnote\plain{K}{SDB_Reference:upda
te}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 update\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfns}}} 
{K{\footnote\plain{K}{SDB_Reference:multikey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 multikey\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfnt}}} 
{K{\footnote\plain{K}{SDB_Refe
rence:ddeatyp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddeatyp\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_AT\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bm
fnw}}} 
{K{\footnote\plain{K}{SDB_Relationship}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Relationship\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Referen
ce\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 ddesecr\strike0\ul0 \tab - \par
ddeinv\strike0\ul0 \tab - \par
depend\strike0\ul0 \tab - \par
ddeext\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfoz}}} 
{K{\footnote\plain{K}{SD
B_Relationship:SDB_Reference}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Reference\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class defin
ition for:  SDB_Reference\strike0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfou}}} 
{K{\footnote\plain{K}{SDB_Relationship:ddesecr}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddesecr\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfow}}} 
{K{\footnote\plain{K}{SDB_Relationship:ddeinv}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddeinv\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfox}}} 
{K{\footnote\plain{K}{SDB_Relationship:de
pend}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 depend\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfoy}}} 
{K{\footnote\plain{K}{SDB_Relationship:ddeext}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ddeext\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfpw}}} 
{K{\footnote\plain{K}{SDB_SET
}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_SET\tab -  \par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 SET_LARGE\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SET_SMALL\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure types}}} 
{#{\footnote\plain{#}{.bmfpz}}} 
{K{\footnote\plain{K}{SDB_S
T}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_ST\tab -  Structure types\par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 Depending on the way of usage ODABA dif
fers between a number of structure types. In some cases those ty
pes refer to specialisations of structure definitions (as for vi
ew structures), in others they do not. This enumeration provides
 a more detailled classification of structures. For completeness
 reasons, it contains entries for code sets and basic types, wic
h are actually not structures.\par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 ST_USER\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Application structu
res\par
\f2\cf2\fs20\b0\i0 ST_KEY\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Key structure\par
\f2\cf2\fs20\b0\i0 ST_BASE\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Basic type\par
\f2\cf2\fs20\b0\i0 ST_SYS\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 System Struct
ure Definitions\par
\f2\cf2\fs20\b0\i0 ST_CODE\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Enumeration\par
\f2\cf2\fs20\b0\i0 ST_VIEW\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 View structure\par
\f2\cf2\fs20\b0\i0 ST_CLA
SS\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Class Structure\par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfqy}}} 
{K{\footnote\plain{K}{SDB_Structure}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Structure\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Struc
tures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Type\strike0\ul0 \tab - \par
CAU_Causality\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 res_id\strike0\ul0 \tab - \par
smcestyp\strike0\ul0 \tab - \par
smceik
sm\strike0\ul0 \tab - \par
modified\strike0\ul0 \tab - \par
checked\strike0\ul0 \tab - \par
ready\strike0\ul0 \tab - \par
version\strike0\ul0 \tab - \par
local\strike0\ul0 \tab - \par
vf_opt\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 members\strike0\ul0 \tab - \par
s
mceodaba\strike0\ul0 \tab - \par
smceclas\strike0\ul0 \tab - \par
ctx_ressource\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SetModified\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetRead
y\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfsu}}} 
{K{\footnote\plain{K}{SDB_Structure:SetModified}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetModified\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Te
rmination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error.
 In case of normal termination the value is NO. When the functio
n returns YES more detailed error information are available in t
he error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 check\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 mod_level\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bmfsw}}} 
{K{\footnote\plain{K}{SDB_Structure:
SetReady}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetReady\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YE
S if the function returns an error. In case of normal terminatio
n the value is NO. When the function returns YES more detailed e
rror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{IDH1zuf13}}} 
{K{\footnote\plain{K}{SDB_
Structure:SDB_Type}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Type\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB
_Type\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmgw1}}} 
{K{\footnote\plain{K}{SDB_Structure:CAU_Causality}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CAU_Causality\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmftv}}} 
{K{\footnote\plain{K}{SDB_
Structure:res_id}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 res_id\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmftw}}} 
{K{\footnote\plain{K}{SDB_Structure:smcestyp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcestyp\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_ST\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmftx}}} 
{K{\footnote\plain{K}{SDB_Structure:smceik
sm}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smceiksm\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfty}}} 
{K{\footnote\plain{K}{SDB_Structure:modified}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 modified\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmftz}}} 
{K{\footnote\plain{K}{SDB_St
ructure:checked}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 checked\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{ID_7gam_5}}} 
{K{\footnote\plain{K}{SDB_Structure:ready}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ready\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bm
fv1}}} 
{K{\footnote\plain{K}{SDB_Structure:version}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 version\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfus}}} 
{K{\footnote\plain{K}{SDB_Structure:local}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 local
\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmfut}}} 
{K{\footnote\plain{K}{SDB_Structure:vf_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 vf_opt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgvs}}} 
{K{\footnote\plain{K}{SDB_Structure:member
s}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 members\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_Member\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmgvy}}} 
{K{\footnote\plain{K}{SDB_S
tructure:smceodaba}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smceodaba\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SD
B_ODABA_Str\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmgvz}}} 
{K{\footnote\plain{K}{SDB_Structure:smceclas}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smceclas\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class
 definition for:  SDB_Structure\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bmgms}}} 
{K{\footnote\plain{K}{SDB_Structure:ctx_ressource
}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ctx_ressource\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgmu}}} 
{K{\footnote\plain{K}{SDB_Type}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_Type\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Base Structures\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 SDB_Reso
urceN\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 typetype\strike0\ul0 \tab - \par
itype\strike0\ul0 \tab - \par
access_type\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 impl_ref\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functio
ns\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetAlignInfo\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgmz}}} 
{K{\footnote\plain{K}{SDB_Type:GetAlignInfo}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetAlignInfo\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns
 an error. In case of normal termination the value is NO. When t
he function returns YES more detailed error information are avai
lable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 strname\tab - Type name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The type n
ame is passed as 0-terminated string or as buffer with maximum 4
0 characters filled with trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 propname\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 size_info\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 of
fset_info\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{ID_7gan75}}} 
{K{\footnote\plain{K}{SDB_Type:SDB_ResourceN}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SDB_ResourceN\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgnx
}}} 
{K{\footnote\plain{K}{SDB_Type:typetype}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 typetype\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgny}}} 
{K{\footnote\plain{K}{SDB_Type:itype}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 itype\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgnz}}} 
{K{\footnote\plain{K}{SD
B_Type:access_type}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 access_type\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  
SDB_AT\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgp1}}} 
{K{\footnote\plain{K}{SDB_Type:impl_ref}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 impl_ref\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definitio
n for:  SDB_Type\strike0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgru}}} 
{K{\footnote\plain{K}{TYP_TYPES}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 TYP_TYPES\tab -  \par
\pard\s0\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\tx2270 \f3\cf3\fs24\b\i0\ul0 Values\par
\pard\s0\ql\sb60\li4250\fi-3380\tx3970 \f2\cf2\fs20\b0\i0 TYP_undefined\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 TYP_Base\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 TYP_Structure\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 TYP_Codeset\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 TYP_Problem\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 TYP_Object\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3970 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.
bmgtz}}} 
{K{\footnote\plain{K}{UtilityHandle}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 UtilityHandle\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 sdbuname\strike0\ul0 \tab - \par
sdbutitle\strike0\ul0 \tab -
 \par
sdbusys\strike0\ul0 \tab - \par
sdbures\strike0\ul0 \tab - \par
sdbudat\strike0\ul0 \tab - \par
sdbuprn\strike0\ul0 \tab - \par
sdbuppth\strike0\ul0 \tab - \par
sdburepl\strike0\ul0 \tab - \par
sdbuins
tonly\strike0\ul0 \tab - \par
sdbutype\strike0\ul0 \tab - \par
sdbuosys\strike0\ul0 \tab - \par
sdbuores\strike0\ul0 \tab - \par
sdbuodat\strike0\ul0 \tab - \par
sdbuorep\strike0\ul0 \tab - \par
sdbuoin
s\strike0\ul0 \tab - \par
sdbuoprn\strike0\ul0 \tab - \par
sdbuotyp\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 CloseDAT\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 CloseDataSource1\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 Neve
rCalled\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 OpenDAT\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 OpenDataSource1\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 OpenRES\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 OpenSYS\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ~UtilityHan
dle\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgv1}}} 
{K{\footnote\plain{K}{UtilityHandle:CloseDAT}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CloseDAT\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CloseDAT ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function
 returns an error. In case of normal termination the value is NO
. When the function returns YES more detailed error information 
are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bmgus}}} 
{K{\footnote\plain{K}{UtilityHandle:CloseDataS
ource1}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CloseDataSource1\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CloseDataSource1 ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an
 error. In case of normal termination the value is NO. When the 
function returns YES more detailed error information are availab
le in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhvs}}} 
{K{\footnote\plain{K}{UtilityHandle:NeverCalled}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 NeverCalle
d\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void NeverCalled ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhvt}}} 
{K{\footnote\plain{K}{UtilityHandle:OpenDAT}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenDAT\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
DataSourceHandle *OpenDAT (PIACC accopt, logical netopt, logical
 sysappl=NO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data source handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source ha
ndle contains definitions for external and internal resources (r
esource names and opened resource handles)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  DataSourceHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 accopt\tab - Access option\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The acc
ess option defines the way instances in a property handle are to
 be accessed (read, update, write).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 netopt\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 sysappl\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnhvu}}} 
{K{\footnote\plain{K}{Utilit
yHandle:OpenDataSource1}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenDataSource1\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical OpenDataSource
1 (char *dbname );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES
 if the function returns an error. In case of normal termination
 the value is NO. When the function returns YES more detailed er
ror information are available in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbna
me\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnhvw}}} 
{K{\footnote\plain{K}{UtilityHandle:OpenRES}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenRES\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DataSourceHandle *Open
RES ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data source handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data source handle c
ontains definitions for external and internal resources (resourc
e names and opened resource handles)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition fo
r:  DataSourceHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhvx}}} 
{K{\footnote\plain{K}{UtilityHandle:OpenSYS}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 OpenSYS\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DataSo
urceHandle *OpenSYS ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Data source handle\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The data
 source handle contains definitions for external and internal re
sources (resource names and opened resource handles)\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  DataSourceHandle\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhmv}}} 
{K{\footnote\plain{K}{UtilityHandle:~Utility
Handle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ~UtilityHandle\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          ~UtilityHandle (
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhmw}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuname}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuname\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhmx}}} 
{K{\footnote\plain{K}{UtilityHandle:sd
butitle}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbutitle\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhmy}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbusys}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbusys\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also
 class definition for:  DataSourceHandle\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bnhmz}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbu
res}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbures\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  DataSourceHandle\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{con
8pta6u}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbudat}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbudat\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition f
or:  DataSourceHandle\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bnho1}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuprn}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuprn\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhns
}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuppth}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuppth\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhnt}}} 
{K{\footnote\plain{K}{UtilityHandle:sdburepl}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdb
urepl\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PIREPL\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{.bnhnu}}} 
{K{\footnote\plain{K}{UtilityHandl
e:sdbuinstonly}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuinstonly\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhnv}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbutype}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbutyp
e\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhnx}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuosys}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuosys\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhny}}} 
{K{\footnote\plain{K}{UtilityHandle:s
dbuores}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuores\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhnz}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuodat}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuodat\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pta
7u}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuorep}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuorep\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhp1}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuoins}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 s
dbuoins\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhos}}} 
{K{\footnote\plain{K}{UtilityHandle:sdbuoprn}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuoprn\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhot}}} 
{K{\footnote\plain{K}{UtilityHa
ndle:sdbuotyp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sdbuotyp\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhtw}}} 
{K{\footnote\plain{K}{dbdt}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 dbdt\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 dbdtdate\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Fun
ctions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 GetDay\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetDayMonthYear\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetDecade\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetLongInt\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetMonth\strike0\ul0 \tab - 
\f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetYear\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsEmpty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 MinusMonth\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 PlusMonth\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetDate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 dbdt\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator
!=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator+\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator+=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator-\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator-=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator<\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ope
rator<=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator==\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator>\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator>=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhty}}} 
{K{\footnote\plain{K}{dbd
t:GetDay}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDay\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetDay ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhtz}}} 
{K{\footnote\plain{K}{dbdt:Get
DayMonthYear}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDayMonthYear\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void GetDayMonthYear (uint16 *day
_ptr, uint16 *month_ptr, uint16 *year_ptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 day_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 m
onth_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 year_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{con8pta_u}}} 
{K{\footnote\plain{K}{dbdt:GetDecade}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDecade\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 G
etDecade ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhv1}}} 
{K{\footnote\plain{K}{dbdt:GetLongInt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetLongInt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  in
t32 GetLongInt ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhus}}} 
{K{\footnote\plain{K}{dbdt:GetMonth}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetMonth\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
uint16 GetMonth ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhuu}}} 
{K{\footnote\plain{K}{dbdt:GetYear}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetYear\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  u
int16 GetYear ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhuv}}} 
{K{\footnote\plain{K}{dbdt:IsEmpty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEmpty\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  log
ical IsEmpty ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns 
YES when the question was answered positivly. Otherwise it retur
ns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnhuw}}} 
{K{\footnote\plain{K}{dbdt:MinusMonth}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 MinusMonth\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt &MinusMonth (uint1
6 month_count );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  db
dt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 month_count\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnhux}}} 
{K{\footnote\plain{K}{dbdt:PlusMonth}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 PlusMonth\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt &
PlusMonth (uint16 month_count );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class def
inition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 month_count\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnhuy}}} 
{K{\footnote\plain{K}{dbdt:SetDate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetDa
te\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt &SetDate ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{IDH1zvh13}}} 
{K{\footnote\plain{K}{dbdt:dbdt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dbdt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
                        dbdt (int32 datval=0 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                  
        dbdt (uint16 day, uint16 month, uint16 year );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 datval\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 day\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 month\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 year\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmt9}}} 
{K{\footnote\plain{K}{dbdt:operator!=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator!=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
logical operator!= (dbdt dbdate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
function returns YES when the question was answered positivly. O
therwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definiti
on for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmt0}}} 
{K{\footnote\plain{K}{dbdt:operator+}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator+\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt operator+ 
(int32 days );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt
\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 days\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{cngfa5mv}}} 
{K{\footnote\plain{K}{dbdt:operator+=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator+=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt operat
or+= (int32 days );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for: 
 dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 days\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmt.}}} 
{K{\footnote\plain{K}{dbdt:operator-}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt op
erator- (int32 days );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition fo
r:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 days\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmt_}}} 
{K{\footnote\plain{K}{dbdt:operator-=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  db
dt operator-= (int32 days );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 days\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{cngfa5my}}} 
{K{\footnote\plain{K}{dbdt:operator<}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator< (dbdt dbdate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The 
function returns YES when the question was answered positivly. O
therwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definiti
on for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{cngfa5mz}}} 
{K{\footnote\plain{K}{dbdt:operator<=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operat
or<= (dbdt dbdate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function retur
ns YES when the question was answered positivly. Otherwise it re
turns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{C
_df35b}}} 
{K{\footnote\plain{K}{dbdt:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt operator= (int32 days );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  d
bdt operator= (char *string );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defin
ition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 days\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to th
e 0-terminated string area.\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmka}}} 
{K{\footnote\plain{K}{dbdt:operator==}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator==\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator== (dbdt dbdate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The
 function returns YES when the question was answered positivly. 
Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmk8}}} 
{K{\footnote\plain{K}{dbdt:operator>}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operat
or> (dbdt dbdate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function return
s YES when the question was answered positivly. Otherwise it ret
urns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{In
d2.nmk9}}} 
{K{\footnote\plain{K}{dbdt:operator>=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator>= (dbdt dbd
ate );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when th
e question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmk0}}} 
{K{\footnote\plain{K}{dbdt:d
bdtdate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dbdtdate\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmk.}}} 
{K{\footnote\plain{K}{dbtm}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 dbtm\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 dbtmtime\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functi
ons\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Clear\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetHourMinSec\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetLongInt\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsEmpty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetTime\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 dbtm\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ope
rator!=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator+\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator+=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator-\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator-=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator<
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator<=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator==\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator>\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator>=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2
.nmk_}}} 
{K{\footnote\plain{K}{dbtm:Clear}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Clear\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void Clear ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt86t}}} 
{K{\footnote\plain{K}{dbtm:GetHourMinS
ec}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetHourMinSec\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void GetHourMinSec (uint16 *hours_ptr, uint16
 *minutes_ptr, uint16 *seconds_ptr, uint16 *hseconds_ptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Param
eters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hours_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 minutes_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 seconds_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hseconds_ptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{con8pt86
u}}} 
{K{\footnote\plain{K}{dbtm:GetLongInt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetLongInt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetLongInt ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab -
 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmla}}} 
{K{\footnote\plain{K}{dbtm:IsEmpty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEmpty\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsEmpty ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return valu
e\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was an
swered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nml8}}} 
{K{\footnote\plain{K}{dbtm:SetTime}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 S
etTime\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbtm &SetTime ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definit
ion for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nml0}}} 
{K{\footnote\plain{K}{dbtm:dbtm}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dbtm\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          
dbtm (int32 timval=AUTO );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          dbtm (uint16 
hours, uint16 minutes, uint16 seconds=UNDEF, uint16 hseconds=UND
F );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 timval\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hours\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 minutes\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 seconds\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hseconds\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{con8pt8
7p}}} 
{K{\footnote\plain{K}{dbtm:operator!=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator!=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator!= (dbtm dbtime )
;\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the que
stion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nml.}}} 
{K{\footnote\plain{K}{dbtm:operat
or+}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator+\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbtm operator+ (int32 hsec );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  dbtm operator+ (db
tm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hsec\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.n
ml_}}} 
{K{\footnote\plain{K}{dbtm:operator+=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator+=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbtm operator+= (int32 hsec );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  d
btm operator+= (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defin
ition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hsec\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definitio
n for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt87s}}} 
{K{\footnote\plain{K}{dbtm:operator-}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbtm operator- (
int32 hsec );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  dbtm operator- (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See al
so class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hsec\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also c
lass definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt87t}}} 
{K{\footnote\plain{K}{dbtm:operator-=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
dbtm operator-= (int32 hsec );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  dbtm operator-= (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hsec\tab - 
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt87u}}} 
{K{\footnote\plain{K}{dbtm:operat
or<}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator< (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - R
eturn value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answer
ed positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also
 class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmma}}} 
{K{\footnote\plain{K}{dbtm:operator<=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<=\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator<= (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e function returns YES when the question was answered positivly.
 Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class defini
tion for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmm8}}} 
{K{\footnote\plain{K}{dbtm:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbtm operator
= (int32 hsec );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  db
tm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 hsec\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmm9}}} 
{K{\footnote\plain{K}{dbtm:operator==}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator==\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical 
operator== (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function
 returns YES when the question was answered positivly. Otherwise
 it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for: 
 dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmm0}}} 
{K{\footnote\plain{K}{dbtm:operator>}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator> (dbtm
 dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES whe
n the question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 P
arameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt88p}}} 
{K{\footnote\plain{K}{db
tm:operator>=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator>= (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Ret
urn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the questio
n was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbti
me\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmm.}}} 
{K{\footnote\plain{K}{dbtm:dbtmtime}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 db
tmtime\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt88u}}} 
{K{\footnote\plain{K}{dttm}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 dttm\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 date\strike0\ul0 \tab - \par
time\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Clea
r\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetDate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetTime\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsEmpty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 Normalize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetCurDate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetCurTime\strike0\ul0 \tab -
 \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetCurrent\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetDate\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 SetTime\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 dttm\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator!=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator+=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ope
rator-\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator-=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator<\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 operator<=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator==\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator>
\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator>=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmna}}} 
{K{\footnote\plain{K}{dttm:Clear}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Clear\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &Clear ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmn9}}} 
{K{\footnote\plain{K}{dttm:GetDat
e}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDate\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbdt &GetDate ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Date\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmn0}}} 
{K{\footnote\plain{K}{dttm:Ge
tTime}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetTime\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dbtm &GetTime ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt89p}}} 
{K{\footnote\plain{K}{dttm:Is
Empty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsEmpty\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsEmpty ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Th
e function returns YES when the question was answered positivly.
 Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmn.}}} 
{K{\footnote\plain{K}{dttm:Normalize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Normalize\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dtt
m &Normalize ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  d
ttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmn_}}} 
{K{\footnote\plain{K}{dttm:SetCurDate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetCurDate\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &SetCurDate ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt89s}}} 
{K{\footnote\plain{K}{dttm:Se
tCurTime}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetCurTime\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &SetCurTime ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See als
o class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt89t}}} 
{K{\footnote\plain{K}{dttm:SetCurrent}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetCurrent\tab -
  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &SetCurrent ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition 
for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt89u}}} 
{K{\footnote\plain{K}{dttm:SetDate}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetDate\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &SetDate (dbdt db
date );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Paramet
ers\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmoa}}} 
{K{\footnote\plain{K}{dttm:Set
Time}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetTime\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &SetTime (dbtm dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See al
so class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class d
efinition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmo9}}} 
{K{\footnote\plain{K}{dttm:dttm}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 dttm\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                    
      dttm ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          dttm (dbdt dbdate, dbtm 
dbtime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdate\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dbdt\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbtime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See
 also class definition for:  dbtm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmo0}}} 
{K{\footnote\plain{K}{dttm:operator!=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operato
r!=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator!= (dttm dbdatetime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Retur
n value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered p
ositivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdatetime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also
 class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmo.}}} 
{K{\footnote\plain{K}{dttm:operator+=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator+=\tab - 
 \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &operator+= (uint32 duration );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also cla
ss definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 duration\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmo_}}} 
{K{\footnote\plain{K}{dttm:operat
or-}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint32 operator- (dttm dbdatetime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value
\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdatetime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8
pt80s}}} 
{K{\footnote\plain{K}{dttm:operator-=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator-=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  dttm &operator-= (uint32 durat
ion );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Paramete
rs\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 duration\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{con8pt80t}}} 
{K{\footnote\plain{K}{dttm:operator<}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator
< (dttm dbdatetime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function retu
rns YES when the question was answered positivly. Otherwise it r
eturns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdatetime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  
dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt80u}}} 
{K{\footnote\plain{K}{dttm:operator<=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator<=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator<= (dt
tm dbdatetime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns Y
ES when the question was answered positivly. Otherwise it return
s NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdatetime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{I
nd2.nmp8}}} 
{K{\footnote\plain{K}{dttm:operator==}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator==\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator== (dttm db
datetime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES wh
en the question was answered positivly. Otherwise it returns NO.
\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdatetime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.n
mp9}}} 
{K{\footnote\plain{K}{dttm:operator>}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator> (dttm dbdatetime
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the q
uestion was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Paramete
rs\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbdatetime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmp0}}} 
{K{\footnote\plain{K}{dttm:
operator>=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator>=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical operator>= (dttm dbdatetime );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Re
turn value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the questi
on was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dbd
atetime\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  dttm\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmp.}}} 
{K{\footnote\plain{K}{dttm:date}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 d
ate\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmp_}}} 
{K{\footnote\plain{K}{dttm:time}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 time\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt8_p}}} 
{K{\footnote\plain{K}{fmcb}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcb\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 fmc
bname\strike0\ul0 \tab - \par
fmcbtype\strike0\ul0 \tab - \par
fmcbsize\strike0\ul0 \tab - \par
fmcbdim\strike0\ul0 \tab - \par
fmcbprec\strike0\ul0 \tab - \par
fmcbrlev\strike0\ul0 \tab - \par
fmcbposn
\strike0\ul0 \tab - \par
fmcbbyte\strike0\ul0 \tab - \par
fmcbityp\strike0\ul0 \tab - \par
fmcbsmcb\strike0\ul0 \tab - \par
fmcbdtp\strike0\ul0 \tab - \par
fmcbvar\strike0\ul0 \tab - \par
fmcbind\strike0\ul0 \tab - \par
fmcbo
pt\strike0\ul0 \tab - \par
fmcbold\strike0\ul0 \tab - \par
fmcbic\strike0\ul0 \tab - \par
fmcbdesc\strike0\ul0 \tab - \par
fmcbcnst\strike0\ul0 \tab - \par
fmcbstat\strike0\ul0 \tab - \par
fmcbvirt\strike0\ul0 \tab - \par
fmc
balloc_opt\strike0\ul0 \tab - \par
fmcbsensi\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 AllocateArea\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 CalculateLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 G
etCharLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetDescription\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetPosition\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetStaticFMCB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetStr
ingLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 Initialize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsPD\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 Is field platform dependent\par
\f2\cf2\fs20\b0\i0 SetInter
nalType\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 fmcb\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 operator=\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmr.}}} 
{K{\footnote\plain{K}{fmcb:AllocateArea}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 AllocateArea
\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void *AllocateArea ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nmr_}}} 
{K{\footnote\plain{K}{fmcb:Calculate
Length}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CalculateLength\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void CalculateLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nms.}}} 
{K{\footnote\plain{K}{fmcb:
GetCharLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCharLength\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetCharLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return val
ue\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nms_}}} 
{K{\footnote\plain{K}{fmcb:GetDescription}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetDescription\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  DBFieldDef *Ge
tDescription ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{cngfa5lz}}} 
{K{\footnote\plain{K}{fmcb:GetPosition}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetPositi
on\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  uint16 GetPosition (int16 setindx=UNDF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 setindx\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{C_df34b}}} 
{K{\footnote\plain{K}{fmcb:GetStaticFMCB}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStaticFMCB\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0 static 
fmcb *__far __cdecl GetStaticFMCB (int16 ityp );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Pa
rameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ityp\tab - Internal structure number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 For user-defined types (s
tructures or enumerations) the internal type identification (num
ber) is returned. If the type is unknown the function returns UN
DEF (0). For elementary types (basic types -> ) the value is neg
ative.\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnta}}} 
{K{\footnote\plain{K}{fmcb:GetStringLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStringLength\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetS
tringLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnt8}}} 
{K{\footnote\plain{K}{fmcb:Initialize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Initialize
\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Initialize (char *intfld );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Termination
 code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In case 
of normal termination the value is NO. When the function returns
 YES more detailed error information are available in the error 
object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 intfld\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{${\footnote\plain{$}{Is field platform dependent}}} 
{#{\footnote\plain{#}{Ind2.nnt0}}} 
{K{\footnote\plain{K}{fmc
b:IsPD}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 IsPD\tab -  Is field platform dependent\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsPD ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 The fu
nction returns, whether the field type is platform dependent or 
not.\par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the 
question was answered positivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{IDg.7.3
n}}} 
{K{\footnote\plain{K}{fmcb:SetInternalType}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SetInternalType\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int16 SetInternalType ( 
);\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Internal structure number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 For user-defined types 
(structures or enumerations) the internal type identification (n
umber) is returned. If the type is unknown the function returns 
UNDEF (0). For elementary types (basic types -> ) the value is n
egative.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnt.}}} 
{K{\footnote\plain{K}{fmcb:fmcb}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcb\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0                          fmcb (
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          fmcb (char *fldnames, char *fldtypes
, int16 fldrlev=0, uint16 fldsize=1, uint16 fldprec=0, uint16 fl
ddim=1 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          fmcb (char *fldnames, char *fl
dtypes, int16 rlev, uint16 size, uint16 prec, uint16 dim, int32 
posn, uint16 byte, int16 ityp, logical dtp, logical var, logical
 ind, logical opt );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          fmcb (smcb *smcbptr
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0                          fmcb (fmcb &fmcbref );\f7\cf7\fs22\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f7\cf7\fs22\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldt
ypes\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldrlev\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  SDB_RLEV\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldsize\tab - 
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldprec\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 flddim\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 rlev\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 size\tab - Size\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Size of the instance or propert
y area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 prec\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dim\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 posn\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 byte\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ityp\tab - Internal structure number\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 For
 user-defined types (structures or enumerations) the internal ty
pe identification (number) is returned. If the type is unknown t
he function returns UNDEF (0). For elementary types (basic types
 -> ) the value is negative.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 dtp\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 var\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ind\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 opt\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 smcbptr\tab - Pointer
 to generel structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way t
o define structure (DBStructDef). It contains information for th
e structure and its properties. In contrast to the DBStructDef t
he smcb describes structure members regardless on the rule they 
may play in the structure.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fm
cbref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{con8pt97u}}} 
{K{\footnote\plain{K}{fmcb:operator=}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 operator=\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  fmcb &operator= (fmcb
 &fmcbref );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fmcbref\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnm8}}} 
{K{\footnote\plain{K}{fmcb:fmcbn
ame}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbname\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnm9}}} 
{K{\footnote\plain{K}{fmcb:fmcbtype}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbtype\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnm0}}} 
{K{\footnote\plain{K}{fmcb:fmc
bsize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbsize\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt98p}}} 
{K{\footnote\plain{K}{fmcb:fmcbdim}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbdim\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnm.}}} 
{K{\footnote\plain{K}{fmcb:fmc
bprec}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbprec\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnm_}}} 
{K{\footnote\plain{K}{fmcb:fmcbrlev}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbrlev\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt98s}}} 
{K{\footnote\plain{K}{fmcb:f
mcbposn}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbposn\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt98t}}} 
{K{\footnote\plain{K}{fmcb:fmcbbyte}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbbyte\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt98u}}} 
{K{\footnote\plain{K}{fmcb
:fmcbityp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbityp\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnna}}} 
{K{\footnote\plain{K}{fmcb:fmcbsmcb}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbsmcb\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li2410\fi-2390\tx2270 \f2\cf2\fs20\b0\i0\ul0 See also cl
ass definition for:  smcb\strike0\ul0 \par\pard\par
{#{\footnote\plain{#}{Ind2.nnn0}}} 
{K{\footnote\plain{K}{fmcb:fmcbdtp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbdtp\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt99
p}}} 
{K{\footnote\plain{K}{fmcb:fmcbvar}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbvar\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnn.}}} 
{K{\footnote\plain{K}{fmcb:fmcbind}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbind\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnn_}}} 
{K{\footnote\plain{K}{f
mcb:fmcbopt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbopt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt99u}}} 
{K{\footnote\plain{K}{fmcb:fmcbold}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbold\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nnoa}}} 
{K{\footnote\plain{K}{fmc
b:fmcbic}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbic\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nno8}}} 
{K{\footnote\plain{K}{fmcb:fmcbdesc}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbdesc\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nno9}}} 
{K{\footnote\plain{K}{fmcb:
fmcbcnst}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbcnst\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nno0}}} 
{K{\footnote\plain{K}{fmcb:fmcbstat}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbstat\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt90p}}} 
{K{\footnote\plain{K}{fmc
b:fmcbvirt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbvirt\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{Ind2.nno_}}} 
{K{\footnote\plain{K}{fmcb:fmcballoc_opt}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcballoc_opt\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt90s}}} 
{K{\footnote\plain{K}{fmcb:fmcbsensi}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 fmcbsensi\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnanu}}} 
{K{\footnote\plain{K}{smcb}}} 
\pard\keepn\s1\ql\sb240\li2130\fi-2110\tx2270 \f0\cf0\fs28\b\i0\ul0 smcb\tab -  \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2270 \f3\cf3\fs24\b\i0\ul0 Properties\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 sm
cbname\strike0\ul0 \tab - \par
smcbityp\strike0\ul0 \tab - \par
smcbstyp\strike0\ul0 \tab - \par
smcbatyp\strike0\ul0 \tab - \par
smcbtlen\strike0\ul0 \tab - \par
smcbfmcl\strike0\ul0 \tab - \par
smcbid
ky\strike0\ul0 \tab - \par
smcbskey\strike0\ul0 \tab - \par
smcbacc\strike0\ul0 \tab - \par
smcberr\strike0\ul0 \tab - \par
smcbsts\strike0\ul0 \tab - \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\sa120\tx2550 \f3\cf3\fs24\b\i0\ul0 Functions\par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 AddKCB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 Conver
tToString\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 ConvertToStruct\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 CopyInstance\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetCharLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetEntr
y\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetIdentKeySMCB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetInstLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetKCB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetKeySMCB\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetLastEn
try\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetLocalSortKey\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 GetStringLength\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 Initialize\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\f2\cf2\fs20\b0\i0 IsEmpty\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb40\li2840\fi-1970\tx2550 \f2\cf2\fs20\b0\i0 Sear
chField\strike0\ul0 \tab - \f4\cf4\fs20\b\i0\ul0 \par
\pard\s0\ql\sb60\tx2550 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnanv}}} 
{K{\footnote\plain{K}{smcb:AddKCB}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 AddKCB\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  void AddKCB (kcb *kcbptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx3400 \f3\cf3\fs24\b\i0\ul0 P
arameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 kcbptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnap1}}} 
{K{\footnote\plain{K}{smcb:ConvertToString}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ConvertToString\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  ch
ar *ConvertToString (char *instptr, char *string, int32 srlen=UN
DF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string
 area.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instptr\tab - Pointer to instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Persistent instances
 do have the type of the referenced collection handle (collectio
n type). Persistent instances may contain references to other in
stances or collections. Referenced instanced can be accessed by 
collection handles that are part of the persistent instance. The
 collection handles for referenced instances can be accessed by 
the property name that has been defined in the structure definit
ion. \par
When accessing the collection as MEMO-collection (PI(mem)) 
no specific instance type is provided. In this case collection h
andle for references can be provided via the \f4\cf4\fs20\b\i0\ul0 .r GetPIPointer()**
* ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0  function.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Poin
ter to the 0-terminated string area.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srlen\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnaos}}} 
{K{\footnote\plain{K}{smcb:ConvertToS
truct}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 ConvertToStruct\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  char *ConvertToStruct (char *string, cha
r *instptr, int32 srlen=UNDF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to instance
\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Persistent instances do have the type of the referenced collecti
on handle (collection type). Persistent instances may contain re
ferences to other instances or collections. Referenced instanced
 can be accessed by collection handles that are part of the pers
istent instance. The collection handles for referenced instances
 can be accessed by the property name that has been defined in t
he structure definition. \par
When accessing the collection as MEMO-c
ollection (PI(mem)) no specific instance type is provided. In th
is case collection handle for references can be provided via the
 \f4\cf4\fs20\b\i0\ul0 .r GetPIPointer()*** ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0  function.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Par
ameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 string\tab - String area\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Pointer to the 0-terminated string are
a.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instptr\tab - Pointer to instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Persistent instances do have the t
ype of the referenced collection handle (collection type). Persi
stent instances may contain references to other instances or col
lections. Referenced instanced can be accessed by collection han
dles that are part of the persistent instance. The collection ha
ndles for referenced instances can be accessed by the property n
ame that has been defined in the structure definition. \par
When acce
ssing the collection as MEMO-collection (PI(mem)) no specific in
stance type is provided. In this case collection handle for refe
rences can be provided via the \f4\cf4\fs20\b\i0\ul0 .r GetPIPointer()*** ERROR : Chap
ter not found ***\f2\cf2\fs20\b0\i0\ul0  function.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srlen\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnaot}}} 
{K{\footnote\plain{K}{smcb:CopyInstance}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 CopyIns
tance\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical CopyInstance (char *targinst, smcb *srcesmcb, c
har *srceinst, int16 replace=UNDEF, int16 copy_type=UNDEF );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Retu
rn value\tab - Termination code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function retur
ns an error. In case of normal termination the value is NO. When
 the function returns YES more detailed error information are av
ailable in the error object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 targinst\tab - Traget instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 I
nstances do have the type of the referenced property handle (col
lection type). The instance contains a pointer to a properly str
uctured instance area. \par
You can use the !-operator or the GetData
() function to check whether the instance refers to data or not.
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  Instance\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srcesmcb\tab - Pointer to gen
eral structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way to defin
e structure (DBStructDef). It contains information for the struc
ture and its properties. The definition describes the structure 
of the instance passed to the function.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition
 for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 srceinst\tab - Source instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 A pointer to an instance of 
the defined type must be passed. The instance can be a persisten
t instance read from another location or a transient one. The st
ructure of the instance must confirm to the passed structure def
inition (srcesmcb). References or relationships in the new insta
nce will be ignored (if there are any).\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 replace\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 copy_type\tab - Copy 
type\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The copy type determins the way of copying instances:\par
REPL_al
l - copies all instances recursively owned by the instance and t
he primary relationships\par
REPL_Instance - copies all instances rec
ursively owned by the instance\par
REPL_relationship - copies the pri
mary relationships\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  PIREPL\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnaox}}} 
{K{\footnote\plain{K}{sm
cb:GetCharLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetCharLength\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetCharLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return 
value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnaoy}}} 
{K{\footnote\plain{K}{smcb:GetEntry}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetEntry\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  fmcb *GetEntry (int16 indx
 );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  fmcb *GetEntry (char *fldnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 ind
x\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{con8pt08u}}} 
{K{\footnote\plain{K}{smcb:GetIdentKeySMCB}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetIdentKeySMCB\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  smc
b *GetIdentKeySMCB ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to generel structur
e definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way to define structure (
DBStructDef). It contains information for the structure and its 
properties. In contrast to the DBStructDef the smcb describes st
ructure members regardless on the rule they may play in the stru
cture.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnaq1}}} 
{K{\footnote\plain{K}{smcb:GetInstLeng
th}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetInstLength\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32 GetInstLength (logical as_base );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return
 value\tab - Size of returned instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnaps}}} 
{K{\footnote\plain{K}{smcb:GetKCB}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetKCB\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  kcb 
*GetKCB (char *keynames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\f6\cf6\fs22\b\i0\ul0  kcb *GetKCB (int16 keynum );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return va
lue\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keynames\tab - Key name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-ter
minated string or as buffer with a maximum size of 40 characters
 and trailing blanks.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keynum\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnapt}}} 
{K{\footnote\plain{K}{smcb:GetKeySMCB}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetKeySMCB\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  
smcb *GetKeySMCB (char *keynames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to gene
rel structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way to define
 structure (DBStructDef). It contains information for the struct
ure and its properties. In contrast to the DBStructDef the smcb 
describes structure members regardless on the rule they may play
 in the structure.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parameters
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 keynames\tab - Key name\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The key name is passed as 0-terminated string 
or as buffer with a maximum size of 40 characters and trailing b
lanks.\par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnapu}}} 
{K{\footnote\plain{K}{smcb:GetLastEntry}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetLastEntry\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  fmcb *GetLastEntry 
( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnapv}}} 
{K{\footnote\plain{K}{smcb:GetLocalSortKey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetLocalSortKey\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  s
mcb *GetLocalSortKey (char *fldnames );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Pointer to 
generel structure definition\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The smcb is a more general way to de
fine structure (DBStructDef). It contains information for the st
ructure and its properties. In contrast to the DBStructDef the s
mcb describes structure members regardless on the rule they may 
play in the structure.\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 See also class definition for:  smcb\strike0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\f3\cf3\fs24\b\i0\ul0 Parame
ters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldnames\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnapx}}} 
{K{\footnote\plain{K}{smcb:GetStringLength}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 GetStringLength\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  int32
 GetStringLength ( );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnapy}}} 
{K{\footnote\plain{K}{smcb:Initialize}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 Initiali
ze\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical Initialize (char *instptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Terminat
ion code\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The value is YES if the function returns an error. In ca
se of normal termination the value is NO. When the function retu
rns YES more detailed error information are available in the err
or object.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instptr\tab - Pointer to instance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Persistent insta
nces do have the type of the referenced collection handle (colle
ction type). Persistent instances may contain references to othe
r instances or collections. Referenced instanced can be accessed
 by collection handles that are part of the persistent instance.
 The collection handles for referenced instances can be accessed
 by the property name that has been defined in the structure def
inition. \par
When accessing the collection as MEMO-collection (PI(me
m)) no specific instance type is provided. In this case collecti
on handle for references can be provided via the \f4\cf4\fs20\b\i0\ul0 .r GetPIPointer
()*** ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0  function.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnapz}}} 
{K{\footnote\plain{K}{smcb:IsEmpty}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 I
sEmpty\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  logical IsEmpty (char *instptr );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - Return 
value\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The function returns YES when the question was answered pos
itivly. Otherwise it returns NO.\par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Parameters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 instptr\tab - Pointer to in
stance\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 Persistent instances do have the type of the referenced co
llection handle (collection type). Persistent instances may cont
ain references to other instances or collections. Referenced ins
tanced can be accessed by collection handles that are part of th
e persistent instance. The collection handles for referenced ins
tances can be accessed by the property name that has been define
d in the structure definition. \par
When accessing the collection as 
MEMO-collection (PI(mem)) no specific instance type is provided.
 In this case collection handle for references can be provided v
ia the \f4\cf4\fs20\b\i0\ul0 .r GetPIPointer()*** ERROR : Chapter not found ***\f2\cf2\fs20\b0\i0\ul0  functi
on.\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par\pard\par
{#{\footnote\plain{#}{.bnaqs}}} 
{K{\footnote\plain{K}{smcb:SearchField}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 SearchField\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\keepn\s1\ql\sb40\li3520\ri110\fi-3380\tx3400 \f6\cf6\fs22\b\i0\ul0  fmcb *SearchField (char 
*fldpath, int32 *offset, kcb *w_kcbptr=NULL );\f7\cf7\fs22\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx3400 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb240\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 Return value\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f3\cf3\fs24\b\i0\ul0 Para
meters\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 fldpath\tab - Property path\par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 The property path is passed as 0-ter
minated string. It may contain a single property name or a seque
nce of property names separated by '.'.\par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 offset\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\li1560\fi-1540\tx1700 \f4\cf4\fs20\b\i0\ul0 w_kcbptr\tab - \par
\pard\s0\ql\sb60\li1700\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2130 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnaqz}}} 
{K{\footnote\plain{K}{s
mcb:smcbname}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbname\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{con8pt00u}}} 
{K{\footnote\plain{K}{smcb:smcbityp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbityp\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnas1}}} 
{K{\footnote\plain{K}{sm
cb:smcbstyp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbstyp\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnars}}} 
{K{\footnote\plain{K}{smcb:smcbatyp}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbatyp\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnart}}} 
{K{\footnote\plain{K}{smcb:s
mcbtlen}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbtlen\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnaru}}} 
{K{\footnote\plain{K}{smcb:smcbfmcl}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbfmcl\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnarv}}} 
{K{\footnote\plain{K}{smcb:smcbi
dky}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbidky\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnarw}}} 
{K{\footnote\plain{K}{smcb:smcbskey}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbskey\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnarx}}} 
{K{\footnote\plain{K}{smcb:smcbacc}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 sm
cbacc\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnary}}} 
{K{\footnote\plain{K}{smcb:smcberr}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcberr\tab -  \par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{#{\footnote\plain{#}{.bnarz}}} 
{K{\footnote\plain{K}{smcb:smcbsts}}} 
\pard\keepn\s1\ql\sb240\li2410\fi-2390\tx2270 \f0\cf0\fs28\b\i0\ul0 smcbsts\tab -  
\par
\pard\keepn\s1\ql\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60\tx2270 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Include file '%s' does already exist. ?}}} 
{#{\footnote\plain{#}{.bnatx}}} 
{K{\footnote\plain{K}{sdb_err:0201}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err
:0201}}} 
\f0\cf0\fs28\b\i0\ul0 -201 - Include file '%s' does already exist. ?\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The file spec
ified in the target path for the include file generation does al
ready exist. When you select OK the existing file will be overwr
itten completely. With CANCEL you can stop the generation for sp
ecifying another path\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error writing file %1}}} 
{#{\footnote\plain{#}{.bnaty}}} 
{K{\footnote\plain{K}{sdb_err:0001}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_
err:0001}}} 
\f0\cf0\fs28\b\i0\ul0 1 - Error writing file %1\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An error occured when writing t
o a file or database. Either there was a physical defect on the 
disk or there was no space anymore. \par
If ther was no space availab
le for a DataArea close the application and define one more Data
Area or a dynamical overflow area for the corresponding SubBase.
\par
(-> database administration).\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{I/O-error reading file %1}}} 
{#{\footnote\plain{#}{.bnatz}}} 
{K{\footnote\plain{K}{sdb_
err:0002}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0002}}} 
\f0\cf0\fs28\b\i0\ul0 2 - I/O-error reading file %1\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Accessing delet
ed Entry}}} 
{#{\footnote\plain{#}{con8pt0_u}}} 
{K{\footnote\plain{K}{sdb_err:0003}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0003}}} 
\f0\cf0\fs28\b\i0\ul0 3 - Accessing deleted E
ntry\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an atempt to access a deleted entry. This happens,
 e.g. when deleting an entry but not removing the references to 
it (e.g. when not defining inverse references for relationships)
. \par
Check the definition of inverse references for relationships a
nd base structures. Reorganize the data base when requiered to d
etect and remove invalid references.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data base '%s' is created by
 another user.}}} 
{#{\footnote\plain{#}{.bnav1}}} 
{K{\footnote\plain{K}{sdb_err:0004}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0004}}} 
\f0\cf0\fs28\b\i0\ul0 4 - Data base '%s' i
s created by another user.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attemt to initialize des 
Database simultaneously by another user. Try to open the databas
e once more.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open Error on data base '%s'.}}} 
{#{\footnote\plain{#}{.bnaus}}} 
{K{\footnote\plain{K}{sdb_err:0005}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_e
rr:0005}}} 
\f0\cf0\fs28\b\i0\ul0 5 - Open Error on data base '%s'.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There \par
******************
************\par
Beim \'d6ffnen der Datenbank ist ein Fehler aufgetreten
. \'dcberpr\'fcfen Sie, ob die Pfadangaben in der Applikation bzw. im 
Programmaufruf korrekt sind. M\'f6glicherweise hat auch eine andere
 Anwendung die Datenbank exclusive ge\'f6ffent. Korrigieren sie die
 Angaben ggf. und versuchen Sie es erneut.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Entry is locked}}} 
{#{\footnote\plain{#}{.bnaut}}} 
{K{\footnote\plain{K}{s
db_err:0006}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0006}}} 
\f0\cf0\fs28\b\i0\ul0 6 - Entry is locked\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid entry number}}} 
{#{\footnote\plain{#}{.b
nauu}}} 
{K{\footnote\plain{K}{sdb_err:0007}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0007}}} 
\f0\cf0\fs28\b\i0\ul0 7 - Invalid entry number\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When reading
 a database entry an invalid entry number has been detected. The
 reason is either a programm error that provides an entry number
 greater then the last entry number in the database, an access e
rror when reading the entry descriptor or a corrupted database.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{I
nvalid access type, autocorrected (AT_NONE).}}} 
{#{\footnote\plain{#}{.bnaux}}} 
{K{\footnote\plain{K}{sdb_err:0010}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sd
b_err:0010}}} 
\f0\cf0\fs28\b\i0\ul0 10 - Invalid access type, autocorrected (AT_NONE).\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Inva
lid structure metatype, autocorrected (ST_USER).}}} 
{#{\footnote\plain{#}{.bnauy}}} 
{K{\footnote\plain{K}{sdb_err:00
11}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0011}}} 
\f0\cf0\fs28\b\i0\ul0 11 - Invalid structure metatype, autocorrected (ST
_USER).\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Codeset '%s' not available.}}} 
{#{\footnote\plain{#}{.bnauz}}} 
{K{\footnote\plain{K}{sdb_err:0012}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0012
}}} 
\f0\cf0\fs28\b\i0\ul0 12 - Codeset '%s' not available.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sortkey required for set field m
ust not contain multiple field.}}} 
{#{\footnote\plain{#}{IDH1zva13}}} 
{K{\footnote\plain{K}{sdb_err:0013}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0013
}}} 
\f0\cf0\fs28\b\i0\ul0 13 - Sortkey required for set field must not contain multiple fi
eld.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sortkey required for set field is not defined for appropriat
e datatyp.}}} 
{#{\footnote\plain{#}{.bnbw1}}} 
{K{\footnote\plain{K}{sdb_err:0014}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0014}}} 
\f0\cf0\fs28\b\i0\ul0 14 - Sortkey required fo
r set field is not defined for appropriate datatyp.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{KEY structure
 must be unsorted or sorted by itself ('*').}}} 
{#{\footnote\plain{#}{.bnbvs}}} 
{K{\footnote\plain{K}{sdb_err:0015}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sd
b_err:0015}}} 
\f0\cf0\fs28\b\i0\ul0 15 - KEY structure must be unsorted or sorted by itsel
f ('*').\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Key can contain one dimension component, only.}}} 
{#{\footnote\plain{#}{.bnbvt}}} 
{K{\footnote\plain{K}{sdb_
err:0016}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0016}}} 
\f0\cf0\fs28\b\i0\ul0 16 - Key can contain one dimension component
, only.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Keys can be defined for USER structures, only.}}} 
{#{\footnote\plain{#}{.bnbvu}}} 
{K{\footnote\plain{K}{sdb_e
rr:0017}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0017}}} 
\f0\cf0\fs28\b\i0\ul0 17 - Keys can be defined for USER structures,
 only.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Field '%s' not defined in data base.}}} 
{#{\footnote\plain{#}{.bnbvv}}} 
{K{\footnote\plain{K}{sdb_err:0018}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_
err:0018}}} 
\f0\cf0\fs28\b\i0\ul0 18 - Field '%s' not defined in data base.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Field definitio
n '%s' could  not be changed or deleted, field is used in a key.
}}} 
{#{\footnote\plain{#}{.bnbvw}}} 
{K{\footnote\plain{K}{sdb_err:0019}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0019}}} 
\f0\cf0\fs28\b\i0\ul0 19 - Field definition '%s' could  
not be changed or deleted, field is used in a key.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure defi
nition not found for '%1'}}} 
{#{\footnote\plain{#}{.bnbvx}}} 
{K{\footnote\plain{K}{sdb_err:0020}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0020}}} 
\f0\cf0\fs28\b\i0\ul0 20 - Stru
cture definition not found for '%1'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A structure referenced as typ
e in a field or extend was not found in the dictionary. Check th
e dictionary and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{%1}}} 
{#{\footnote\plain{#}{.bnbvz}}} 
{K{\footnote\plain{K}{sdb_err:0022}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0022}}} 
\f0\cf0\fs28\b\i0\ul0 22 - 
%1\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{MEMO fields or INTERNal or single REFERENCEs must not be used 
as key components.}}} 
{#{\footnote\plain{#}{IDH1zvb23}}} 
{K{\footnote\plain{K}{sdb_err:0023}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0023}}} 
\f0\cf0\fs28\b\i0\ul0 23 - MEMO fie
lds or INTERNal or single REFERENCEs must not be used as key com
ponents.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Exclusive or large reference sets can not be used as key
 component.}}} 
{#{\footnote\plain{#}{.bnbn1}}} 
{K{\footnote\plain{K}{sdb_err:0024}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0024}}} 
\f0\cf0\fs28\b\i0\ul0 24 - Exclusive or large
 reference sets can not be used as key component.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ident key requi
red for user defined type when used as key component.}}} 
{#{\footnote\plain{#}{.bnbms}}} 
{K{\footnote\plain{K}{sdb_e
rr:0025}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0025}}} 
\f0\cf0\fs28\b\i0\ul0 25 - Ident key required for user defined type
 when used as key component.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open access nodes left - data base m
igth be damaged.}}} 
{#{\footnote\plain{#}{.bnbmt}}} 
{K{\footnote\plain{K}{sdb_err:0026}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0026}}} 
\f0\cf0\fs28\b\i0\ul0 26 - Open access n
odes left - data base migth be damaged.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Single node acess require
d for global reference.}}} 
{#{\footnote\plain{#}{.bnbmu}}} 
{K{\footnote\plain{K}{sdb_err:0027}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0027}}} 
\f0\cf0\fs28\b\i0\ul0 27 - Single
 node acess required for global reference.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{PI- or Enumeration-Han
dle not opened for required access.}}} 
{#{\footnote\plain{#}{.bnbmv}}} 
{K{\footnote\plain{K}{sdb_err:0028}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:002
8}}} 
\f0\cf0\fs28\b\i0\ul0 28 - PI- or Enumeration-Handle not opened for required access.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A
n access violation has been detected when using the handle for a
ccess. This happens either when the handle has been opened with 
an access mode which is in conflict with the required one or whe
n the Handle is not supprting the required access mode.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid d
atabase header}}} 
{#{\footnote\plain{#}{.bnbmw}}} 
{K{\footnote\plain{K}{sdb_err:0029}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0029}}} 
\f0\cf0\fs28\b\i0\ul0 29 - Invalid databas
e header\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Reading a database an invalid database header was detect
ed. Either the database has been destroyed or tha file reference
 for the database is invalid.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error reading RootBase header}}} 
{#{\footnote\plain{#}{.bnbmx
}}} 
{K{\footnote\plain{K}{sdb_err:0030}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0030}}} 
\f0\cf0\fs28\b\i0\ul0 30 - Error reading RootBase header\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error 
reading MainBase definition entry}}} 
{#{\footnote\plain{#}{.bnbmy}}} 
{K{\footnote\plain{K}{sdb_err:0031}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0031}}} 
\f0\cf0\fs28\b\i0\ul0 3
1 - Error reading MainBase definition entry\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid MainBase iden
tification}}} 
{#{\footnote\plain{#}{.bnbmz}}} 
{K{\footnote\plain{K}{sdb_err:0032}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0032}}} 
\f0\cf0\fs28\b\i0\ul0 32 - Invalid MainBase id
entification\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The MainBase identification passed or evaluated from
 the entry number points to an MainBase not opened or not existi
ng. This might be caused e.g. by a MainBase wich could not be mo
unted.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error reading SubBase definition entry}}} 
{#{\footnote\plain{#}{ID_7gbi65}}} 
{K{\footnote\plain{K}{sdb_err:003
3}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0033}}} 
\f0\cf0\fs28\b\i0\ul0 33 - Error reading SubBase definition entry\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error wr
iting Base Header}}} 
{#{\footnote\plain{#}{.bnbo1}}} 
{K{\footnote\plain{K}{sdb_err:0034}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0034}}} 
\f0\cf0\fs28\b\i0\ul0 34 - Error writin
g Base Header\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The database header for a database file could not b
e written. Either the application was opened as a demo-version (
read only) or the physical write error occurred.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error reading Da
taArea definition entry}}} 
{#{\footnote\plain{#}{.bnbns}}} 
{K{\footnote\plain{K}{sdb_err:0035}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0035}}} 
\f0\cf0\fs28\b\i0\ul0 35 - Error 
reading DataArea definition entry\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data base/file '%1' does not ex
ist.needs write mode.}}} 
{#{\footnote\plain{#}{.bnbnt}}} 
{K{\footnote\plain{K}{sdb_err:0036}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0036}}} 
\f0\cf0\fs28\b\i0\ul0 36 - Data bas
e/file '%1' does not exist.needs write mode.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A physical file coul
d not be located. This can be a file of an ODABA2 data base or a
 file for external data accesss (such as binary or OEL).\par
When ope
ning a new data base the DataArea 0 is created by default. Howev
er, this is possible when opening the data base in write mode, o
nly.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{File %1 could not be opened}}} 
{#{\footnote\plain{#}{.bnbnu}}} 
{K{\footnote\plain{K}{sdb_err:0037}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0037}}} 
\f0\cf0\fs28\b\i0\ul0 37 
- File %1 could not be opened\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Persistent Write Protection can not
 be set within a transaction}}} 
{#{\footnote\plain{#}{.bnbnv}}} 
{K{\footnote\plain{K}{sdb_err:0038}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0038}}} 
\f0\cf0\fs28\b\i0\ul0 38 - P
ersistent Write Protection can not be set within a transaction\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Da
taArea ouf of space}}} 
{#{\footnote\plain{#}{.bnbnw}}} 
{K{\footnote\plain{K}{sdb_err:0039}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0039}}} 
\f0\cf0\fs28\b\i0\ul0 39 - DataArea o
uf of space\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Writing to a static DataArea exceeds the maximum size
 defined for the area.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Write mode requested}}} 
{#{\footnote\plain{#}{.bnbnx}}} 
{K{\footnote\plain{K}{sdb_err:0040}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_
err:0040}}} 
\f0\cf0\fs28\b\i0\ul0 40 - Write mode requested\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attempt to modify 
a bese wich has been opened for read, only.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid position read
ing from a Base}}} 
{#{\footnote\plain{#}{.bnbny}}} 
{K{\footnote\plain{K}{sdb_err:0041}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0041}}} 
\f0\cf0\fs28\b\i0\ul0 41 - Invalid positi
on reading from a Base\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An attempt was made reading a database ins
tance on an invalid position.  Probably the database is damaged.
 Run CheckDB to get more detailed error explanations.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid ent
ry number reading the MainBase}}} 
{#{\footnote\plain{#}{.bnbnz}}} 
{K{\footnote\plain{K}{sdb_err:0042}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0042}}} 
\f0\cf0\fs28\b\i0\ul0 42 -
 Invalid entry number reading the MainBase\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The entry number to re
ad an entry from the main base has not been stiored to the data 
base or got lost during a reorganization after deleting an entry
.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid entry number reading MainBase-Entry}}} 
{#{\footnote\plain{#}{.bnbp1}}} 
{K{\footnote\plain{K}{sdb_err:0044}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sd
b_err:0044}}} 
\f0\cf0\fs28\b\i0\ul0 44 - Invalid entry number reading MainBase-Entry\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invali
d SubBase reference}}} 
{#{\footnote\plain{#}{.bnbos}}} 
{K{\footnote\plain{K}{sdb_err:0045}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0045}}} 
\f0\cf0\fs28\b\i0\ul0 45 - Invalid Su
bBase reference\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An attempt was made to access an object in a SubB
ase not opened or not definied. This may happen, when the SubBas
e number defined for a structure refers to a SubBase not yet ini
tialized. \par
Check the defined SubBases to be initialized and try a
gain.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Accessing deleted Entry}}} 
{#{\footnote\plain{#}{.bnbot}}} 
{K{\footnote\plain{K}{sdb_err:0046}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0046}}} 
\f0\cf0\fs28\b\i0\ul0 46 - A
ccessing deleted Entry\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an atempt to access a deleted en
try. This happens, e.g. when deleting an entry but not removing 
the references to it (e.g. when not defining inverse references 
for relationships). \par
Check the definition of inverse references f
or relationships and base structures. Reorganize the data base w
hen requiered to detect and remove invalid references.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not up
date write protected entries}}} 
{#{\footnote\plain{#}{.bnbou}}} 
{K{\footnote\plain{K}{sdb_err:0047}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0047}}} 
\f0\cf0\fs28\b\i0\ul0 47 - C
an not update write protected entries\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attempt to upd
ate an entry marked explicitely as write-protected. Entries are 
marked explicitely as write-protected e.g. when using the SetWPT
() function.\par
To modify or delete write-protected entries use the 
ResetWPT() function before.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not delete cluster entry}}} 
{#{\footnote\plain{#}{.bnbov}}} 
{K{\footnote\plain{K}{sdb
_err:0048}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0048}}} 
\f0\cf0\fs28\b\i0\ul0 48 - Can not delete cluster entry\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A cluster 
entry can not be deleted explicitely. It will be deleted automat
ically, as soon as it does not contain any entry.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cluster pool en
try not found}}} 
{#{\footnote\plain{#}{.bnbow}}} 
{K{\footnote\plain{K}{sdb_err:0049}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0049}}} 
\f0\cf0\fs28\b\i0\ul0 49 - Cluster pool ent
ry not found\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A cluster assumed to be allocated could not be found
 within the cluster pool. This might be caused by an error previ
ously occured when reading the cluster.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cluster buffer contains o
ne ore more entries}}} 
{#{\footnote\plain{#}{.bnbox}}} 
{K{\footnote\plain{K}{sdb_err:0050}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0050}}} 
\f0\cf0\fs28\b\i0\ul0 50 - Cluster bu
ffer contains one ore more entries\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When closing a MainBase one or
 more clusters had been detected in the buffer. Data may be lost
 when storing the cluster now. \par
The situation appears when not cl
osing all PI-handle properly.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Entry expected in cluster but not f
ound}}} 
{#{\footnote\plain{#}{.bnboy}}} 
{K{\footnote\plain{K}{sdb_err:0051}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0051}}} 
\f0\cf0\fs28\b\i0\ul0 51 - Entry expected in cluster
 but not found\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An entry expected in a cluster could not be found.
 This might be caused by an abnormally program termination.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Lengt
h error updating entry}}} 
{#{\footnote\plain{#}{.bnboz}}} 
{K{\footnote\plain{K}{sdb_err:0052}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0052}}} 
\f0\cf0\fs28\b\i0\ul0 52 - Length 
error updating entry\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An attempt was made to update an entry inpla
ce but the portion to be replaced exceeds the maximal entry leng
th. This is a program error, probably.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cluster use count became l
ess than zero}}} 
{#{\footnote\plain{#}{ID_7gbi85}}} 
{K{\footnote\plain{K}{sdb_err:0053}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0053}}} 
\f0\cf0\fs28\b\i0\ul0 53 - Cluster use c
ount became less than zero\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The use count for a cluster pool becam
e less than zero. There was a programming error probably.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{File no
t initialized as data base file}}} 
{#{\footnote\plain{#}{.bnbq1}}} 
{K{\footnote\plain{K}{sdb_err:0054}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0054}}} 
\f0\cf0\fs28\b\i0\ul0 54 
- File not initialized as data base file\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid interval for ent
ry base numbers}}} 
{#{\footnote\plain{#}{.bnbps}}} 
{K{\footnote\plain{K}{sdb_err:0055}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0055}}} 
\f0\cf0\fs28\b\i0\ul0 55 - Invalid interv
al for entry base numbers\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The deifference between high and low va
lue must not exceed 7.\par
\pard\s0\ql\sb120\tx360 \f2\cf2\fs20\b0\i0\ul0 \tab (0,7) - valid intervall\par
\tab (1,9) - invalid int
ervall\par
\par
\pard\s0\ql\sb60\tx360 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data base file is not a RootBase}}} 
{#{\footnote\plain{#}{.bnbpt}}} 
{K{\footnote\plain{K}{sdb_err:0056}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:
0056}}} 
\f0\cf0\fs28\b\i0\ul0 56 - Data base file is not a RootBase\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Illegal access mode req
uested}}} 
{#{\footnote\plain{#}{.bnbpu}}} 
{K{\footnote\plain{K}{sdb_err:0057}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0057}}} 
\f0\cf0\fs28\b\i0\ul0 57 - Illegal access mode req
uested\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Eintrag '%1' in the ini file contains too many characters}}} 
{#{\footnote\plain{#}{.
bnbpv}}} 
{K{\footnote\plain{K}{sdb_err:0058}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0058}}} 
\f0\cf0\fs28\b\i0\ul0 58 - Eintrag '%1' in the ini file c
ontains too many characters\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid index given for Indexed acces
s.}}} 
{#{\footnote\plain{#}{.bnbpw}}} 
{K{\footnote\plain{K}{sdb_err:0059}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0059}}} 
\f0\cf0\fs28\b\i0\ul0 59 - Invalid index given for Ind
exed access.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error reading ODABA2 database header}}} 
{#{\footnote\plain{#}{.bnbpx}}} 
{K{\footnote\plain{K}{sdb_err:00
60}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0060}}} 
\f0\cf0\fs28\b\i0\ul0 60 - Error reading ODABA2 database header\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Database 
is destroyed or file not created as ODABA2 database. Check file 
path for data base in the application or the dictionary path in 
the program call.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database '%s' could not be inititialized, becau
se opened for reading, only.}}} 
{#{\footnote\plain{#}{.bnbpy}}} 
{K{\footnote\plain{K}{sdb_err:0061}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0061}}} 
\f0\cf0\fs28\b\i0\ul0 61 - D
atabase '%s' could not be inititialized, because opened for read
ing, only.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Object not found.}}} 
{#{\footnote\plain{#}{.bnbpz}}} 
{K{\footnote\plain{K}{sdb_err:0062}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0062}}} 
\f0\cf0\fs28\b\i0\ul0 62 - Ob
ject not found.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Object '%s' not found.}}} 
{#{\footnote\plain{#}{ID_7gbi95}}} 
{K{\footnote\plain{K}{sdb_err:0063}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_er
r:0063}}} 
\f0\cf0\fs28\b\i0\ul0 63 - Object '%s' not found.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{A %2-Instance with key value '%
1' (%3) does already exist.}}} 
{#{\footnote\plain{#}{.bnbr1}}} 
{K{\footnote\plain{K}{sdb_err:0064}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0064}}} 
\f0\cf0\fs28\b\i0\ul0 64 - A 
%2-Instance with key value '%1' (%3) does already exist.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Duplicat
e key value for ident key or unique sort key.}}} 
{#{\footnote\plain{#}{.bnbqs}}} 
{K{\footnote\plain{K}{sdb_err:0065}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{s
db_err:0065}}} 
\f0\cf0\fs28\b\i0\ul0 65 - Duplicate key value for ident key or unique sort
 key.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Duplicate key value for ident key or unique sort key.}}} 
{#{\footnote\plain{#}{.bnbqt
}}} 
{K{\footnote\plain{K}{sdb_err:0066}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0066}}} 
\f0\cf0\fs28\b\i0\ul0 66 - Duplicate key value for ident key o
r unique sort key.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When adding a new instance or updating an inst
ance\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance updated by another user}}} 
{#{\footnote\plain{#}{.bnbqu}}} 
{K{\footnote\plain{K}{sdb_err:0067}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:00
67}}} 
\f0\cf0\fs28\b\i0\ul0 67 - Instance updated by another user\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The instance has been upd
ated by another user and can not be refreshed or written. If the
 instance shall be overwritten, try to save the instance with th
e overwrite-option.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Extent '%1' not found}}} 
{#{\footnote\plain{#}{.bnbqv}}} 
{K{\footnote\plain{K}{sdb_err:0068}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_er
r:0068}}} 
\f0\cf0\fs28\b\i0\ul0 68 - Extent '%1' not found\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Beim Konstruieren oder in einer 
Objektbeziehung wurde ein Extendname angegeben, der nicht im Dic
tionary definiert ist. Pr\'fcfen sie die definierten Extends in Ihr
em Dictionary und versuchen Sie es anschlie\'dfend erneut.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid o
bject or database handle}}} 
{#{\footnote\plain{#}{.bnbqx}}} 
{K{\footnote\plain{K}{sdb_err:0070}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0070}}} 
\f0\cf0\fs28\b\i0\ul0 70 - Inval
id object or database handle\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When constucting a PI-handle or usin
g object or database handle functions the object or database han
dle passed to the constructor was incorrect. This is an error in
 the application program. Correct the program and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ille
gal access mode requested}}} 
{#{\footnote\plain{#}{.bnbqz}}} 
{K{\footnote\plain{K}{sdb_err:0072}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0072}}} 
\f0\cf0\fs28\b\i0\ul0 72 - Ille
gal access mode requested\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Attempt to add or delete Invalid invers
e reference}}} 
{#{\footnote\plain{#}{.bnbs1}}} 
{K{\footnote\plain{K}{sdb_err:0074}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0074}}} 
\f0\cf0\fs28\b\i0\ul0 74 - Attempt to add or 
delete Invalid inverse reference\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The inverse reference defined fo
r a field is not a relationship member or there was an attempt d
o delete a base structure without deleting all derived structure
s.\par
Check the definition of relationships in the dictionary or ens
ure that all derived instanzes are deleted before deleting the i
nstance.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid/missing key definition in %1.%2 for key %3}}} 
{#{\footnote\plain{#}{.bnbrs
}}} 
{K{\footnote\plain{K}{sdb_err:0075}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0075}}} 
\f0\cf0\fs28\b\i0\ul0 75 - Invalid/missing key definition in %
1.%2 for key %3\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The key definition for a sort key used in the fie
ld definition for sorting the reference or relationship is inval
id. Probably the key became invalid during a structure modifikat
ion or it has been deleted. Also an error reading the structure 
definition might cause this error.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance is not write protecte
d.}}} 
{#{\footnote\plain{#}{.bnbru}}} 
{K{\footnote\plain{K}{sdb_err:0077}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0077}}} 
\f0\cf0\fs28\b\i0\ul0 77 - Instance is not write prote
cted.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not lock/unlock local instance.}}} 
{#{\footnote\plain{#}{.bnbrv}}} 
{K{\footnote\plain{K}{sdb_err:0078}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_er
r:0078}}} 
\f0\cf0\fs28\b\i0\ul0 78 - Can not lock/unlock local instance.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sortkey '%2' not f
ound for structure '%1'.}}} 
{#{\footnote\plain{#}{.bnbrw}}} 
{K{\footnote\plain{K}{sdb_err:0079}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0079}}} 
\f0\cf0\fs28\b\i0\ul0 79 - Sortk
ey '%2' not found for structure '%1'.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance '%1' does not exis
t.}}} 
{#{\footnote\plain{#}{.bnbrx}}} 
{K{\footnote\plain{K}{sdb_err:0080}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0080}}} 
\f0\cf0\fs28\b\i0\ul0 80 - Instance '%1' does not exis
t.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Initial Instance or key required, but not provided.}}} 
{#{\footnote\plain{#}{.bnbry}}} 
{K{\footnote\plain{K}{sdb_e
rr:0081}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0081}}} 
\f0\cf0\fs28\b\i0\ul0 81 - Initial Instance or key required, but no
t provided.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ident key must not be specified.}}} 
{#{\footnote\plain{#}{.bnbrz}}} 
{K{\footnote\plain{K}{sdb_err:0082}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb
_err:0082}}} 
\f0\cf0\fs28\b\i0\ul0 82 - Ident key must not be specified.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{ODABA Codeset type
 reqired for Codeset access.}}} 
{#{\footnote\plain{#}{.bnbt1}}} 
{K{\footnote\plain{K}{sdb_err:0084}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0084}}} 
\f0\cf0\fs28\b\i0\ul0 84 - O
DABA Codeset type reqired for Codeset access.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Codeset '%1' not av
ailable.}}} 
{#{\footnote\plain{#}{.bnbss}}} 
{K{\footnote\plain{K}{sdb_err:0085}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0085}}} 
\f0\cf0\fs28\b\i0\ul0 85 - Codeset '%1' not avai
lable.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Recovery file could not be opened}}} 
{#{\footnote\plain{#}{.bnbst}}} 
{K{\footnote\plain{K}{sdb_err:0086}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err
:0086}}} 
\f0\cf0\fs28\b\i0\ul0 86 - Recovery file could not be opened\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Recursive reference o
f imbedded structure in key or structure}}} 
{#{\footnote\plain{#}{.bnbsu}}} 
{K{\footnote\plain{K}{sdb_err:0087}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_er
r:0087}}} 
\f0\cf0\fs28\b\i0\ul0 87 - Recursive reference of imbedded structure in key or s
tructure\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A recursiv use of structure has been detected. This may 
happen when a structure is referenced directly or over certain l
evels as a directly imbedded member within the refernced structu
re members. \par
Because keys having direct members, only (references
 will be converted to directly imbedded members when used as key
 component, the same effect may appear when using recursive refe
renced fields within keys, even thoug they are defined as refere
nces. \par
\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Undelete of deleted entry}}} 
{#{\footnote\plain{#}{.bnbsv}}} 
{K{\footnote\plain{K}{sdb_err:0088}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0088}}} 
\f0\cf0\fs28\b\i0\ul0 88 
- Undelete of deleted entry\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A deleted entry was referenced when t
he Base was opened in write or update mode. The entry was undele
ted to be accessible. This makes the references valid, however i
t will not add the entry to the appropriate indices.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Accessing de
leted Entry}}} 
{#{\footnote\plain{#}{.bnbsw}}} 
{K{\footnote\plain{K}{sdb_err:0089}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0089}}} 
\f0\cf0\fs28\b\i0\ul0 89 - Accessing deleted 
Entry\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attempt to access a deleted entry. This may ha
ppen when using relationships without inverse references. When d
eleting an instance in this case the reference remains and point
s to an invalid entry.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Conversion from '%1(%2)' to '%3(%4)' not s
upported}}} 
{#{\footnote\plain{#}{.bnbsx}}} 
{K{\footnote\plain{K}{sdb_err:0091}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0091}}} 
\f0\cf0\fs28\b\i0\ul0 91 - Conversion from '%1(%
2)' to '%3(%4)' not supported\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 This error may occur also while cop
ying an instance ar collection. When copying a single instance a
n conversion error has been detected or the error occurred while
 copying one of the referenced instances. When copying a collect
ion an incomplete copy error has been indicated for one ore more
 instances of the set. \par
If the TRACE-file variable has been set y
ou can find more detailed information about the error viewing th
e trace file.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Conversion error converting '%2' to '%3'}}} 
{#{\footnote\plain{#}{.bnbsy}}} 
{K{\footnote\plain{K}{sdb_e
rr:0092}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0092}}} 
\f0\cf0\fs28\b\i0\ul0 92 - Conversion error converting '%2' to '%3'
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Memory allocation failed}}} 
{#{\footnote\plain{#}{.bnbsz}}} 
{K{\footnote\plain{K}{sdb_err:0095}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0095}}} 
\f0\cf0\fs28\b\i0\ul0 95 - Memor
y allocation failed\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error in memory management}}} 
{#{\footnote\plain{#}{ID_7gbi.5}}} 
{K{\footnote\plain{K}{sdb_err:00
96}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0096}}} 
\f0\cf0\fs28\b\i0\ul0 96 - Error in memory management\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Function '%1' could
 not be exetuted.Type conflict fpr parameter(s) or retval.}}} 
{#{\footnote\plain{#}{.bnbu1
}}} 
{K{\footnote\plain{K}{sdb_err:0097}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0097}}} 
\f0\cf0\fs28\b\i0\ul0 97 - Function '%1' could not be exetuted
.Type conflict fpr parameter(s) or retval.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data base not found. C
reate ?}}} 
{#{\footnote\plain{#}{.bnbts}}} 
{K{\footnote\plain{K}{sdb_err:0098}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0098}}} 
\f0\cf0\fs28\b\i0\ul0 98 - Data base not found. C
reate ?\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Undefined Error}}} 
{#{\footnote\plain{#}{.bnbtt}}} 
{K{\footnote\plain{K}{sdb_err:0099}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0099}}} 
\f0\cf0\fs28\b\i0\ul0 99 - Undefin
ed Error\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An undefined error occured during programm execution. Pl
ease, contact the \f4\cf4\fs20\b\i0\ul0 run\f2\cf2\fs20\b0\i0\ul0  Software-Werkstatt.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot use static field
s as key components.}}} 
{#{\footnote\plain{#}{.bnbtu}}} 
{K{\footnote\plain{K}{sdb_err:0100}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0100}}} 
\f0\cf0\fs28\b\i0\ul0 100 - Cannot u
se static fields as key components.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not use virtual member as
 key component}}} 
{#{\footnote\plain{#}{.bnbtv}}} 
{K{\footnote\plain{K}{sdb_err:0101}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0101}}} 
\f0\cf0\fs28\b\i0\ul0 101 - Can not use vi
rtual member as key component\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not use generic type member as 
key component}}} 
{#{\footnote\plain{#}{.bnbtw}}} 
{K{\footnote\plain{K}{sdb_err:0102}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0102}}} 
\f0\cf0\fs28\b\i0\ul0 102 - Can not use gen
eric type member as key component\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not use pointer member as k
ey component}}} 
{#{\footnote\plain{#}{.bnbtx}}} 
{K{\footnote\plain{K}{sdb_err:0103}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0103}}} 
\f0\cf0\fs28\b\i0\ul0 103 - Can not use poin
ter member as key component\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data type '%s' not found in resource 
data base.}}} 
{#{\footnote\plain{#}{.bnbty}}} 
{K{\footnote\plain{K}{sdb_err:0104}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0104}}} 
\f0\cf0\fs28\b\i0\ul0 104 - Data type '%s' not
 found in resource data base.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Internal database error (type confl
ict)}}} 
{#{\footnote\plain{#}{.bnbtz}}} 
{K{\footnote\plain{K}{sdb_err:0105}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0105}}} 
\f0\cf0\fs28\b\i0\ul0 105 - Internal database error 
(type conflict)\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When reading an instance the type of the instance
 red differs from the type expected (e.g. when reading a Car ins
tance instead of a Person instance). The reason could be a datab
ase error caused by a system crash without recovery afterwards o
r in internal error in the application program caused by overwri
ting some internal areas.\par
A reorganisation of the database could 
fix the problem if it is an error on the database.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dictionary not
 opened}}} 
{#{\footnote\plain{#}{ID_7gbi_5}}} 
{K{\footnote\plain{K}{sdb_err:0106}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0106}}} 
\f0\cf0\fs28\b\i0\ul0 106 - Dictionary not ope
ned\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The database can be opened when referencing a dictionary, onl
y. Open the dictionary before opening the database.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database not 
opened}}} 
{#{\footnote\plain{#}{.bnbv1}}} 
{K{\footnote\plain{K}{sdb_err:0107}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0107}}} 
\f0\cf0\fs28\b\i0\ul0 107 - Database not opened\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The
 object can be opened when referencing a database, only. Open th
e database before opening the object.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Object not opened or extent
 name invalid}}} 
{#{\footnote\plain{#}{.bnbus}}} 
{K{\footnote\plain{K}{sdb_err:0108}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0108}}} 
\f0\cf0\fs28\b\i0\ul0 108 - Object not open
ed or extent name invalid\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The extent can be opened when referenci
ng an object, only. Open the object before opening the extent. T
he given extent name has to be a defined extent within the objec
t or database.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{'%1' : invalid property name or path for '%2'}}} 
{#{\footnote\plain{#}{.bnbu
t}}} 
{K{\footnote\plain{K}{sdb_err:0109}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0109}}} 
\f0\cf0\fs28\b\i0\ul0 109 - '%1' : invalid property name or p
ath for '%2'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The property is not defined in the structure or the 
property path contains invalid property names. Check the propert
y path and the structure definition and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot rename 
referenced instance.}}} 
{#{\footnote\plain{#}{.bnbuu}}} 
{K{\footnote\plain{K}{sdb_err:0110}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0110}}} 
\f0\cf0\fs28\b\i0\ul0 110 - Cannot r
ename referenced instance.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Automatic recovery for object type %s 
!: %s}}} 
{#{\footnote\plain{#}{.bnbuw}}} 
{K{\footnote\plain{K}{sdb_err:0112}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0112}}} 
\f0\cf0\fs28\b\i0\ul0 112 - Automatic recovery for 
object type %s !: %s\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Eine gel\'f6schte globale Objektinstanz wurde n
och referenziert. Die Instanz wurde reaktiviert, aber nicht zur 
globalen Menge hinzugef\'fcgt. Unbedingt Korrigieren !!!\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Undefined E
xport/Impord request}}} 
{#{\footnote\plain{#}{.bnbux}}} 
{K{\footnote\plain{K}{sdb_err:0113}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0113}}} 
\f0\cf0\fs28\b\i0\ul0 113 - Undefine
d Export/Impord request\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Export/Import is supported for\par
\pard\s0\ql\sb120\tx360 \f2\cf2\fs20\b0\i0\ul0 \tab ODABA \tab to \tab OD
ABA\par
\tab ODABA \tab to \tab BINary file\par
\tab BINary file \tab to \tab ODABA\par
\par
\pard\s0\ql\sb60\tx360 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Import/Export file '%
s' could not be opened}}} 
{#{\footnote\plain{#}{.bnbuy}}} 
{K{\footnote\plain{K}{sdb_err:0114}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0114}}} 
\f0\cf0\fs28\b\i0\ul0 114 - Import
/Export file '%s' could not be opened\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Recovery File could not be 
opened.}}} 
{#{\footnote\plain{#}{.bnbuz}}} 
{K{\footnote\plain{K}{sdb_err:0115}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0115}}} 
\f0\cf0\fs28\b\i0\ul0 115 - Recovery File could n
ot be opened.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A recovery file has been requested but could not be
 opend. Either the path for the file is not available or the rec
overy file was not properly initialized.\par
Check the path definitio
n or initialize the recovery file when required (-> Database adm
inistration)\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error writing recovery file.}}} 
{#{\footnote\plain{#}{IDH1zvb13}}} 
{K{\footnote\plain{K}{sdb_err:0116}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb
_err:0116}}} 
\f0\cf0\fs28\b\i0\ul0 116 - Error writing recovery file.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Recovery requested. D
atabase must be opened in write mode}}} 
{#{\footnote\plain{#}{.bncw1}}} 
{K{\footnote\plain{K}{sdb_err:0117}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:01
17}}} 
\f0\cf0\fs28\b\i0\ul0 117 - Recovery requested. Database must be opened in write mod
e\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Setup terminated with error, old data data base remains unchang
ed.}}} 
{#{\footnote\plain{#}{.bncvs}}} 
{K{\footnote\plain{K}{sdb_err:0118}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0118}}} 
\f0\cf0\fs28\b\i0\ul0 118 - Setup terminated with err
or, old data data base remains unchanged.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reference could not be 
created}}} 
{#{\footnote\plain{#}{.bncvt}}} 
{K{\footnote\plain{K}{sdb_err:0119}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0119}}} 
\f0\cf0\fs28\b\i0\ul0 119 - Reference could not b
e created\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The reference (possibly an index) could not be created 
because of an I/O-Error (e.g. table deleted).\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid access mode
 requested for object}}} 
{#{\footnote\plain{#}{.bncvu}}} 
{K{\footnote\plain{K}{sdb_err:0120}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0120}}} 
\f0\cf0\fs28\b\i0\ul0 120 - Invalid
 access mode requested for object\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When opening an object with acc
ess mode PI_Update or PI_Write the data base has to be opened wi
th access mode PI_Update or PI_Write, too.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid access mode re
quested for PI}}} 
{#{\footnote\plain{#}{.bncvv}}} 
{K{\footnote\plain{K}{sdb_err:0121}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0121}}} 
\f0\cf0\fs28\b\i0\ul0 121 - Invalid access
 mode requested for PI\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When opening a PI with access mode PI_Upda
te or PI_Write the object has to be opened with access mode PI_U
pdate or PI_Write, too. No-update References can be opened in PI
_Write-Mode, only, when the Parent-PI has been opened with PI_Wr
ite-mode.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Missing structure or extent name}}} 
{#{\footnote\plain{#}{.bncvw}}} 
{K{\footnote\plain{K}{sdb_err:0122}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_e
rr:0122}}} 
\f0\cf0\fs28\b\i0\ul0 122 - Missing structure or extent name\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot replace diff
rent length strings in component keys}}} 
{#{\footnote\plain{#}{.bncvx}}} 
{K{\footnote\plain{K}{sdb_err:0123}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0
123}}} 
\f0\cf0\fs28\b\i0\ul0 123 - Cannot replace diffrent length strings in component key
s\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Using Rename or Copy functions with renaming objects by mask st
rings the mask has to be structured the same way for source and 
target, when the key is a component key (defined by more than on
e key component).\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Type of extent '%1' differs from type of ODABA2
-Structure '%2'.}}} 
{#{\footnote\plain{#}{.bncvy}}} 
{K{\footnote\plain{K}{sdb_err:0124}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0124}}} 
\f0\cf0\fs28\b\i0\ul0 124 - Type of exte
nt '%1' differs from type of ODABA2-Structure '%2'.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure '%1
' undefined}}} 
{#{\footnote\plain{#}{IDH1zvc23}}} 
{K{\footnote\plain{K}{sdb_err:0126}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0126}}} 
\f0\cf0\fs28\b\i0\ul0 126 - Structure '%1'
 undefined\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Structure definitions can not be added implicitely by 
copying derived structure Instances (e.g. Class definitions). Ad
d or copy the structure definition befor copying the derived ins
tance.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Extent '%2' already exists}}} 
{#{\footnote\plain{#}{.bncn1}}} 
{K{\footnote\plain{K}{sdb_err:0127}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0127}}} 
\f0\cf0\fs28\b\i0\ul0 12
7 - Extent '%2' already exists\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An extent for a Enumeration to be 
added or copied does already exist for another type. Check the E
numeration names with the existing extent names an try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{'%2
' does already exist as Structure definition}}} 
{#{\footnote\plain{#}{.bncms}}} 
{K{\footnote\plain{K}{sdb_err:0128}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sd
b_err:0128}}} 
\f0\cf0\fs28\b\i0\ul0 128 - '%2' does already exist as Structure definition\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 T
he name for the given Enumeration is in use already as name for 
a Structure definition. Names for Types (Enumerations, Structure
s) must be unique within the dictionary.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{'%2' does already exist 
as Enumeration}}} 
{#{\footnote\plain{#}{.bncmu}}} 
{K{\footnote\plain{K}{sdb_err:0130}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0130}}} 
\f0\cf0\fs28\b\i0\ul0 130 - '%2' does alre
ady exist as Enumeration\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The name for the given Structure is in u
se already as name for a Structure definition. Names for Types (
Enumerations, Structures) must be unique within the dictionary.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{R
eady Structure(%2) can not be replaced}}} 
{#{\footnote\plain{#}{.bncmv}}} 
{K{\footnote\plain{K}{sdb_err:0131}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:
0131}}} 
\f0\cf0\fs28\b\i0\ul0 131 - Ready Structure(%2) can not be replaced\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Structure defin
itions with state ready (for storing data) can not be replaced. 
Create a new version befor replacing the structure.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Different acc
ess type for structure '%1' and '%2'}}} 
{#{\footnote\plain{#}{.bncmw}}} 
{K{\footnote\plain{K}{sdb_err:0132}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:01
32}}} 
\f0\cf0\fs28\b\i0\ul0 132 - Different access type for structure '%1' and '%2'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When co
pying Structure definitions source and target must have the same
 access type.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{ODABA2-Structure (%1) differs in type from Structur
e '%2'}}} 
{#{\footnote\plain{#}{.bncmx}}} 
{K{\footnote\plain{K}{sdb_err:0133}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0133}}} 
\f0\cf0\fs28\b\i0\ul0 133 - ODABA2-Structure (%1) 
differs in type from Structure '%2'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When replacing Structure defi
nitions source and target must have the same internal type, i.e.
 the source must be a copied version of the target Structure def
inition.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Version conflict for structure '%2'}}} 
{#{\footnote\plain{#}{.bncmy}}} 
{K{\footnote\plain{K}{sdb_err:0134}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb
_err:0134}}} 
\f0\cf0\fs28\b\i0\ul0 134 - Version conflict for structure '%2'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When replacing
 Structure definitions, older versions can be replaced by newer 
once, only. Make shure that the copy direction is correct.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Struct
ure '%1' not defined as ODABA2-Structure}}} 
{#{\footnote\plain{#}{.bncmz}}} 
{K{\footnote\plain{K}{sdb_err:0135}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_er
r:0135}}} 
\f0\cf0\fs28\b\i0\ul0 135 - Structure '%1' not defined as ODABA2-Structure\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{'%1' -
 Structure version not ready}}} 
{#{\footnote\plain{#}{con8pt.6u}}} 
{K{\footnote\plain{K}{sdb_err:0136}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0136}}} 
\f0\cf0\fs28\b\i0\ul0 136
 - '%1' - Structure version not ready\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A structure definition has 
no valid (ready) version. This happens befor setting a Structure
 definition to ready the first time, only. Set the Structure Def
inition to ready and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Extent '%1' has no Enumeration re
ference}}} 
{#{\footnote\plain{#}{.bnco1}}} 
{K{\footnote\plain{K}{sdb_err:0139}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0139}}} 
\f0\cf0\fs28\b\i0\ul0 139 - Extent '%1' has no En
umeration reference\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An atempt was made to open an extent for an E
numeration which has no reference to an Enumeration definition. 
Check whether the definition ist correct and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure
 : %1  Member '%2''%3' not available in database.}}} 
{#{\footnote\plain{#}{.bncns}}} 
{K{\footnote\plain{K}{sdb_err:0
140}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0140}}} 
\f0\cf0\fs28\b\i0\ul0 140 - Structure : %1  Member '%2''%3' not availab
le in database.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Struktur : %s  Member '%s''%s' not checked .}}} 
{#{\footnote\plain{#}{.bncn
t}}} 
{K{\footnote\plain{K}{sdb_err:0141}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0141}}} 
\f0\cf0\fs28\b\i0\ul0 141 - Struktur : %s  Member '%s''%s' no
t checked .\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Data type '%s' not found in resource data base.}}} 
{#{\footnote\plain{#}{.bncnu
}}} 
{K{\footnote\plain{K}{sdb_err:0142}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0142}}} 
\f0\cf0\fs28\b\i0\ul0 142 - Data type '%s' not found in resour
ce data base.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Static Properties (%2) not supported as key compone
nts.}}} 
{#{\footnote\plain{#}{.bncnv}}} 
{K{\footnote\plain{K}{sdb_err:0143}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0143}}} 
\f0\cf0\fs28\b\i0\ul0 143 - Static Properties (%2) n
ot supported as key components.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Virtuel Properties (%2) not suppo
rted as key components.}}} 
{#{\footnote\plain{#}{.bncnw}}} 
{K{\footnote\plain{K}{sdb_err:0144}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0144}}} 
\f0\cf0\fs28\b\i0\ul0 144 - Virtu
el Properties (%2) not supported as key components.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Properties (%
2) with generic type are not supported as key components.}}} 
{#{\footnote\plain{#}{.bncnx}}} 
{K{\footnote\plain{K}{s
db_err:0145}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0145}}} 
\f0\cf0\fs28\b\i0\ul0 145 - Properties (%2) with generic type a
re not supported as key components.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Class is available in read mo
de, only. able to generate include file}}} 
{#{\footnote\plain{#}{.bncny}}} 
{K{\footnote\plain{K}{sdb_err:0146}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err
:0146}}} 
\f0\cf0\fs28\b\i0\ul0 146 - Class is available in read mode, only. able to genera
te include file\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error reading shared Base Structure instance}}} 
{#{\footnote\plain{#}{.bncn
z}}} 
{K{\footnote\plain{K}{sdb_err:0147}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0147}}} 
\f0\cf0\fs28\b\i0\ul0 147 - Error reading shared Base Structu
re instance\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{More than one Reference Property '%2' referenced in K
ey Component path '%1'}}} 
{#{\footnote\plain{#}{con8pt.7u}}} 
{K{\footnote\plain{K}{sdb_err:0148}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0148}}} 
\f0\cf0\fs28\b\i0\ul0 148 - Mor
e than one Reference Property '%2' referenced in Key Component p
ath '%1'\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not refer to Relationship '%3' in Key Component path
 '%2'}}} 
{#{\footnote\plain{#}{.bncp1}}} 
{K{\footnote\plain{K}{sdb_err:0149}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0149}}} 
\f0\cf0\fs28\b\i0\ul0 149 - Can not refer to Relati
onship '%3' in Key Component path '%2'\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure '%1' Key Compone
nt path '%2'to more than one Collections (%3)}}} 
{#{\footnote\plain{#}{.bncos}}} 
{K{\footnote\plain{K}{sdb_err:0150}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{s
db_err:0150}}} 
\f0\cf0\fs28\b\i0\ul0 150 - Structure '%1' Key Component path '%2'to more t
han one Collections (%3)\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure '%1' Property name '%1'contain
s more than 40 characters}}} 
{#{\footnote\plain{#}{.bncot}}} 
{K{\footnote\plain{K}{sdb_err:0151}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0151}}} 
\f0\cf0\fs28\b\i0\ul0 151 - Str
ucture '%1' Property name '%1'contains more than 40 characters\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{In
sertion error for Inverse Reference - not added}}} 
{#{\footnote\plain{#}{.bncou}}} 
{K{\footnote\plain{K}{sdb_err:015
2}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0152}}} 
\f0\cf0\fs28\b\i0\ul0 152 - Insertion error for Inverse Reference - not a
dded\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When maintaining the inverse reference for a relationship an
 error occured. Probably the instance could not be added to the 
inverse reference, because it did already exist or a duplicate k
ey was detected for a unique index.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Operation '%1' not supprted f
or type '%2' in '%3'}}} 
{#{\footnote\plain{#}{.bncow}}} 
{K{\footnote\plain{K}{sdb_err:0154}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0154}}} 
\f0\cf0\fs28\b\i0\ul0 154 - Operatio
n '%1' not supprted for type '%2' in '%3'\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Incompatible operation 
return type}}} 
{#{\footnote\plain{#}{.bncox}}} 
{K{\footnote\plain{K}{sdb_err:0155}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0155}}} 
\f0\cf0\fs28\b\i0\ul0 155 - Incompatible oper
ation return type\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The return value passed from a function or expr
ession is not compatible to the type required for the operation 
call.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not delete derived instance via inverse reference}}} 
{#{\footnote\plain{#}{.bncoy
}}} 
{K{\footnote\plain{K}{sdb_err:0156}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0156}}} 
\f0\cf0\fs28\b\i0\ul0 156 - Can not delete derived instance vi
a inverse reference\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attempt to delete a derived inst
ance via the inverse reference in the base structure instance. D
eleteing an derived instance, however, is possible via the exten
t owning the instance, only.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid type for week typed referenc
e}}} 
{#{\footnote\plain{#}{.bncoz}}} 
{K{\footnote\plain{K}{sdb_err:0157}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0157}}} 
\f0\cf0\fs28\b\i0\ul0 157 - Invalid type for week typed
 reference\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The required type is not based on the common base stru
cture for the week typed reference.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Reference is nether untyped n
or week typed}}} 
{#{\footnote\plain{#}{con8pt.8u}}} 
{K{\footnote\plain{K}{sdb_err:0158}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0158}}} 
\f0\cf0\fs28\b\i0\ul0 158 - Reference is
 nether untyped nor week typed\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Some functions (e.g. \f4\cf4\fs20\b\i0\ul0 SetType()\f2\cf2\fs20\b0\i0\ul0 ) ar
e not supported for strong typed references.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not add an exist
ing instance to an owning reference}}} 
{#{\footnote\plain{#}{.bncq1}}} 
{K{\footnote\plain{K}{sdb_err:0159}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:015
9}}} 
\f0\cf0\fs28\b\i0\ul0 159 - Can not add an existing instance to an owning reference\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An
 attempt was made to add an existing instance (having an instanc
e ID) to an owning reference (property or extent), e.g. by \f4\cf4\fs20\b\i0\ul0 AddRe
ference()\f2\cf2\fs20\b0\i0\ul0 . Existing instances, however, can be added to referenc
es not owning their instances, only.\par
Check the definition of the 
referenced extent or reference property within the structure def
inition and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Type is valid for extended enumarations, o
nly}}} 
{#{\footnote\plain{#}{.bncps}}} 
{K{\footnote\plain{K}{sdb_err:0160}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0160}}} 
\f0\cf0\fs28\b\i0\ul0 160 - Type is valid for extende
d enumarations, only\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Adding an enumarator to an enumeration a typ
e has been passed as parameter. However, the type parameter is v
alid for extended enumerations.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Extended Enumeration requires typ
e f\'fcr Enumerator}}} 
{#{\footnote\plain{#}{.bncpt}}} 
{K{\footnote\plain{K}{sdb_err:0161}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0161}}} 
\f0\cf0\fs28\b\i0\ul0 161 - Extended Enu
meration requires type f\'fcr Enumerator\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When adding an Enumerator t
o an extended Enumeration a type is required. The Type has to re
fer to a Structure wich ist derived from the BaseType of teh ext
ended Enumeration. The type VOID is assumed to be a BaseType for
 any Type.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Maximal number of instances exceeded}}} 
{#{\footnote\plain{#}{.bncpu}}} 
{K{\footnote\plain{K}{sdb_err:0162
}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0162}}} 
\f0\cf0\fs28\b\i0\ul0 162 - Maximal number of instances exceeded\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Adding an 
Instance to a Collection the defined maximum number of instances
 has been exceeded. The instance was not added.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot remove dom
inant instance from Relationship in dependent instance}}} 
{#{\footnote\plain{#}{.bncpv}}} 
{K{\footnote\plain{K}{sdb_
err:0163}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0163}}} 
\f0\cf0\fs28\b\i0\ul0 163 - Cannot remove dominant instance from R
elationship in dependent instance\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Within a relationship one side 
has been marked as dependent, e.g. the instances referenced in t
he relationship depend on the relationship. Removing instances f
rom a depending Relationship is possible from the reference with
in the dominant instance, only.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not delete instances from int
ersect Extents}}} 
{#{\footnote\plain{#}{.bncpw}}} 
{K{\footnote\plain{K}{sdb_err:0164}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0164}}} 
\f0\cf0\fs28\b\i0\ul0 164 - Can not delete
 instances from intersect Extents\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An attemp was made to delete an
 instance from an Extent, which has been defined as an intersect
 Extent, i.g. it is exactly the intersection of its BaseExtents.
 It is not possible to remove instances from intersect Extents. 
\par
Remove the instance from one of the BaseExtent. Consequently it 
will be removed from the derived intersect Extent, too.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not a
dd instances to union Extents}}} 
{#{\footnote\plain{#}{.bncpx}}} 
{K{\footnote\plain{K}{sdb_err:0165}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0165}}} 
\f0\cf0\fs28\b\i0\ul0 165 -
 Can not add instances to union Extents\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An attemp was made to add
 an instance to an Extent, which has been defined as an union Ex
tent, e.g. it is exactly the union of its derived Extents. It is
 not possible to add instances to union Extents. \par
Add the instanc
e to one of the derived Extent. Consequently it will be added to
 the union BaseExtent, too.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance already exists in Extent: %1
}}} 
{#{\footnote\plain{#}{.bncpy}}} 
{K{\footnote\plain{K}{sdb_err:0166}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0166}}} 
\f0\cf0\fs28\b\i0\ul0 166 - Instance already exists in E
xtent: %1\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A set of derived Extents has been marked as dijunct set
s, i.e. no instance may appear in two of these derived Extents a
t the same time. However the instance just to be added does alre
ady exist in one of the derived Extents of its BaseExtent.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Expres
sion '%2' not defined in class '%2'}}} 
{#{\footnote\plain{#}{.bncpz}}} 
{K{\footnote\plain{K}{sdb_err:0167}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:016
7}}} 
\f0\cf0\fs28\b\i0\ul0 167 - Expression '%2' not defined in class '%2'\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Base extent '%2'
 for temporary extent '%1' not defined}}} 
{#{\footnote\plain{#}{con8pt.9u}}} 
{K{\footnote\plain{K}{sdb_err:0168}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_e
rr:0168}}} 
\f0\cf0\fs28\b\i0\ul0 168 - Base extent '%2' for temporary extent '%1' not defi
ned\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Temporary MainBase required but not found}}} 
{#{\footnote\plain{#}{.bncr1}}} 
{K{\footnote\plain{K}{sdb_err:0169}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sd
b_err:0169}}} 
\f0\cf0\fs28\b\i0\ul0 169 - Temporary MainBase required but not found\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Creatin
g instances is not allowed for not owning references.}}} 
{#{\footnote\plain{#}{.bncqs}}} 
{K{\footnote\plain{K}{sdb_e
rr:0170}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0170}}} 
\f0\cf0\fs28\b\i0\ul0 170 - Creating instances is not allowed for n
ot owning references.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Type conflict for set operation}}} 
{#{\footnote\plain{#}{.bncqt}}} 
{K{\footnote\plain{K}{sdb_er
r:0171}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0171}}} 
\f0\cf0\fs28\b\i0\ul0 171 - Type conflict for set operation\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sort orde
r for collection '%1' is missing.}}} 
{#{\footnote\plain{#}{.bncqu}}} 
{K{\footnote\plain{K}{sdb_err:0172}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0172}}} 
\f0\cf0\fs28\b\i0\ul0 1
72 - Sort order for collection '%1' is missing.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid typ detec
ted reading a database entry}}} 
{#{\footnote\plain{#}{.bncqw}}} 
{K{\footnote\plain{K}{sdb_err:0174}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0174}}} 
\f0\cf0\fs28\b\i0\ul0 174 - 
Invalid typ detected reading a database entry\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database required i
n write mode}}} 
{#{\footnote\plain{#}{.bncqx}}} 
{K{\footnote\plain{K}{sdb_err:0175}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0175}}} 
\f0\cf0\fs28\b\i0\ul0 175 - Database require
d in write mode\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A new software version has been installed which r
equires some internal changes within the database. This is possi
ble, only, whe the database has been opened in write mode. Pleas
e take in account that executing the database setup may cause ol
der software versions to fail.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Software does not correspond to th
e database version}}} 
{#{\footnote\plain{#}{.bncqy}}} 
{K{\footnote\plain{K}{sdb_err:0176}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0176}}} 
\f0\cf0\fs28\b\i0\ul0 176 - Software d
oes not correspond to the database version\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The database version i
s newer tha the version of the software used for processing the 
database. You should install the proper software version (DLL, s
erver) to process the software.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Maximal version number exceeded}}} 
{#{\footnote\plain{#}{.b
ncqz}}} 
{K{\footnote\plain{K}{sdb_err:0177}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0177}}} 
\f0\cf0\fs28\b\i0\ul0 177 - Maximal version number exceede
d\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Version numbers may not exceed the value 65534.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Version numbers 
must be created in ascending order}}} 
{#{\footnote\plain{#}{con8pt.0u}}} 
{K{\footnote\plain{K}{sdb_err:0178}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0
178}}} 
\f0\cf0\fs28\b\i0\ul0 178 - Version numbers must be created in ascending order\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Creat
ing new versions is possible for the next version number (curren
t version+1), only.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Version conflict when writing an instance}}} 
{#{\footnote\plain{#}{.bnc
s1}}} 
{K{\footnote\plain{K}{sdb_err:0179}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0179}}} 
\f0\cf0\fs28\b\i0\ul0 179 - Version conflict when writing an
 instance\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When using object versions instances older than the cur
rent object verion may be updated, only, as long as there has no
 newer instance for the object been created. When accessing hist
orical versions of an instance these can not be modified.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not
 delete a historical instance version}}} 
{#{\footnote\plain{#}{.bncrs}}} 
{K{\footnote\plain{K}{sdb_err:0180}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0
180}}} 
\f0\cf0\fs28\b\i0\ul0 180 - Can not delete a historical instance version\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was a
n attempt do delete a historical instance version, i.e. an insta
nce that has already a newer version. However only the current i
nstance version can be deleted.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not reset write protection fo
r historical instances}}} 
{#{\footnote\plain{#}{.bncrt}}} 
{K{\footnote\plain{K}{sdb_err:0181}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
\f0\cf0\fs28\b\i0\ul0 181 - Can not reset writ
e protection for historical instances\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Historical instances are wr
ite protected by nature and can not be modified anymore.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{File '%1
' couls not be opened.}}} 
{#{\footnote\plain{#}{.bncru}}} 
{K{\footnote\plain{K}{sdb_err:0182}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0182}}} 
\f0\cf0\fs28\b\i0\ul0 182 - File '
%1' couls not be opened.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Inserting instance not implemented f\'fcr b
inary access, yet.}}} 
{#{\footnote\plain{#}{.bncrv}}} 
{K{\footnote\plain{K}{sdb_err:0183}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0183}}} 
\f0\cf0\fs28\b\i0\ul0 183 - Inserting 
instance not implemented f\'fcr binary access, yet.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{The current key 
can not be used for adding new instances}}} 
{#{\footnote\plain{#}{.bncrw}}} 
{K{\footnote\plain{K}{sdb_err:0184}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_er
r:0184}}} 
\f0\cf0\fs28\b\i0\ul0 184 - The current key can not be used for adding new insta
nces\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When creating a new instance for an extent it can be added v
ia the the ident key. Another unique key can be used for adding 
a new instance when the extent the PI-handle is based on is the 
root extent.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Generic attribute '%1' not defined}}} 
{#{\footnote\plain{#}{.bncrx}}} 
{K{\footnote\plain{K}{sdb_err:0185
}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0185}}} 
\f0\cf0\fs28\b\i0\ul0 185 - Generic attribute '%1' not defined\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The attempt 
to position a generic Attribute failed, because the attribute na
me passed could not be found in the Structure and its BaseStruct
ures.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid or missing dictionary path}}} 
{#{\footnote\plain{#}{.bncry}}} 
{K{\footnote\plain{K}{sdb_err:0186}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err
:0186}}} 
\f0\cf0\fs28\b\i0\ul0 186 - Invalid or missing dictionary path\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The path given for 
the dictionary is empty or invalid. Check the path specification
 and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Output path for statistics file missing or wrong.
 aborted.}}} 
{#{\footnote\plain{#}{.bncrz}}} 
{K{\footnote\plain{K}{sdb_err:0187}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0187}}} 
\f0\cf0\fs28\b\i0\ul0 187 - Output path for sta
tistics file missing or wrong. aborted.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{OQL class '%1' is not def
ined}}} 
{#{\footnote\plain{#}{IDH1zvby3}}} 
{K{\footnote\plain{K}{sdb_err:0188}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0188}}} 
\f0\cf0\fs28\b\i0\ul0 188 - OQL class '%1' is not
 defined\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1  Member '%2''%4' is not defined in Structu
re '%3' .}}} 
{#{\footnote\plain{#}{.bnct1}}} 
{K{\footnote\plain{K}{sdb_err:0189}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0189}}} 
\f0\cf0\fs28\b\i0\ul0 189 - Structure: %1  Memb
er '%2''%4' is not defined in Structure '%3' .\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 Memb
er '%2'/property path '%4' is not defined.}}} 
{#{\footnote\plain{#}{.bncss}}} 
{K{\footnote\plain{K}{sdb_err:0190}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_
err:0190}}} 
\f0\cf0\fs28\b\i0\ul0 190 - Structure: %1 Member '%2'/property path '%4' is no
t defined.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1  Member '%2''%4' is not defined in Struc
ture '%3' .}}} 
{#{\footnote\plain{#}{.bncst}}} 
{K{\footnote\plain{K}{sdb_err:0191}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0191}}} 
\f0\cf0\fs28\b\i0\ul0 191 - Structure: %1  Me
mber '%2''%4' is not defined in Structure '%3' .\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1  M
ember '%2'has been  marked as secundary.}}} 
{#{\footnote\plain{#}{.bncsu}}} 
{K{\footnote\plain{K}{sdb_err:0192}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_er
r:0192}}} 
\f0\cf0\fs28\b\i0\ul0 192 - Structure: %1  Member '%2'has been  marked as secund
ary.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1  Member '%2'mark has been reset.}}} 
{#{\footnote\plain{#}{.bncsv}}} 
{K{\footnote\plain{K}{sdb_err:
0193}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0193}}} 
\f0\cf0\fs28\b\i0\ul0 193 - Structure: %1  Member '%2'mark has been re
set.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1  Member '%2''%4' in Structure '%3' is set to s
ecundary.}}} 
{#{\footnote\plain{#}{.bncsw}}} 
{K{\footnote\plain{K}{sdb_err:0194}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0194}}} 
\f0\cf0\fs28\b\i0\ul0 194 - Structure: %1  Memb
er '%2''%4' in Structure '%3' is set to secundary.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 
 BaseMember '%2''%4' in Structure '%3' is base too.}}} 
{#{\footnote\plain{#}{.bncsx}}} 
{K{\footnote\plain{K}{sdb_err
:0195}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
\f0\cf0\fs28\b\i0\ul0 195 - Structure: %1  BaseMember '%2''%4' in Structure '%3' 
is base too.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1  BaseMember '%2'than one index defined
.}}} 
{#{\footnote\plain{#}{.bncsy}}} 
{K{\footnote\plain{K}{sdb_err:0196}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0196}}} 
\f0\cf0\fs28\b\i0\ul0 196 - Structure: %1  BaseMember '
%2'than one index defined.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1  Key '%2' components are
 defined.}}} 
{#{\footnote\plain{#}{.bncsz}}} 
{K{\footnote\plain{K}{sdb_err:0197}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0197}}} 
\f0\cf0\fs28\b\i0\ul0 197 - Structure: %1  Key 
'%2' components are defined.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Version could not be created - objec
t not opened for write access.}}} 
{#{\footnote\plain{#}{con8pt..u}}} 
{K{\footnote\plain{K}{sdb_err:0198}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0198}}} 
\f0\cf0\fs28\b\i0\ul0 1
98 - Version could not be created - object not opened for write 
access.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 For adding a new version the object has to be opened in w
rite mode.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not create or modify historical object instances}}} 
{#{\footnote\plain{#}{.b
ncu1}}} 
{K{\footnote\plain{K}{sdb_err:0199}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0199}}} 
\f0\cf0\fs28\b\i0\ul0 199 - Can not create or modify histo
rical object instances\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Instances accessed via PI-Handle can be cr
eated or updated as long as the PI-Handle is set to the current 
version (CUR_VERSION). The current version is the version set in
 the related database oder object handle. For updating or creati
ng historical instance versions the required version has to be s
et in the database or object handle.\par
For more information see ACO
bject::SetVersion() and PI::SetVersion().\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{External defined DLL '%
1' could not be loaded}}} 
{#{\footnote\plain{#}{.bnctu}}} 
{K{\footnote\plain{K}{sdb_err:0202}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0202}}} 
\f0\cf0\fs28\b\i0\ul0 202 - Extern
al defined DLL '%1' could not be loaded\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Can not set new object ve
rsion}}} 
{#{\footnote\plain{#}{.bnctv}}} 
{K{\footnote\plain{K}{sdb_err:0203}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0203}}} 
\f0\cf0\fs28\b\i0\ul0 203 - Can not set new object 
version\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The requiered object version could not be set because of 
an open transaction. A new object version can not be set as long
 as any transaction is not finished. Close all transaktions befo
r setting a new object version.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance not available for select
ed version}}} 
{#{\footnote\plain{#}{.bnctw}}} 
{K{\footnote\plain{K}{sdb_err:0204}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0204}}} 
\f0\cf0\fs28\b\i0\ul0 204 - Instance not avail
able for selected version\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The requested instance is stored in the
 database but not available for the selected (historical) versio
n. For viewing/editing the instance set the proper version (SetV
ersion()).\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid version number}}} 
{#{\footnote\plain{#}{.bnctx}}} 
{K{\footnote\plain{K}{sdb_err:0205}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0205}}} 
\f0\cf0\fs28\b\i0\ul0 20
5 - Invalid version number\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Updating the time limit is possible fo
r defined object versions, only. Add the version to be updated t
o the database before updating.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid time limit for object ver
sion}}} 
{#{\footnote\plain{#}{.bncty}}} 
{K{\footnote\plain{K}{sdb_err:0206}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0206}}} 
\f0\cf0\fs28\b\i0\ul0 206 - Invalid time limit for o
bject version\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Updating the time limit for or creating a new objec
t version the time limit must be greater then current date/time.
 If a previous version exist, it must be greater then the time l
imit for the previous version. If a succeeding version is alread
y defined the time limit must be lower than the limit of the suc
ceeding version.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Object could not be opened - invalid object vers
ion}}} 
{#{\footnote\plain{#}{.bnctz}}} 
{K{\footnote\plain{K}{sdb_err:0207}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0207}}} 
\f0\cf0\fs28\b\i0\ul0 207 - Object could not be opene
d - invalid object version\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When opening a database or object no v
alid object version was found. This is the case when the databas
e resources are defined with time limit. Some application may de
stroy the database when detecting this eror. However, you can tr
y to access a time limited database after changing the current d
ate on your computer.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Internal transaction aborted due to an erro
r in a lower level transaction}}} 
{#{\footnote\plain{#}{con8pt._u}}} 
{K{\footnote\plain{K}{sdb_err:0208}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0208}}} 
\f0\cf0\fs28\b\i0\ul0 2
08 - Internal transaction aborted due to an error in a lower lev
el transaction\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Internal transactions are started always when a wr
ite operation on the database is performed and include all activ
ities to guarantee the database consistence. Moreover, the appli
cation may react on a StoreData event to perform actions for ens
uring the logical database consistence. Thus, write activities o
n a database may have several consecutive write operations that 
perform subordinated internal transactions. If one of these tran
sactions has been failed the whole internal transaction will be 
cancelled. For more detailed error information about the errors 
detected check the error.lst file.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Empty key values can not be ad
ded}}} 
{#{\footnote\plain{#}{.bncv1}}} 
{K{\footnote\plain{K}{sdb_err:0209}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0209}}} 
\f0\cf0\fs28\b\i0\ul0 209 - Empty key values can not 
be added\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attempt to add an empty key value to an ind
ex, however, the index was defined as not containing empty key v
alues. Use a non empty key or change the index definition for th
e reference and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{DataExchange '%1' not defined.}}} 
{#{\footnote\plain{#}{.bncus}}} 
{K{\footnote\plain{K}{sd
b_err:0210}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0210}}} 
\f0\cf0\fs28\b\i0\ul0 210 - DataExchange '%1' not defined.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error 
accessing ODBC-extent: %1 %2%3 %4}}} 
{#{\footnote\plain{#}{.bncut}}} 
{K{\footnote\plain{K}{sdb_err:0222}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0222}}} 
\f0\cf0\fs28\b\i0\ul0 2
22 - Error accessing ODBC-extent: %1 %2%3 %4 \par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure import : 
%1}}} 
{#{\footnote\plain{#}{.bncuu}}} 
{K{\footnote\plain{K}{sdb_err:0223}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0223}}} 
\f0\cf0\fs28\b\i0\ul0 223 - Structure import : %1\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Recov
ery action paending (database inconsistent)}}} 
{#{\footnote\plain{#}{.bncuv}}} 
{K{\footnote\plain{K}{sdb_err:0224}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb
_err:0224}}} 
\f0\cf0\fs28\b\i0\ul0 224 - Recovery action paending (database inconsistent)\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{H
eadline differs from structure definition. (E)SDF file not opene
d.}}} 
{#{\footnote\plain{#}{.bncux}}} 
{K{\footnote\plain{K}{sdb_err:0229}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0229}}} 
\f0\cf0\fs28\b\i0\ul0 229 - Headline differs from stru
cture definition. (E)SDF file not opened.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{The property handle doe
s not allow block mode access}}} 
{#{\footnote\plain{#}{.bncuy}}} 
{K{\footnote\plain{K}{sdb_err:0230}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0230}}} 
\f0\cf0\fs28\b\i0\ul0 230 -
 The property handle does not allow block mode access\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Block mode 
access can be used with read only property handles for typed col
lections, only.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dictionary older than database}}} 
{#{\footnote\plain{#}{.bncuz}}} 
{K{\footnote\plain{K}{sdb_err:0231}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{s
db_err:0231}}} 
\f0\cf0\fs28\b\i0\ul0 231 - Dictionary older than database\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The database has 
been updated using a newer dictionary. This prohibits processing
 the database with the older dictionary version.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dictionary versi
on higher than database schema version. Setup and continue?}}} 
{#{\footnote\plain{#}{IDH1z
vc13}}} 
{K{\footnote\plain{K}{sdb_err:0232}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0232}}} 
\f0\cf0\fs28\b\i0\ul0 232 - Dictionary version higher than
 database schema version. Setup and continue?\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The database has be
en opened with a new dictionary version. This may lead to confli
cts with the application as fas as the application is not upward
s compatible. In this case it is better to run a database setup.
  \par
When continuing the database schema version is updated accordi
ng to the dictionary version (project version). Requiered instan
ce conversions to new structure formats are performed at runtime
 automatically when accessing an old fashioned instance. The dat
abase, however, can not be opened now with an older dictionary v
ersion.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 \par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dictionary version higher than database schema version. C
ontinue?}}} 
{#{\footnote\plain{#}{.bndw1}}} 
{K{\footnote\plain{K}{sdb_err:0233}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0233}}} 
\f0\cf0\fs28\b\i0\ul0 233 - Dictionary version h
igher than database schema version. Continue?\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The database has be
en opened with a new dictionary version. This may lead to confli
cts with the application as fas as the application is not upward
s compatible. In this case it is better to run a database setup.
  \par
Otherwise requiered instance conversions to new structure form
ats are temporarily performed at runtime when accessing an old f
ashioned instance.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid name in property path}}} 
{#{\footnote\plain{#}{.bndvs}}} 
{K{\footnote\plain{K}{sdb_err:023
4}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0234}}} 
\f0\cf0\fs28\b\i0\ul0 234 - Invalid name in property path\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A property path 
contains a sequence of property names separated by dots (.). Eac
h name following a dot must refer to a property contained in the
 structure definition (type) of the preceeding property. If the 
property path is part of a view path the property names must ref
er to references or relationships. \par
Ckeck the pats and structure 
definitions ant try again after correction.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Parent PI-Handle not 
positioned}}} 
{#{\footnote\plain{#}{.bndvt}}} 
{K{\footnote\plain{K}{sdb_err:0235}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0235}}} 
\f0\cf0\fs28\b\i0\ul0 235 - Parent PI-Handle n
ot positioned\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attemt to read or write via an subordi
nated PI-Handle. This is possible only when all parent PI-Handle
s in the handle hierarchy are positioned.\par
Contact the application
 programmer for solving the problem.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Type conflict when adding an
 instance}}} 
{#{\footnote\plain{#}{.bndvu}}} 
{K{\footnote\plain{K}{sdb_err:0236}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0236}}} 
\f0\cf0\fs28\b\i0\ul0 236 - Type conflict when 
adding an instance\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When adding an instance to a collection or ref
erence the reference/collection type differed from the instance 
type. Define a weak or untyped reference for supporting differen
t instance types within a collection or provide the correct inst
ance type.\par
Probably the error is an error in the application prog
ram. Contact the application programmer for further help.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Version
ing possible for DataArea 0 upto 4 GigaByte}}} 
{#{\footnote\plain{#}{.bndvv}}} 
{K{\footnote\plain{K}{sdb_err:0238}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb
_err:0238}}} 
\f0\cf0\fs28\b\i0\ul0 238 - Versioning possible for DataArea 0 upto 4 GigaByt
e\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Storing transaktion failed. Database might be damaged!}}} 
{#{\footnote\plain{#}{.bndvy}}} 
{K{\footnote\plain{K}{sdb
_err:0241}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0241}}} 
\f0\cf0\fs28\b\i0\ul0 241 - Storing transaktion failed. Database 
might be damaged!\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A failure appeared when storing a transaction t
o the database. The database is probably damaged. \par
Ask the admini
strator to run database setup to reorganize the database.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error s
toring transaction. Data might be lost.}}} 
{#{\footnote\plain{#}{.bndvz}}} 
{K{\footnote\plain{K}{sdb_err:0242}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err
:0242}}} 
\f0\cf0\fs28\b\i0\ul0 242 - Error storing transaction. Data might be lost.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An erro
r occured whens storing a transaktion. In case of nested transac
tions the higher transaction will be cancelled.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Old structure ver
sion not available}}} 
{#{\footnote\plain{#}{IDH1zvd23}}} 
{K{\footnote\plain{K}{sdb_err:0243}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0243}}} 
\f0\cf0\fs28\b\i0\ul0 243 - Old str
ucture version not available\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An instance with an old structure ve
rsion has been found in the database. The old structure version,
 however, is not available in the database dictionary. Reorganiz
e the database using the old dictionary version:\par
  Setup  old_dic
t  dictionary  database  sys_ict\par
and try again\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot change mode 
when running in block access mode}}} 
{#{\footnote\plain{#}{.bndn1}}} 
{K{\footnote\plain{K}{sdb_err:0244}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0244}}} 
\f0\cf0\fs28\b\i0\ul0 2
44 - Cannot change mode when running in block access mode\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The acc
ess mode can be changed to to update or write only when block ac
cess mode is switched off. Change to normal mode (ChangeBuffer(0
)) before changing the access mode with ChandgeMode().\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{To many pa
rameters have been passed to function or expression}}} 
{#{\footnote\plain{#}{.bndms}}} 
{K{\footnote\plain{K}{sdb_err
:0300}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0300}}} 
\f0\cf0\fs28\b\i0\ul0 300 - To many parameters have been passed to fu
nction or expression\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Type definition '%1' was generated with diff
erent inernal IDs.}}} 
{#{\footnote\plain{#}{.bndmt}}} 
{K{\footnote\plain{K}{sdb_err:0301}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0301}}} 
\f0\cf0\fs28\b\i0\ul0 301 - Type defin
ition '%1' was generated with different inernal IDs.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Type definit
ion '%1' was generated with different virtual function option.}}} 
{#{\footnote\plain{#}{.b
ndmu}}} 
{K{\footnote\plain{K}{sdb_err:0302}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0302}}} 
\f0\cf0\fs28\b\i0\ul0 302 - Type definition '%1' was gener
ated with different virtual function option.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Type definition '%1'
 was generated with different counts for properties.}}} 
{#{\footnote\plain{#}{.bndmv}}} 
{K{\footnote\plain{K}{sdb_er
r:0303}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0303}}} 
\f0\cf0\fs28\b\i0\ul0 303 - Type definition '%1' was generated with 
different counts for properties.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure '%1'  Property '%2' : 
illegal changes for generated property}}} 
{#{\footnote\plain{#}{.bndmw}}} 
{K{\footnote\plain{K}{sdb_err:0304}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:
0304}}} 
\f0\cf0\fs28\b\i0\ul0 304 - Structure '%1'  Property '%2' : illegal changes for ge
nerated property\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Base collection '%1' does not refer to a relatio
nship}}} 
{#{\footnote\plain{#}{.bndmx}}} 
{K{\footnote\plain{K}{sdb_err:0305}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0305}}} 
\f0\cf0\fs28\b\i0\ul0 305 - Base collection '%1' do
es not refer to a relationship\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 Member '%2'path '%4'
 must start with '..'}}} 
{#{\footnote\plain{#}{.bndmz}}} 
{K{\footnote\plain{K}{sdb_err:0307}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0307}}} 
\f0\cf0\fs28\b\i0\ul0 307 - Structu
re: %1 Member '%2'path '%4' must start with '..'\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 Me
mber '%2''%5' in property path '%4' is not a relationship.}}} 
{#{\footnote\plain{#}{con8pt
_6u}}} 
{K{\footnote\plain{K}{sdb_err:0308}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0308}}} 
\f0\cf0\fs28\b\i0\ul0 308 - Structure: %1 Member '%2''%5' i
n property path '%4' is not a relationship.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 Member 
'%2''%5' in property path '%4' has no inverse reference.}}} 
{#{\footnote\plain{#}{.bndo1}}} 
{K{\footnote\plain{K}{sd
b_err:0309}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0309}}} 
\f0\cf0\fs28\b\i0\ul0 309 - Structure: %1 Member '%2''%5' in pro
perty path '%4' has no inverse reference.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 Member '%
2'for '%5' in property path '%4' is not 1.}}} 
{#{\footnote\plain{#}{.bndns}}} 
{K{\footnote\plain{K}{sdb_err:0310}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_
err:0310}}} 
\f0\cf0\fs28\b\i0\ul0 310 - Structure: %1 Member '%2'for '%5' in property path
 '%4' is not 1.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Relationships defined in a property path as inter
mediate (non terminating) properties must be defined as singular
 references.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 Member '%2'option for '%5' in property
 path '%4'.}}} 
{#{\footnote\plain{#}{.bndnt}}} 
{K{\footnote\plain{K}{sdb_err:0311}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0311}}} 
\f0\cf0\fs28\b\i0\ul0 311 - Structure: %1 Mem
ber '%2'option for '%5' in property path '%4'.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Relationships defi
ned in a property path as intermediate (non terminating) propert
ies must be defined as 'owning', 'dependent' or as secundary ref
erence.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Structure: %1 Member '%2'structure for '%5' in property p
ath '%4'.}}} 
{#{\footnote\plain{#}{.bndnu}}} 
{K{\footnote\plain{K}{sdb_err:0312}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0312}}} 
\f0\cf0\fs28\b\i0\ul0 312 - Structure: %1 Membe
r '%2'structure for '%5' in property path '%4'.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Struktur: %1  Mem
ber '%2'structure for base collection '%4'.}}} 
{#{\footnote\plain{#}{.bndnv}}} 
{K{\footnote\plain{K}{sdb_err:0313}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb
_err:0313}}} 
\f0\cf0\fs28\b\i0\ul0 313 - Struktur: %1  Member '%2'structure for base colle
ction '%4'.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The structure for the base collection must be the sam
e as the structure for the relationship.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database expired. Not op
ened.}}} 
{#{\footnote\plain{#}{.bndnw}}} 
{K{\footnote\plain{K}{sdb_err:0314}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0314}}} 
\f0\cf0\fs28\b\i0\ul0 314 - Database expired. Not o
pened.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The expiration date for the database has been exceeded. Th
e database can not be opened anymore.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Storing transaktion failed.
 Database might be damaged!}}} 
{#{\footnote\plain{#}{.bndnx}}} 
{K{\footnote\plain{K}{sdb_err:0315}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0315}}} 
\f0\cf0\fs28\b\i0\ul0 315 - S
toring transaktion failed. Database might be damaged!\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A failure a
ppeared when storing a transaction to the database. The database
 is probably damaged. \par
Ask the administrator to run database setu
p to reorganize the database.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error storing transaction. Data mig
ht be lost.}}} 
{#{\footnote\plain{#}{.bndny}}} 
{K{\footnote\plain{K}{sdb_err:0316}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0316}}} 
\f0\cf0\fs28\b\i0\ul0 316 - Error storing tra
nsaction. Data might be lost.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An error occured whens storing a tr
ansaktion. In case of nested transactions the higher transaction
 will be cancelled.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database could not be opened (not licenced).}}} 
{#{\footnote\plain{#}{.
bndnz}}} 
{K{\footnote\plain{K}{sdb_err:0317}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0317}}} 
\f0\cf0\fs28\b\i0\ul0 317 - Database could not be opened 
(not licenced).\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The database requires a licence but is not yet li
cenced. You cannot run an application with an unlicenced databas
e. Run the LicenceDatabase utility to licence your database.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Inva
lid licence number for '%1'}}} 
{#{\footnote\plain{#}{con8pt_7u}}} 
{K{\footnote\plain{K}{sdb_err:0318}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0318}}} 
\f0\cf0\fs28\b\i0\ul0 318 
- Invalid licence number for '%1'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The licence number passed for t
he application is not valid. Check the licence number with the s
oftware provider.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot move instance in ordered list}}} 
{#{\footnote\plain{#}{.bndp1}}} 
{K{\footnote\plain{K}{sdb_e
rr:0320}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0320}}} 
\f0\cf0\fs28\b\i0\ul0 320 - Cannot move instance in ordered list\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Ins
tances cannot be moved in ordered lists.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Save not allowed in curr
ent context}}} 
{#{\footnote\plain{#}{.bndos}}} 
{K{\footnote\plain{K}{sdb_err:0321}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0321}}} 
\f0\cf0\fs28\b\i0\ul0 321 - Save not allowed 
in current context\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Probably the Save function is called from whit
hin a DBStore or DBCreated event handler. Save should not be cal
led within these context functions.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot discard workspace '%1'
 with subsequent workspaces}}} 
{#{\footnote\plain{#}{.bndot}}} 
{K{\footnote\plain{K}{sdb_err:0322}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0322}}} 
\f0\cf0\fs28\b\i0\ul0 322 - C
annot discard workspace '%1' with subsequent workspaces\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot pa
use server because of long transaction}}} 
{#{\footnote\plain{#}{.bndou}}} 
{K{\footnote\plain{K}{sdb_err:0323}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:
0323}}} 
\f0\cf0\fs28\b\i0\ul0 323 - Cannot pause server because of long transaction\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The ser
ver was waiting for five minutes for termination of an committin
g transaction. During this time commit did not finish. The serve
r can pause only after finishing all running transaction commits
. Try again later.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot start transaction commit: Server paused
.}}} 
{#{\footnote\plain{#}{.bndov}}} 
{K{\footnote\plain{K}{sdb_err:0324}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0324}}} 
\f0\cf0\fs28\b\i0\ul0 324 - Cannot start transaction co
mmit: Server paused.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The transaction commit cannot start since th
e server has been paused since moore than ten minutes. The trans
action is cancelled.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Workspace '%1' cannot be opened - invalid us
er}}} 
{#{\footnote\plain{#}{.bndow}}} 
{K{\footnote\plain{K}{sdb_err:0325}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0325}}} 
\f0\cf0\fs28\b\i0\ul0 325 - Workspace '%1' cannot be o
pened - invalid user\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The workspace could not be opened since the 
user is not authorized to do this. Workspaces allocated for spec
ific users can be opened only by the user who has allocated the 
workspace.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Worspace '%1' cannot be deleted - not empty.}}} 
{#{\footnote\plain{#}{.bndox}}} 
{K{\footnote\plain{K}{sdb_
err:0326}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0326}}} 
\f0\cf0\fs28\b\i0\ul0 326 - Worspace '%1' cannot be deleted - not 
empty.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The requested workspace could not be deleted because it is
 not empty. Clear the workspace running the Workspace utility fu
nction (discard or consolidate) for cleaning the workspace befor
e deletion.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Worspace '%1' cannot be deleted - not bottom workspac
e.}}} 
{#{\footnote\plain{#}{.bndoy}}} 
{K{\footnote\plain{K}{sdb_err:0327}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0327}}} 
\f0\cf0\fs28\b\i0\ul0 327 - Worspace '%1' cannot be de
leted - not bottom workspace.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The requested workspace could not b
e deleted because it is not the lowest one (bottom workspace). O
nly workspaces that have no workspaces below can be deleted. Del
ete the lower workspaces before deleting the current one.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot 
open workspace - running transaction}}} 
{#{\footnote\plain{#}{.bndoz}}} 
{K{\footnote\plain{K}{sdb_err:0328}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:03
28}}} 
\f0\cf0\fs28\b\i0\ul0 328 - Cannot open workspace - running transaction\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The workspace
 cannot be opened because at least one transaction has not been 
closed. A workspace cannot be opened within a transaction. Close
 the transaction and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot open workspace - feature n
ot activated}}} 
{#{\footnote\plain{#}{con8pt_8u}}} 
{K{\footnote\plain{K}{sdb_err:0329}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0329}}} 
\f0\cf0\fs28\b\i0\ul0 329 - Cannot open w
orkspace - feature not activated\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 You can open a workspace only wh
en the workspace feature is enabled. Run the workspace-Utility f
or enabling the workspace feature.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot locate shadow database 
definition}}} 
{#{\footnote\plain{#}{.bndq1}}} 
{K{\footnote\plain{K}{sdb_err:0330}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0330}}} 
\f0\cf0\fs28\b\i0\ul0 330 - Cannot locate shad
ow database definition\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A shadow database has been defined for the
 database but the definition entry could not be read. Probably t
he database is corrupt.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error creating shadow database}}} 
{#{\footnote\plain{#}{.bndpt}}} 
{K{\footnote\plain{K}{sdb_e
rr:0332}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0332}}} 
\f0\cf0\fs28\b\i0\ul0 332 - Error creating shadow database\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An error 
occurred while creating the shadow database. No shadow database 
was allocated. Check the path for the shadow database and check 
also for sufficient space in the target location.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Worspace cannot
 be disabled - not bottom workspace.}}} 
{#{\footnote\plain{#}{.bndpu}}} 
{K{\footnote\plain{K}{sdb_err:0333}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:03
33}}} 
\f0\cf0\fs28\b\i0\ul0 333 - Worspace cannot be disabled - not bottom workspace.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Canno
t enaable/disable workspace or shadow database features in share
d mode}}} 
{#{\footnote\plain{#}{.bndpv}}} 
{K{\footnote\plain{K}{sdb_err:0334}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0334}}} 
\f0\cf0\fs28\b\i0\ul0 334 - Cannot enaable/disable
 workspace or shadow database features in shared mode\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 For enablin
g or disabling the the workbase feature or shadow database the d
atabase handle must be opened in exclusive mode (netopt = NO).\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{In
valid workspace - missing identification.}}} 
{#{\footnote\plain{#}{.bndpw}}} 
{K{\footnote\plain{K}{sdb_err:0335}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_e
rr:0335}}} 
\f0\cf0\fs28\b\i0\ul0 335 - Invalid workspace - missing identification.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid 
workspace - file does already exist.}}} 
{#{\footnote\plain{#}{.bndpx}}} 
{K{\footnote\plain{K}{sdb_err:0336}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:03
36}}} 
\f0\cf0\fs28\b\i0\ul0 336 - Invalid workspace - file does already exist.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid work
space location - directory or file not found..}}} 
{#{\footnote\plain{#}{.bndpy}}} 
{K{\footnote\plain{K}{sdb_err:0337
}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0337}}} 
\f0\cf0\fs28\b\i0\ul0 337 - Invalid workspace location - directory or file
 not found..\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{When worspace is enabled, persistent index can not b
e add.}}} 
{#{\footnote\plain{#}{.bndpz}}} 
{K{\footnote\plain{K}{sdb_err:0338}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0338}}} 
\f0\cf0\fs28\b\i0\ul0 338 - When worspace is enabl
ed, persistent index can not be add.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Shadow database already esta
blished in '%1'}}} 
{#{\footnote\plain{#}{con8pt_9u}}} 
{K{\footnote\plain{K}{sdb_err:0339}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0339}}} 
\f0\cf0\fs28\b\i0\ul0 339 - Shadow dat
abase already established in '%1'\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{An %2-Instance with key value '
%1' (%3) is updated by another workspace.}}} 
{#{\footnote\plain{#}{.bndr1}}} 
{K{\footnote\plain{K}{sdb_err:0340}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_e
rr:0340}}} 
\f0\cf0\fs28\b\i0\ul0 340 - An %2-Instance with key value '%1' (%3) is updated 
by another workspace.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{When worspace is enabled extents can not be
 deleted.}}} 
{#{\footnote\plain{#}{.bndqs}}} 
{K{\footnote\plain{K}{sdb_err:0341}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0341}}} 
\f0\cf0\fs28\b\i0\ul0 341 - When worspace is en
abled extents can not be deleted.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Path '%1' could not be position
ed}}} 
{#{\footnote\plain{#}{.bndqt}}} 
{K{\footnote\plain{K}{sdb_err:0342}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0342}}} 
\f0\cf0\fs28\b\i0\ul0 342 - Path '%1' could not be pos
itioned\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Filter expression not supported in this context}}} 
{#{\footnote\plain{#}{.bndqu}}} 
{K{\footnote\plain{K}{sdb_
err:0343}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0343}}} 
\f0\cf0\fs28\b\i0\ul0 343 - Filter expression not supported in thi
s context\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A property path contains a filter expression, which is 
not allowed for paths passed to GetPropertyHandle and other func
tions. Position expressions must be anclosed in [] or ().\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot 
set auto-key - no key definition for collection (%1 in %2)}}} 
{#{\footnote\plain{#}{.bndqv
}}} 
{K{\footnote\plain{K}{sdb_err:0344}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0344}}} 
\f0\cf0\fs28\b\i0\ul0 344 - Cannot set auto-key - no key defin
ition for collection (%1 in %2)\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When defining an auto-key (e.g in
 a property path) there must be a key defined for the collection
. Otherwise auto position can be used only. Check, whether the k
ey contains alphabetic characters instead of numerical.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sort orde
r cannot be changed when ato-key is activated (%1,%2)}}} 
{#{\footnote\plain{#}{.bndqw}}} 
{K{\footnote\plain{K}{sdb_e
rr:0345}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0345}}} 
\f0\cf0\fs28\b\i0\ul0 345 - Sort order cannot be changed when ato-k
ey is activated (%1,%2)\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Auto-Key is set when a key instance shoul
d be positioned or provided automatically or when a key selectio
n has been defined. This is done usually in a property path spec
ification. In this case the sort order cannot be changed.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot 
create instance for ato-position handle}}} 
{#{\footnote\plain{#}{.bndqx}}} 
{K{\footnote\plain{K}{sdb_err:0346}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err
:0346}}} 
\f0\cf0\fs28\b\i0\ul0 346 - Cannot create instance for ato-position handle\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When au
to-position is set for a property handle (key or position), addi
ng an instance to the handle is possible only for the key or pos
ition set for the handle.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{GUID cannot be generated for instance (
read-only access)}}} 
{#{\footnote\plain{#}{.bndqy}}} 
{K{\footnote\plain{K}{sdb_err:0347}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
\f0\cf0\fs28\b\i0\ul0 347 - GUID cannot be generate
d for instance (read-only access)\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The GUID for an instance could 
not be generated since the database or the property handle is op
ened in read-only mode.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot change reference for static proper
ty handle}}} 
{#{\footnote\plain{#}{.bndqz}}} 
{K{\footnote\plain{K}{sdb_err:0348}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0348}}} 
\f0\cf0\fs28\b\i0\ul0 348 - Cannot change refer
ence for static property handle\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The reference (property access bl
ock) stored in a property handle may change, when refering to su
b-ordinated property handles for weak-typed collections. Usually
 the access block is updated when the upper weak typed collectio
n changes the instance type. This is, however, not possible for 
static property handles as being provided with GetPropertyHandle
() or GetParentProperty().\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Could not open extent '%1'}}} 
{#{\footnote\plain{#}{con8pt_0u}}} 
{K{\footnote\plain{K}{sdb
_err:0349}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0349}}} 
\f0\cf0\fs28\b\i0\ul0 349 - Could not open extent '%1'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The extent 
could not be opened for any reason as physical damage of the ext
ent, invalid access mode or an attempt to open a temporary acces
s mode for a database opened in read mode.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Missing 'From' clause 
in view definition}}} 
{#{\footnote\plain{#}{.bnds1}}} 
{K{\footnote\plain{K}{sdb_err:0350}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0350}}} 
\f0\cf0\fs28\b\i0\ul0 350 - Missing 'F
rom' clause in view definition\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A view definition must contain at 
least a 'Select' and 'From' directive. Please, take into account
 that keywords in the view definition are case sensitive.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid
 file path for view output}}} 
{#{\footnote\plain{#}{.bndrs}}} 
{K{\footnote\plain{K}{sdb_err:0351}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0351}}} 
\f0\cf0\fs28\b\i0\ul0 351 - In
valid file path for view output\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Failed to open output data source
 '%1' for view}}} 
{#{\footnote\plain{#}{.bndrt}}} 
{K{\footnote\plain{K}{sdb_err:0352}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0352}}} 
\f0\cf0\fs28\b\i0\ul0 352 - Failed to open
 output data source '%1' for view\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Missing 'Select' clause in view
 definition}}} 
{#{\footnote\plain{#}{.bndru}}} 
{K{\footnote\plain{K}{sdb_err:0353}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0353}}} 
\f0\cf0\fs28\b\i0\ul0 353 - Missing 'Select' 
clause in view definition\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid Query identifier when executing
 predefined query}}} 
{#{\footnote\plain{#}{.bndrv}}} 
{K{\footnote\plain{K}{sdb_err:0354}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0354}}} 
\f0\cf0\fs28\b\i0\ul0 354 - Invalid Que
ry identifier when executing predefined query\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid instance id
entifier '%1' passed as scope}}} 
{#{\footnote\plain{#}{.bndrw}}} 
{K{\footnote\plain{K}{sdb_err:0355}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0355}}} 
\f0\cf0\fs28\b\i0\ul0 355 -
 Invalid instance identifier '%1' passed as scope\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When defining a
n instance based view the instance can be seleceted by means of 
a, instance identifier. Instance identifiers can be passed as lo
cal object identifiers (LOID), which is a number, or as global u
nique identifier (GUID). There was, however, no instance associa
ted with the identifier passed.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid expression '%1' defined f
or view base}}} 
{#{\footnote\plain{#}{.bndrx}}} 
{K{\footnote\plain{K}{sdb_err:0356}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0356}}} 
\f0\cf0\fs28\b\i0\ul0 356 - Invalid expressi
on '%1' defined for view base\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{View expression '%1' is not a colle
ction}}} 
{#{\footnote\plain{#}{.bndry}}} 
{K{\footnote\plain{K}{sdb_err:0357}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0357}}} 
\f0\cf0\fs28\b\i0\ul0 357 - View expression '%1' is
 not a collection\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The view expression passed as view path or in a
 From() directive of a view definition must result in an express
ion.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance cache requires sort or ident key}}} 
{#{\footnote\plain{#}{.bndrz}}} 
{K{\footnote\plain{K}{sdb_err:0358}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{s
db_err:0358}}} 
\f0\cf0\fs28\b\i0\ul0 358 - Instance cache requires sort or ident key\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An ins
tance cache can be defined only, if the collection is ordered or
 has a unique identifying key.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Missing identifier for target ofje
ct}}} 
{#{\footnote\plain{#}{IDH1zvcy3}}} 
{K{\footnote\plain{K}{sdb_err:0359}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0359}}} 
\f0\cf0\fs28\b\i0\ul0 359 - Missing identifier for 
target ofject\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Identifiers for objects must not start with ' '.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Tar
get object '%1' does already exist}}} 
{#{\footnote\plain{#}{.bndss}}} 
{K{\footnote\plain{K}{sdb_err:0361}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0361
}}} 
\f0\cf0\fs28\b\i0\ul0 361 - Target object '%1' does already exist\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Instances cannot be c
opied to target objects that do already exist. The object may al
so exist in a global context outside the visible collection.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Erro
r reading database entry}}} 
{#{\footnote\plain{#}{.bndst}}} 
{K{\footnote\plain{K}{sdb_err:0362}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0362}}} 
\f0\cf0\fs28\b\i0\ul0 362 - Erro
r reading database entry\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An attempt was made reading a database i
nstance on position 0. 0 is an invalid position and should not b
e requested. Probably the database is currupted. Run CheckDB to 
get more detailed error explanations.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Workspace(s) are active - n
o version created}}} 
{#{\footnote\plain{#}{.bndsu}}} 
{K{\footnote\plain{K}{sdb_err:0363}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0363}}} 
\f0\cf0\fs28\b\i0\ul0 363 - Workspace(s
) are active - no version created\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When the workspace feature is e
nabled and data is stored in one ore more workspaces, no version
s can be created. Before creating a new version, all workspaces 
must be consolidated or discarded.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Operation '%1' requires left o
perator}}} 
{#{\footnote\plain{#}{.bndsv}}} 
{K{\footnote\plain{K}{sdb_err:0364}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0364}}} 
\f0\cf0\fs28\b\i0\ul0 364 - Operation '%1' requir
es left operator\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Binary operations require an operator before the
 operation and cannot be defined at the beginning of a path.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Miss
ing operation rule for oparation '%1'}}} 
{#{\footnote\plain{#}{.bndsw}}} 
{K{\footnote\plain{K}{sdb_err:0365}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0
365}}} 
\f0\cf0\fs28\b\i0\ul0 365 - Missing operation rule for oparation '%1'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Operations req
uire an operation rule, which describes the expression or second
 opearand for the rule.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{SID: %1, Type: %2, Size: %3}}} 
{#{\footnote\plain{#}{.bndsx}}} 
{K{\footnote\plain{K}{sdb_err:
0366}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0366}}} 
\f0\cf0\fs28\b\i0\ul0 366 - SID: %1, Type: %2, Size: %3\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 This message de
scribes a preceeding database entry error, that ocurred while ac
cessing a database entry as an instance or index.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalide index 
entry '%1' (%2) will be deleted.}}} 
{#{\footnote\plain{#}{.bndsy}}} 
{K{\footnote\plain{K}{sdb_err:0367}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0367}}} 
\f0\cf0\fs28\b\i0\ul0 36
7 - Invalide index entry '%1' (%2) will be deleted.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An invalid in
dex entry has been found and will be deleted during a repair pro
cess.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Could not delete index entry '%1'}}} 
{#{\footnote\plain{#}{.bndsz}}} 
{K{\footnote\plain{K}{sdb_err:0368}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:
0368}}} 
\f0\cf0\fs28\b\i0\ul0 368 - Could not delete index entry '%1'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An invalid index entr
y has been found during a repair process but could not be delete
d. It is suggested to reorganize the database (SetupDB).\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid 
count for index entry '%1(%2)'. Count replaced by %3.}}} 
{#{\footnote\plain{#}{con8pt_.u}}} 
{K{\footnote\plain{K}{sd
b_err:0369}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0369}}} 
\f0\cf0\fs28\b\i0\ul0 369 - Invalid count for index entry '%1(%2
)'. Count replaced by %3.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An index tree has an inconsistent count
 in the hierarchy. This is a redundant information and not a cri
tical problem. The count has been repaired.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Entry count for index
 entry '%1' is 0. Index entry deleted.}}} 
{#{\footnote\plain{#}{.bndu1}}} 
{K{\footnote\plain{K}{sdb_err:0371}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:
0371}}} 
\f0\cf0\fs28\b\i0\ul0 371 - Entry count for index entry '%1' is 0. Index entry del
eted.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An index tree has an inconsistent count in the hierarchy. T
his is a redundant information and not a critical problem. The i
ndex entry has been deleted.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Path element '%3' in '%1...' not def
ined in '%2'}}} 
{#{\footnote\plain{#}{.bndts}}} 
{K{\footnote\plain{K}{sdb_err:0372}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0372}}} 
\f0\cf0\fs28\b\i0\ul0 372 - Path element '%3
' in '%1...' not defined in '%2'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The access path contains an inva
lid path element, i.e. the name of the element is not a member (
property, function, expression etc.) of the structure.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Open Dicti
onary: Error in generation phase.}}} 
{#{\footnote\plain{#}{.bndtt}}} 
{K{\footnote\plain{K}{sdb_err:0400}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0400}}} 
\f0\cf0\fs28\b\i0\ul0 4
00 - Open Dictionary: Error in generation phase.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Could not connec
t to server}}} 
{#{\footnote\plain{#}{.bndtu}}} 
{K{\footnote\plain{K}{sdb_err:0500}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0500}}} 
\f0\cf0\fs28\b\i0\ul0 500 - Could not connect
 to server\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The server could not be found in the network or the sy
mbolic server name could not be resolved to an IP-address. Check
 whether the server name is correct and the server is running.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ho
st not found}}} 
{#{\footnote\plain{#}{.bndtv}}} 
{K{\footnote\plain{K}{sdb_err:0501}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0501}}} 
\f0\cf0\fs28\b\i0\ul0 501 - Host not found\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A 
connection could not be established because the addressed host w
as not found. Check the server name passed after the @-separator
. If the hostname is correct check whether the server has been s
tarted on the server machine.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Could not (re)connect to host}}} 
{#{\footnote\plain{#}{.bndtw
}}} 
{K{\footnote\plain{K}{sdb_err:0502}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0502}}} 
\f0\cf0\fs28\b\i0\ul0 502 - Could not (re)connect to host\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The c
onnection to the host was closed and could not be reconnected. P
robably the server was shut down.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Listening error}}} 
{#{\footnote\plain{#}{.bndtx}}} 
{K{\footnote\plain{K}{sdb_err:05
03}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0503}}} 
\f0\cf0\fs28\b\i0\ul0 503 - Listening error\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 ????????????\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Bind error}}} 
{#{\footnote\plain{#}{.bndty}}} 
{K{\footnote\plain{K}{s
db_err:0504}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0504}}} 
\f0\cf0\fs28\b\i0\ul0 504 - Bind error\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 ???????????\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid server
 identifiation (connection string)}}} 
{#{\footnote\plain{#}{.bndtz}}} 
{K{\footnote\plain{K}{sdb_err:0505}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0505
}}} 
\f0\cf0\fs28\b\i0\ul0 505 - Invalid server identifiation (connection string)\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The server
 identification must consist of the port number and the server n
ame in the net. These two parameters have to be separated by an 
'@'. Check the connection string and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Client version '%
1' does not correspond to server version '%2'}}} 
{#{\footnote\plain{#}{con8pt__u}}} 
{K{\footnote\plain{K}{sdb_err:05
06}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0506}}} 
\f0\cf0\fs28\b\i0\ul0 506 - Client version '%1' does not correspond to s
erver version '%2'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Client and server are running with different d
atabase versions. Update the database version to the highest ver
sion available.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Unknown machine type}}} 
{#{\footnote\plain{#}{.bndv1}}} 
{K{\footnote\plain{K}{sdb_err:0507}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:050
7}}} 
\f0\cf0\fs28\b\i0\ul0 507 - Unknown machine type\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Client or server machine do not have 
a valid machine type. The server connection could not be establi
shed. \par
Contact run Software (info@run-software.com) for getting m
ore information.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid data type for instance}}} 
{#{\footnote\plain{#}{.bndus}}} 
{K{\footnote\plain{K}{sdb_err:0508
}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0508}}} 
\f0\cf0\fs28\b\i0\ul0 508 - Invalid data type for instance\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid server f
unction call}}} 
{#{\footnote\plain{#}{.bndut}}} 
{K{\footnote\plain{K}{sdb_err:0509}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0509}}} 
\f0\cf0\fs28\b\i0\ul0 509 - Invalid server f
unction call\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An invalid function has been called on the server si
de. The requested function could not be executed. \par
There is proba
bly a version conflict between client and server version. Contac
t run Software (info@run-software.com) for getting more informat
ion.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance link can be created within one database, only.}}} 
{#{\footnote\plain{#}{.bndu
u}}} 
{K{\footnote\plain{K}{sdb_err:0510}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0510}}} 
\f0\cf0\fs28\b\i0\ul0 510 - Instance link can be created with
in one database, only.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an atempt made to link an instan
ce located on the client/server with an instance located on the 
server/client. Linking instances both instances must be stored i
n the same database, iether on the server or on the client.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Insta
nce areas can be allocated for free property handles, only.}}} 
{#{\footnote\plain{#}{.bndu
v}}} 
{K{\footnote\plain{K}{sdb_err:0511}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0511}}} 
\f0\cf0\fs28\b\i0\ul0 511 - Instance areas can be allocated f
or free property handles, only.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Free property handles are propert
y handles that do not have a parent property handle and that are
 not connected to the server.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Instance descriptions can be alloca
ted for free property handles, only.}}} 
{#{\footnote\plain{#}{.bnduw}}} 
{K{\footnote\plain{K}{sdb_err:0512}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:05
12}}} 
\f0\cf0\fs28\b\i0\ul0 512 - Instance descriptions can be allocated for free property
 handles, only.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Free property handles are property handles that d
o not have a parent property handle and that are not connected t
o the server.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Sort key conflict between client and server.}}} 
{#{\footnote\plain{#}{.bndux}}} 
{K{\footnote\plain{K}{s
db_err:0513}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0513}}} 
\f0\cf0\fs28\b\i0\ul0 513 - Sort key conflict between client an
d server.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Missing filed description for property handle.}}} 
{#{\footnote\plain{#}{.bnduy}}} 
{K{\footnote\plain{K}{sdb
_err:0514}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0514}}} 
\f0\cf0\fs28\b\i0\ul0 514 - Missing filed description for propert
y handle.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{One ODABA-Client cannot connect to different servers}}} 
{#{\footnote\plain{#}{.bn
duz}}} 
{K{\footnote\plain{K}{sdb_err:0515}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0515}}} 
\f0\cf0\fs28\b\i0\ul0 515 - One ODABA-Client cannot connect
 to different servers\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There was an attempt to connect an ODABA cl
ient to different servers. Create different ODABA-clients to est
ablish connections to different servers in your application.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Obje
ct can not be opened before transaction is stoped.}}} 
{#{\footnote\plain{#}{IDH1zvd13}}} 
{K{\footnote\plain{K}{sdb_e
rr:0516}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0516}}} 
\f0\cf0\fs28\b\i0\ul0 516 - Object can not be opened before transac
tion is stoped.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Connection not opened or disconnected}}} 
{#{\footnote\plain{#}{.bnew1}}} 
{K{\footnote\plain{K}{sdb_er
r:0517}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0517}}} 
\f0\cf0\fs28\b\i0\ul0 517 - Connection not opened or disconnected\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 A c
lient object is called but the object is not connected to the se
rver. The connection was not established because of an error or 
the connection was closed by an application or system request. \par
R
econnect and try again.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Action failed (Class: %1, Function: %2)}}} 
{#{\footnote\plain{#}{.b
nevs}}} 
{K{\footnote\plain{K}{sdb_err:0518}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0518}}} 
\f0\cf0\fs28\b\i0\ul0 518 - Action failed (Class: %1, Func
tion: %2)\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The requested function call failed due tue an error. Th
e function terminated abnormally. Contact the software provider 
 or run Software (info@run-software.com) for more information.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Se
rver dictionary required}}} 
{#{\footnote\plain{#}{.bnevt}}} 
{K{\footnote\plain{K}{sdb_err:0519}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0519}}} 
\f0\cf0\fs28\b\i0\ul0 519 - Serv
er dictionary required\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 This is an application program error. When
 requesting a server database the passed dictionary must be open
ed in server mode as well.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Dictionary not opened}}} 
{#{\footnote\plain{#}{.bnevu}}} 
{K{\footnote\plain{K}{sdb_err:052
0}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0520}}} 
\f0\cf0\fs28\b\i0\ul0 520 - Dictionary not opened\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When opening a database 
the required dictionary handle (parent) was not passed or not op
ened.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Database not opened}}} 
{#{\footnote\plain{#}{.bnevv}}} 
{K{\footnote\plain{K}{sdb_err:0521}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0521}}} 
\f0\cf0\fs28\b\i0\ul0 521 - Data
base not opened\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When opening a database object the required datab
ase handle (parent) was not passed or not opened.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Operstion not d
efined or invalid}}} 
{#{\footnote\plain{#}{.bnevw}}} 
{K{\footnote\plain{K}{sdb_err:0522}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0522}}} 
\f0\cf0\fs28\b\i0\ul0 522 - Operstion n
ot defined or invalid\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 There is no operstion defined for the opera
tion handle or the operation definition failed (e.g. because of 
an invalid expression).\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Error accessing weak typed copy property 
handle}}} 
{#{\footnote\plain{#}{.bnevy}}} 
{K{\footnote\plain{K}{sdb_err:0524}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0524}}} 
\f0\cf0\fs28\b\i0\ul0 524 - Error accessing weak t
yped copy property handle\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 When using property handles that have a
 weak typed parent (upper property handle)  in the hierarchy, wh
ich is owned by the application (copy handle), changing the type
 in the weak typed copy handle will invalidate all subordinated 
property handles. You can use these handles for access again, on
ly, when you select the same type in the weak typed copy handle.
\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{ODABA extents can be opened for physical database extents, only.
}}} 
{#{\footnote\plain{#}{.bnevz}}} 
{K{\footnote\plain{K}{sdb_err:0525}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0525}}} 
\f0\cf0\fs28\b\i0\ul0 525 - ODABA extents can be opened 
for physical database extents, only.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The databaseHandle has been 
opened as logical databaseHandle (withaout database path). For l
ogical DatabaseHandles you cannot open ODABA extents or enumerat
ions.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{An oparation needs a calling object from the same DatabaseO
bject as the result.}}} 
{#{\footnote\plain{#}{IDH1zve23}}} 
{K{\footnote\plain{K}{sdb_err:0526}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0526}}} 
\f0\cf0\fs28\b\i0\ul0 526 - An op
aration needs a calling object from the same DatabaseObject as t
he result.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Cannot delete instances selected in the property handl
e hierarchy}}} 
{#{\footnote\plain{#}{.bnems}}} 
{K{\footnote\plain{K}{sdb_err:0528}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0528}}} 
\f0\cf0\fs28\b\i0\ul0 528 - Cannot delete ins
tances selected in the property handle hierarchy\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The instance tha
t should be removed from collection is selected in the same coll
ection in one of the parent property handles. You cannot delete 
instances accessed recursively in a property handle hierarchy.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Ty
pe conflict reading an instance.}}} 
{#{\footnote\plain{#}{.bnemt}}} 
{K{\footnote\plain{K}{sdb_err:0529}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0529}}} 
\f0\cf0\fs28\b\i0\ul0 52
9 - Type conflict reading an instance.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Server is shutting down. C
annot create new clients.}}} 
{#{\footnote\plain{#}{.bnemu}}} 
{K{\footnote\plain{K}{sdb_err:0532}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0532}}} 
\f0\cf0\fs28\b\i0\ul0 532 - Ser
ver is shutting down. Cannot create new clients.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Wrong intermedia
te file specification '%1%. Intermediate fiel ignored.}}} 
{#{\footnote\plain{#}{.bnemw}}} 
{K{\footnote\plain{K}{sdb_
err:0534}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0534}}} 
\f0\cf0\fs28\b\i0\ul0 534 - Wrong intermediate file specification 
'%1%. Intermediate fiel ignored.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The intermediate file path must 
point to a valid location, i.e. the directory must exist and the
 application must have the rights to create and update files in 
this location.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid release quote definition '%1'. Default 25%
 used.}}} 
{#{\footnote\plain{#}{.bnemx}}} 
{K{\footnote\plain{K}{sdb_err:0535}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0535}}} 
\f0\cf0\fs28\b\i0\ul0 535 - Invalid release quote 
definition '%1'. Default 25% used.\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The release quote must be a va
lue between 1 and 100.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Could not start thread for "write to datab
ase". Database not opened.}}} 
{#{\footnote\plain{#}{.bnemy}}} 
{K{\footnote\plain{K}{sdb_err:0536}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0536}}} 
\f0\cf0\fs28\b\i0\ul0 536 - Co
uld not start thread for "write to database". Database not opene
d.\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Client event handler failed (Event: %1)}}} 
{#{\footnote\plain{#}{.bnemz}}} 
{K{\footnote\plain{K}{sdb_err:0537}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_e
rr:0537}}} 
\f0\cf0\fs28\b\i0\ul0 537 - Client event handler failed (Event: %1)\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 An event tha
t has passed from the server has terminated abnormally when bein
g handeled on the client side. Check the function handling the n
otified event.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Internal error: Invalid server object}}} 
{#{\footnote\plain{#}{ID_7gbl65}}} 
{K{\footnote\plain{K}{sdb_
err:0538}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0538}}} 
\f0\cf0\fs28\b\i0\ul0 538 - Internal error: Invalid server object\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{M
issing view path definition}}} 
{#{\footnote\plain{#}{.bneo1}}} 
{K{\footnote\plain{K}{sdb_err:0550}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0550}}} 
\f0\cf0\fs28\b\i0\ul0 550 - M
issing view path definition\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 Constructing a view definition no vie
w path has been defined. Contact application developer to correc
t the problem.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid or missing post condition}}} 
{#{\footnote\plain{#}{.bnens}}} 
{K{\footnote\plain{K}{sdb_err:055
1}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0551}}} 
\f0\cf0\fs28\b\i0\ul0 551 - Invalid or missing post condition\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid or m
issing pre-condition}}} 
{#{\footnote\plain{#}{.bnent}}} 
{K{\footnote\plain{K}{sdb_err:0552}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0552}}} 
\f0\cf0\fs28\b\i0\ul0 552 - Invalid 
or missing pre-condition\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Missing or invalid sortkey name '%1' in 
'%2' of view '%3'}}} 
{#{\footnote\plain{#}{.bnenu}}} 
{K{\footnote\plain{K}{sdb_err:0553}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0553}}} 
\f0\cf0\fs28\b\i0\ul0 553 - Missing or 
invalid sortkey name '%1' in '%2' of view '%3'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The sortkey name i
s missing or not a valid index for the selected collection or th
e collection path is not defined for the view.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Missing or invalid
 filter expression '%1' in '%2' of view '%3'}}} 
{#{\footnote\plain{#}{.bnenv}}} 
{K{\footnote\plain{K}{sdb_err:0554}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sd
b_err:0554}}} 
\f0\cf0\fs28\b\i0\ul0 554 - Missing or invalid filter expression '%1' in '%2
' of view '%3'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The filter expression is missing or not valid for 
the selected collection or the collection path is not defined fo
r the view.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Invalid or missing source '%1' for '%2' in '%3'}}} 
{#{\footnote\plain{#}{.bnenw
}}} 
{K{\footnote\plain{K}{sdb_err:0555}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sdb_err:0555}}} 
\f0\cf0\fs28\b\i0\ul0 555 - Invalid or missing source '%1' for
 '%2' in '%3'\par
\pard\s0\ql\sb120 \f2\cf2\fs20\b0\i0\ul0 The source is missing or not valid for the selected
 property or the souurce is not a valid expression or path.\par
\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par\pard\par
{${\footnote\plain{$}{Inval
id source type defined for '%2' in view '%3'}}} 
{#{\footnote\plain{#}{.bnenx}}} 
{K{\footnote\plain{K}{sdb_err:0556}}} 
\pard\keepn\s1\ql\sb240 \f9\cf9\fs16\b\i0\ul0 \par
{K{\footnote\plain{K}{sd
b_err:0556}}} 
\f0\cf0\fs28\b\i0\ul0 556 - Invalid source type defined for '%2' in view '%3
'\par
\pard\s0\ql\sb60 \f2\cf2\fs20\b0\i0\ul0 \par
\par
\par\pard\par
}
«REM»
   Copyright 2006 by    
   
       itemis GmbH & Co. KG
       Heinrichstr. 51
       D-44536 Luenen
       Germany
       http://www.itemis.de

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
«ENDREM»

«IMPORT org::openarchitectureware::meta::uml::classifier»
«EXTENSION de::itemis::oaw::javabasics::ext::NameConventions»
«EXTENSION de::itemis::oaw::javabasics::ext::Associations»

«DEFINE ReferenceVariables FOR Class»
«FOREACH AssociationEnd.Opposite.select(ae|ae.isNavigable) AS ae»
	private «ae.fqn()» «ae.asInstanceVar()»;
«ENDFOREACH»	
«ENDDEFINE»

«DEFINE AccessorMethods FOR Class»
«EXPAND ToOneAccessorMethods FOREACH AssociationEnd.Opposite.select(ae|!ae.isMultiple && ae.isNavigable)»
«EXPAND ToManyAccessorMethods FOREACH AssociationEnd.Opposite.select(ae|ae.isMultiple && ae.isNavigable)»
«ENDDEFINE»

«DEFINE ToOneAccessorMethods FOR AssociationEnd»
	public void «asSetter()» («Class.fqn()» «asParameter()») {
		this.«asInstanceVar()» = «asParameter()»;
	}
	
	public «Class.fqn()» «asGetter()» () {
		return this.«asInstanceVar()»;
	}
«ENDDEFINE»

«DEFINE ToManyAccessorMethods FOR AssociationEnd»
	public void add«NameS.toFirstUpper()» («Class.fqn()» «asParameter()») {
		if (this.«asInstanceVar()»==null) this.«asInstanceVar()» = new «Class.collectionTypeImpl()»();
		this.«asInstanceVar()».add(«asParameter()»);
	}
	
	public void remove«NameS.toFirstUpper()» («Class.fqn()» «asParameter()») {
		if (this.«asInstanceVar()»!=null) {
			this.«asInstanceVar()».remove(«asParameter()»);
		}
	}
	
	public «iterator()» «asGetter()» () {
		return (this.«asInstanceVar()»!=null) ? this.«asInstanceVar()».iterator() : null;
	}
«ENDDEFINE»

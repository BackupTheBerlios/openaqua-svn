«EXTENSION org::fornax::cartridges::uml2::javabasic::extensions::Names»
«EXTENSION org::fornax::cartridges::uml2::javabasic::extensions::Helper»

/**
*	Creates all attributes needed for the associations of the given uml::Classifier
*/
«DEFINE attribute FOR uml::Classifier»
	«FOREACH AllAssociations().typeSelect(uml::Association) AS ass»
		«FOREACH ass.ownedEnd.select(e|e.type.name!=name) AS a»
			«EXPAND field FOR a»
		«ENDFOREACH»		
	«ENDFOREACH»
«ENDDEFINE»

/**
*	Creates all geter/setter needed for the associations of the given uml::Classifier
*/
«DEFINE accessors FOR uml::Classifier»
	«FOREACH AllAssociations().typeSelect(uml::Association) AS ass»
		«FOREACH ass.ownedEnd.select(e|e.type.name!=name) AS a»
			«EXPAND accessors FOR a»
		«ENDFOREACH»		
	«ENDFOREACH»
«ENDDEFINE»

/**
*	Creates a field for the given uml::Property derived by the association
*/
«DEFINE field FOR uml::Property»
	 «IF isNavigable()»
	 	«IF getUpper() == -1»
	 		private «IF isOrdered»java.util.List«ELSE»java.util.Set«ENDIF» «name» = 
	 			new «IF isOrdered»java.util.ArrayList«ELSE»java.util.HashSet«ENDIF»();
	 	«ELSE»
	 		private «type.name» «name» = null;
	 	«ENDIF»
	 «ENDIF»
«ENDDEFINE»

/**
*	Creates a getter/setter pair for the given uml::Property derived by the association
*/
«DEFINE accessors FOR uml::Property»
	«IF isNavigable()»
		«IF getUpper() == -1»
			«EXPAND Documentation::documentationAssociationGetter(name, isOrdered) FOR association»
			public «IF isOrdered»java.util.List«ELSE»java.util.Set«ENDIF» «toGetter()»(){
				return «name»;
			}
			
			«EXPAND Documentation::documentationAssociationSetter(name, isOrdered) FOR association»
			public void «toSetter()»(«IF isOrdered»java.util.List«ELSE»java.util.Set«ENDIF» «name»){
				this.«name» = «name»;
			}
		«ELSEIF getUpper() == 1»
			«EXPAND Documentation::documentationAssociationGetter(name, type) FOR association»
			public «type.name» «toGetter()»(){
				return «name»;
				}
 		
 				«EXPAND Documentation::documentationAssociationSetter(name, type) FOR association»
			public void «toSetter()»(«type.name» «type.toVar()»){
				this.«name» = «name»;
			}
		«ENDIF»
	«ENDIF»	
«ENDDEFINE»

/**
*	Creates a getter/setter pair for the given uml::Property derived by the association for
*	an interface
*/
«DEFINE accessorsInterface FOR uml::Property»
	«IF isNavigable()»
		«IF getUpper() == -1»
			«EXPAND Documentation::documentationAssociationGetter(name, isOrdered) FOR association»
			public «IF isOrdered»java.util.List«ELSE»java.util.Set«ENDIF» «toGetter()»();
			
			«EXPAND Documentation::documentationAssociationSetter(name, isOrdered) FOR association»
			public void «toSetter()»(«IF isOrdered»java.util.List«ELSE»java.util.Set«ENDIF» «name»);
		«ELSEIF getUpper() == 1»
			«EXPAND Documentation::documentationAssociationGetter(name, type) FOR association»
			public «type.name» «toGetter()»();
 		
 				«EXPAND Documentation::documentationAssociationSetter(name, type) FOR association»
			public void «toSetter()»(«type.name» «type.toVar()»);
		«ENDIF»
	«ENDIF»	
«ENDDEFINE»